(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    719157,      13103]
NotebookOptionsPosition[    716268,      13047]
NotebookOutlinePosition[    716602,      13062]
CellTagsIndexPosition[    716559,      13059]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[{
 RowBox[{
  RowBox[{
  "url", "=", 
   "\"\<http://pages.mtu.edu/~dnaneet/thermo/hptr_dense_1.txt\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"datasetDirty", "=", 
    RowBox[{"Import", "[", 
     RowBox[{"url", ",", " ", "\"\<Data\>\""}], "]"}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"names", "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"'", 
       RowBox[{"celcius", "'"}]}], ",", 
      RowBox[{"'", 
       RowBox[{"bar", "'"}]}], ",", 
      RowBox[{"'", 
       RowBox[{"region", "'"}]}], ",", 
      RowBox[{"'", 
       RowBox[{"kJPerKg", "'"}]}]}], "}"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"s", "=", 
   RowBox[{
    RowBox[{"Dimensions", "[", "dataset", "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dataset", "=", 
   RowBox[{"Select", "[", 
    RowBox[{"dataset", ",", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "3", "]"}], "]"}], "\[NotEqual]", " ", "0"}], "&"}]}], 
    "]"}]}], ";", " ", 
  RowBox[{"(*", 
   RowBox[{
   "Select", " ", "only", " ", "those", " ", "rows", " ", "and", " ", 
    "columns", " ", "with", " ", "non", " ", "zero", " ", "region"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"Take", "[", 
   RowBox[{"dataset", ",", "5"}], "]"}]}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.7646755211051283`*^9, 3.764675712461441*^9}, {
  3.7646758874819107`*^9, 3.764675887915618*^9}, {3.764677122560842*^9, 
  3.764677185718378*^9}, {3.764677371699192*^9, 3.7646774033941593`*^9}, {
  3.7646777976563168`*^9, 3.7646777997906637`*^9}},
 CellLabel->
  "In[240]:=",ExpressionUUID->"1fb841ef-4e46-4970-92fa-bdca5b8eb74d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"10", ",", "1", ",", "1", ",", "42.1174301501931`"}], "}"}], ",", 
   
   RowBox[{"{", 
    RowBox[{"20", ",", "1", ",", "1", ",", "84.0118111671365`"}], "}"}], ",", 
   
   RowBox[{"{", 
    RowBox[{"30", ",", "1", ",", "1", ",", "125.832506242021`"}], "}"}], ",", 
   
   RowBox[{"{", 
    RowBox[{"40", ",", "1", ",", "1", ",", "167.623138823847`"}], "}"}], ",", 
   
   RowBox[{"{", 
    RowBox[{"50", ",", "1", ",", "1", ",", "209.411798567057`"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.764675610509474*^9, 3.76467565402197*^9}, {
   3.7646757099941597`*^9, 3.7646757130479383`*^9}, 3.764675888454954*^9, {
   3.764677161691718*^9, 3.764677186971119*^9}, {3.76467738782891*^9, 
   3.764677404380805*^9}, 3.764677800799692*^9},
 CellLabel->
  "Out[243]=",ExpressionUUID->"bdfa08b2-1dce-43b1-953c-c6c4e51b1267"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Data division", "Subsubsection",
 CellChangeTimes->{{3.76467581962195*^9, 
  3.764675832453739*^9}},ExpressionUUID->"680299ec-ba8f-4488-a15e-\
f59dd2a893e9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"T", "=", 
   RowBox[{"dataset", "[", 
    RowBox[{"[", 
     RowBox[{
      RowBox[{"2", ";;", "s"}], ",", "1"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"P", "=", 
   RowBox[{"dataset", "[", 
    RowBox[{"[", 
     RowBox[{
      RowBox[{"2", ";;", "s"}], ",", "2"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"r", "=", 
   RowBox[{
    RowBox[{"dataset", "[", 
     RowBox[{"[", 
      RowBox[{
       RowBox[{"2", ";;", "s"}], ",", "3"}], "]"}], "]"}], "/.", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"0", "\[Rule]", "\"\<r0\>\""}], ",", 
      RowBox[{"1", "\[Rule]", "\"\<r1\>\""}], ",", " ", 
      RowBox[{"2", "\[Rule]", "\"\<r2\>\""}], ",", " ", 
      RowBox[{"3", "\[Rule]", "\"\<r3\>\""}], ",", " ", 
      RowBox[{"4", "\[Rule]", "\"\<r4\>\""}], ",", " ", 
      RowBox[{"5", "\[Rule]", "\"\<r5\>\""}]}], "}"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"h", "=", 
   RowBox[{"dataset", "[", 
    RowBox[{"[", 
     RowBox[{
      RowBox[{"2", ";;", "s"}], ",", "4"}], "]"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.7646758682628927`*^9, 3.764675959655405*^9}, {
  3.7646761148681993`*^9, 3.764676119387692*^9}, {3.7646761833467093`*^9, 
  3.764676186907428*^9}},
 CellLabel->
  "In[244]:=",ExpressionUUID->"573554bf-fb3b-457c-998f-88a75ff06e9e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"regionIdentification", "=", 
   RowBox[{"Thread", "[", 
    RowBox[{"{", 
     RowBox[{"T", ",", "P"}], "}"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"mldata", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"Thread", "[", 
     RowBox[{"regionIdentification", "\[Rule]", "r"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.764675997763113*^9, 3.764676059316554*^9}},
 CellLabel->
  "In[248]:=",ExpressionUUID->"22efbb1d-9790-485f-a266-54b2a206459e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"s", "=", 
   RowBox[{
    RowBox[{"Dimensions", "[", "mldata", "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"training", "=", 
   RowBox[{"mldata", "[", 
    RowBox[{"[", 
     RowBox[{"1", ";;", 
      RowBox[{"Ceiling", "[", 
       RowBox[{"0.7", "*", "s"}], "]"}]}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"validation", "=", 
   RowBox[{"mldata", "[", 
    RowBox[{"[", 
     RowBox[{
      RowBox[{"Ceiling", "[", 
       RowBox[{"0.7", "*", "s"}], "]"}], ";;", "s"}], "]"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.764676129545925*^9, 3.764676153388523*^9}},
 CellLabel->
  "In[250]:=",ExpressionUUID->"01653eeb-6b8c-4577-972e-5457ed284b3a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Auto classifier choice", "Subsubsection",
 CellChangeTimes->{{3.764676306006706*^9, 
  3.764676313809597*^9}},ExpressionUUID->"726b52e2-7ebb-4c2a-9fdc-\
104b077f0a65"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cThermo0", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"training", ",", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.764676162363208*^9, 3.764676163565336*^9}, {
  3.7646762405868387`*^9, 3.764676272697421*^9}},
 CellLabel->
  "In[253]:=",ExpressionUUID->"e68fefea-33bc-4088-9a02-5a9e05af3da4"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"r1\"", "\"r2\"", "\"r3\"", "\"r5\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"r1\"", "\"r2\"", "\"r3\"", "\"r5\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["6433", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 6433, "ClassNumber" -> 4, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical"], "f2" -> 
           Association["Type" -> "Numerical"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 2]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical", "Numerical"}, 
                "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> Automatic, 
                "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
         Association[
          "(f1f2)" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 2]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Version" -> {11.3, 0}, "ID" -> 5999172908886121309]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 6433, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {536.2599098398881, 5.532117796154375}, "Method" -> 
                   "Naive", "VectorLength" -> 2, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {536.2599098398881, 5.532117796154375}, 
                   "StandardDeviation" -> {418.52899360450834`, 
                    1.4147743899911247`}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 2, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                   True, "Invertibility" -> "Perfect", "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["LogTransformNumericalVector", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Indices" -> {2}, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                "Padder" -> MachineLearning`MLProcessor["Identity"], 
                "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                "Model" -> 
                Association[
                 "Matrix" -> {{-0.7071067811864277, -0.7071067811866675}, {
                   0.7071067811866675, -0.7071067811864277}}, "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {536.2599098398881, 5.532117796154375}, 
                    "StandardDeviation" -> {418.52899360450834`, 
                    1.4147743899911247`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 2, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.009358, "MaxTrainingMemory" -> 367832, 
                  "DataMemory" -> 103080, "FunctionMemory" -> 24312, 
                  "LanguageVersion" -> {11.3, 0}, "Date" -> 
                  DateObject[{
                    2019, 4, 19, 11, 50, 7.827074`7.646174427067722}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 2, "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Type" -> "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
             3183744061192450103]], 
           MachineLearning`MLProcessor["LogTransformNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Indices" -> {2}, "Version" -> {11.3, 0}, "ID" -> 
             8662679617415285566, "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]]]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Mean" -> {536.2599098398881, 5.532117796154375}, 
             "StandardDeviation" -> {418.52899360450834`, 
              1.4147743899911247`}, "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Version" -> {11.3, 0}, "ID" -> 2821404797631399570]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 6575292539387000017]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association["r1" -> 1, "r2" -> 2, "r3" -> 3, "r5" -> 4]}, 
             "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
             7125443539825747892, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 987800726533092851]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 4], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[
       "r1" -> 0.3647661954326549, "r2" -> 0.3798353270156905, "r3" -> 
        0.12443684946403603`, "r5" -> 0.13096162808761844`]], "Prior" -> 
    Automatic, "Utility" -> 
    SparseArray[
     Automatic, {4, 5}, 0., {
      1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    "Quality", "BatchProcessing" -> Automatic, "Model" -> 
    Association["LogProbabilitiesFunction" -> LinearLayer[
        Association[
        "Type" -> "Linear", "Arrays" -> 
         Association[
          "Weights" -> 
           RawArray["Real32",{{-384.5337829589844, 
             55.03048324584961}, {-112.19454956054688`, 
             1.0478700399398804`}, {-226.03048706054688`, 53.03271484375}}], 
           "Biases" -> 
           RawArray["Real32",{-33.11286163330078, 74.27030944824219, 
             36.863407135009766`}]], "Parameters" -> 
         Association[
          "OutputDimensions" -> {3}, "$OutputSize" -> 3, "$InputSize" -> 2, 
           "$InputDimensions" -> {2}], "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
        Association["Version" -> "11.3.5"]], "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Weight" -> 2, "Type" -> "NumericalVector"], 
         "Key" -> "(f1f2)", "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Method" -> "LogisticRegression", "Options" -> 
      Association[
       "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 1.*^-6, "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association["Value" -> "LBFGS", "Options" -> Association[]], 
        MaxIterations -> 
        Association["Value" -> 30, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.01628906883420366, 0.003307094402126371], "Accuracy" -> 
         PlusMinus[0.9954056422677338, 0.001639707632832321], 
         "EvaluationTime" -> 2.124320124320124*^-6, "TestSize" -> 2574, 
         "TrainingSize" -> 5146, "TrainingTime" -> 0.1393273333333333, 
         "TrainingMemory" -> 1.2538826666666665`*^6, "ModelMemory" -> 8824., 
         "ExperimentCount" -> 2, "ModelUtility" -> 1503.3582655236287`, 
         "MeanCrossEntropyHistory" -> {
           PlusMinus[0.02024022202395721, 0.005413635264555691], 
           PlusMinus[0.015441022649935075`, 0.0025080535830551867`]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.9948954201793531, 0.002306953823493742], 
           PlusMinus[0.9958452242541955, 0.0021413083833234344`]}, 
         "Configuration" -> {
          "LogisticRegression", "L1Regularization" -> 0, "L2Regularization" -> 
           1.*^-6, "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
         "FinalTrainingSize" -> 6433], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 239697996962682]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.0001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.41022204542300716`, 3.512567064353572], "Accuracy" -> 
              PlusMinus[0.775483796610153, 0.05142195163135836], 
              "EvaluationTime" -> 3.903875*^-6, "TestSize" -> 2900, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.019021000000000003`, 
              "TrainingMemory" -> 70274., "ModelMemory" -> 8824., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.3488534572206053, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[11.738754305654423`, 1.0576761199886244`], 
                PlusMinus[9.857049014911, 0.7671032384134716], 
                PlusMinus[0.38734505838060684`, 0.02956039540302601]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7894587814401207, 0.014530992367821564`], 
                PlusMinus[0.6629537146996425, 0.014958483006127711`], 
                PlusMinus[0.8323305724872052, 0.011408987613986928`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.09017499883396056, 0.015303190868395463`], 
              "Accuracy" -> 
              PlusMinus[0.9531931488181176, 0.012103111559353251`], 
              "EvaluationTime" -> 4.2285714285714285`*^-6, "TestSize" -> 700, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.021522, 
              "TrainingMemory" -> 73360, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 49.68931403360152, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.09017499883396056, 0.010820990036834482`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9531931488181176, 0.008558192257075973]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.04660647325756199, 0.010072935350062016`], 
              "Accuracy" -> 
              PlusMinus[0.9749503936602315, 0.008378398555295615], 
              "EvaluationTime" -> 3.341111111111111*^-6, "TestSize" -> 900, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.022404, 
              "TrainingMemory" -> 94936, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 182.71661252235907`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.04660647325756199, 0.0071226408924825405`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9749503936602315, 0.0059244224339331025`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.020742829053626313`, 0.0028684391072297515`], 
              "Accuracy" -> 
              PlusMinus[0.9908684073382998, 0.002798566125750477], 
              "EvaluationTime" -> 2.7924242424242426`*^-6, "TestSize" -> 3300,
               "TrainingSize" -> 1000, "TrainingTime" -> 0.04166, 
              "TrainingMemory" -> 257112, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 950.592540671026, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.020742829053626313`, 0.0020282927441428434`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9908684073382998, 0.0019788850851171266`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.020677527014820615`, 0.007469848786776846], 
              "Accuracy" -> 
              PlusMinus[0.9948954201793531, 0.0032625253849533175`], 
              "EvaluationTime" -> 1.6340326340326342`*^-6, "TestSize" -> 1287,
               "TrainingSize" -> 5146, "TrainingTime" -> 0.115083, 
              "TrainingMemory" -> 1251384, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 878.692382627991, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.020677527014820615`, 0.005281980731568012]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9948954201793531, 0.002306953823493742]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1.6340326340326342`*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.020677527014820615`, 0.007469848786776846], 
             "ModelMemory" -> 8824, "TrainingMemory" -> 1251384, 
             "TrainingTime" -> 0.16288593179168287`], "Index" -> 1], 
         Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0275759619356337`, 0.06195156160788645], "Accuracy" -> 
              PlusMinus[0.6114340643697601, 0.042051406087689834`], 
              "EvaluationTime" -> 4.5306249999999995`*^-6, "TestSize" -> 1400,
               "TrainingSize" -> 10, "TrainingTime" -> 0.0040922499999999995`,
               "TrainingMemory" -> 46680., "ModelMemory" -> 15128., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.39938182188205085`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.9166401284673689, 0.05369451959790355], 
                PlusMinus[1.0916174554570428`, 0.055819022809010174`], 
                PlusMinus[1.065121924116227, 0.04576833590648972]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6940140365842007, 0.02316755816590969], 
                PlusMinus[0.5747660270153442, 0.024764111767712562`], 
                PlusMinus[0.5732432563542688, 0.020149654089206683`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.47577988901678664`, 0.0716950700607897], "Accuracy" -> 
              PlusMinus[0.7676725524410007, 0.04257150845077362], 
              "EvaluationTime" -> 5.150000000000001*^-6, "TestSize" -> 200, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.004861, 
              "TrainingMemory" -> 47608, "ModelMemory" -> 15256, 
              "ExperimentCount" -> 1, "ModelUtility" -> 1.7981416360857327`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.47577988901678664`, 0.05069607021762902]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7676725524410007, 0.03010260231088244]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.1826336997381301, 0.03757930576401922], "Accuracy" -> 
              PlusMinus[0.9214561505808956, 0.022841587151992488`], 
              "EvaluationTime" -> 4.9033333333333335`*^-6, "TestSize" -> 300, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.0053, 
              "TrainingMemory" -> 68368, "ModelMemory" -> 17752, 
              "ExperimentCount" -> 1, "ModelUtility" -> 11.946374283809506`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.1826336997381301, 0.026572581938020704`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9214561505808956, 0.016151441168237406`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.11669358010993672`, 0.007962482432835219], 
              "Accuracy" -> 
              PlusMinus[0.9600361808984103, 0.0051888136392418405`], 
              "EvaluationTime" -> 2.725161290322581*^-6, "TestSize" -> 3100, 
              "TrainingSize" -> 1000, "TrainingTime" -> 0.006138, 
              "TrainingMemory" -> 174112, "ModelMemory" -> 22624, 
              "ExperimentCount" -> 1, "ModelUtility" -> 30.871622507429944`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.11669358010993672`, 0.005630325323336541]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9600361808984103, 0.0036690453106211535`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.12131806309996329`, 0.010935697189502738`], 
              "Accuracy" -> 
              PlusMinus[0.962574112249789, 0.007851247443119195], 
              "EvaluationTime" -> 3.278943278943279*^-6, "TestSize" -> 1287, 
              "TrainingSize" -> 5146, "TrainingTime" -> 0.015679, 
              "TrainingMemory" -> 754584, "ModelMemory" -> 27744, 
              "ExperimentCount" -> 1, "ModelUtility" -> 28.317580163193714`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.12131806309996329`, 0.0077327056397000545`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.962574112249789, 0.005551670307803125]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 3.278943278943279*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.12131806309996329`, 0.010935697189502738`], 
             "ModelMemory" -> 27744, "TrainingMemory" -> 754584, 
             "TrainingTime" -> 0.023692523416245625`], "Index" -> 2], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.9562565128928755, 0.04161787738333376], "Accuracy" -> 
              PlusMinus[0.7129397735128815, 0.019279264017105287`], 
              "EvaluationTime" -> 8.586166666666667*^-6, "TestSize" -> 1500, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.00428075, 
              "TrainingMemory" -> 63400., "ModelMemory" -> 5480., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.46424832118900894`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.9520053461126404, 0.03226936310681307], 
                PlusMinus[0.8908453047978744, 0.025186949655091], 
                PlusMinus[1.0243509403617517`, 0.025204230988849448`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7124325103435362, 0.02274812620049468], 
                PlusMinus[0.7406407942726688, 0.019745657937032684`], 
                PlusMinus[0.6876714539418335, 0.01899016672240835]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5580531939188664, 0.07608466907355416], "Accuracy" -> 
              PlusMinus[0.8245860422868198, 0.03848638107734334], 
              "EvaluationTime" -> 8.32*^-6, "TestSize" -> 200, "TrainingSize" -> 
              50, "TrainingTime" -> 0.006215, "TrainingMemory" -> 69088, 
              "ModelMemory" -> 5480, "ExperimentCount" -> 1, "ModelUtility" -> 
              1.3143417499998276`, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.5580531939188664, 0.053799985446244536`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8245860422868198, 0.0272139810431191]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.2150493190400629, 0.05714596614568825], "Accuracy" -> 
              PlusMinus[0.958026892998748, 0.017723712959775036`], 
              "EvaluationTime" -> 8.286666666666666*^-6, "TestSize" -> 300, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.007537, 
              "TrainingMemory" -> 98888, "ModelMemory" -> 5480, 
              "ExperimentCount" -> 1, "ModelUtility" -> 8.421179417309123, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.2150493190400629, 0.040408300179073035`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.958026892998748, 0.012532557621660822`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.09173361191679624, 0.006608290916867551], 
              "Accuracy" -> 
              PlusMinus[0.9802494730937665, 0.0028056268415304945`], 
              "EvaluationTime" -> 2.778943493465857*^-6, "TestSize" -> 5433, 
              "TrainingSize" -> 1000, "TrainingTime" -> 0.011564, 
              "TrainingMemory" -> 192360, "ModelMemory" -> 5992, 
              "ExperimentCount" -> 1, "ModelUtility" -> 49.88212829733948, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.09173361191679624, 0.004672767319370512]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9802494730937665, 0.0019838777651252078`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.042580818197025284`, 0.008083045090784953], 
              "Accuracy" -> 
              PlusMinus[0.9929894692408658, 0.0038124333167801174`], 
              "EvaluationTime" -> 4.808857808857809*^-6, "TestSize" -> 1287, 
              "TrainingSize" -> 5146, "TrainingTime" -> 0.03626, 
              "TrainingMemory" -> 857976, "ModelMemory" -> 6504, 
              "ExperimentCount" -> 1, "ModelUtility" -> 221.1225006283344, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.042580818197025284`, 0.005715575996330672]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9929894692408658, 0.002695797451116742]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 4.808857808857809*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.042580818197025284`, 0.008083045090784953], 
             "ModelMemory" -> 6504, "TrainingMemory" -> 857976, 
             "TrainingTime" -> 0.049609273124757096`], "Index" -> 3], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.9896202552337182, 0.20150727856731437`], "Accuracy" -> 
              PlusMinus[0.707615709712648, 0.07191891174174682], 
              "EvaluationTime" -> 9.36595238095238*^-6, "TestSize" -> 1400, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.0030897499999999996`, 
              "TrainingMemory" -> 50056., "ModelMemory" -> 6112., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.4072100540228539, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8680949470728558, 0.07240714875819092], 
                PlusMinus[1.4766404700879205`, 0.07274246430539018], 
                PlusMinus[0.8907022905863619, 0.03790148552182042]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7951092297463658, 0.02359498574853302], 
                PlusMinus[0.5579558933221208, 0.024792351079119975`], 
                PlusMinus[0.7320041538322377, 0.01680823498443094]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.3484094127864604, 0.07950720943380048], "Accuracy" -> 
              PlusMinus[0.8542905167251608, 0.05091366344541073], 
              "EvaluationTime" -> 0.00001027, "TestSize" -> 100, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.003898, 
              "TrainingMemory" -> 85408, "ModelMemory" -> 6888, 
              "ExperimentCount" -> 1, "ModelUtility" -> 3.2544880841782162`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.3484094127864604, 0.056220086943859354`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8542905167251608, 0.03600139667729956]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.17753167833247574`, 0.028434034057884843`], 
              "Accuracy" -> 
              PlusMinus[0.9107323692806796, 0.029529152791980214`], 
              "EvaluationTime" -> 0.00001101, "TestSize" -> 200, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.009418, 
              "TrainingMemory" -> 881440, "ModelMemory" -> 10664, 
              "ExperimentCount" -> 1, "ModelUtility" -> 12.867325382147907`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.17753167833247574`, 0.020105898298819615`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9107323692806796, 0.02088026418190288]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.09907040102670364, 0.005468390662798574], 
              "Accuracy" -> 
              PlusMinus[0.9759970844443536, 0.004860355193819462], 
              "EvaluationTime" -> 8.097826086956523*^-6, "TestSize" -> 2300, 
              "TrainingSize" -> 1000, "TrainingTime" -> 0.023221, 
              "TrainingMemory" -> 3428688, "ModelMemory" -> 24784, 
              "ExperimentCount" -> 1, "ModelUtility" -> 43.05292608020024, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.09907040102670364, 0.0038667361198420703`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9759970844443536, 0.0034367901165249974`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.06225433646158702, 0.005558502210637032], 
              "Accuracy" -> 
              PlusMinus[0.9933119048545447, 0.004058982292079972], 
              "EvaluationTime" -> 0.000014000777000777, "TestSize" -> 1287, 
              "TrainingSize" -> 5146, "TrainingTime" -> 0.032113, 
              "TrainingMemory" -> 3581080, "ModelMemory" -> 93728, 
              "ExperimentCount" -> 1, "ModelUtility" -> 107.57533263158857`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.06225433646158702, 0.00393045460638186]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9933119048545447, 0.0028701339034458637`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000014000777000777, "MeanCrossEntropy" -> 
             PlusMinus[0.06225433646158702, 0.005558502210637032], 
             "ModelMemory" -> 93728, "TrainingMemory" -> 3581080, 
             "TrainingTime" -> 0.04323412019043918], "Index" -> 4], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.2124375700318353`, 0.06423879942648729], "Accuracy" -> 
              PlusMinus[0.7170815339802655, 0.041659847463376753`], 
              "EvaluationTime" -> 0.0000662225, "TestSize" -> 300, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.01356125, 
              "TrainingMemory" -> 279684., "ModelMemory" -> 164184., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.2877069762847375, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.1000261767858432`, 0.03327663075758331], 
                PlusMinus[1.0588212826282848`, 0.034442576010502705`], 
                PlusMinus[1.2649030938560273`, 0.015070347391562003`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6661717048439721, 0.04740308811963848], 
                PlusMinus[0.7750825959330814, 0.04221271635758949], 
                PlusMinus[0.6958746751410019, 0.04629784814569237]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5910412927096435, 0.10281826732294576`], "Accuracy" -> 
              PlusMinus[0.8740924969231806, 0.04806735992053685], 
              "EvaluationTime" -> 0.00006961, "TestSize" -> 100, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.014113, 
              "TrainingMemory" -> 300520, "ModelMemory" -> 166400, 
              "ExperimentCount" -> 1, "ModelUtility" -> 1.1547363905223853`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.5910412927096435, 0.07270349405390615]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8740924969231806, 0.033988756153546074`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.2695565124973262, 0.09458400235559021], "Accuracy" -> 
              PlusMinus[0.9136964573192202, 0.041236181821619526`], 
              "EvaluationTime" -> 0.00010343, "TestSize" -> 100, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.078991, 
              "TrainingMemory" -> 377880, "ModelMemory" -> 170832, 
              "ExperimentCount" -> 1, "ModelUtility" -> 5.190551139720565, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.2695565124973262, 0.06688098945740222]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9136964573192202, 0.029158383796308605`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.05212570116342062, 0.0095618235556922], "Accuracy" -> 
              PlusMinus[0.9824623342365758, 0.011082890341558045`], 
              "EvaluationTime" -> 0.0000751875, "TestSize" -> 400, 
              "TrainingSize" -> 1000, "TrainingTime" -> 0.022977, 
              "TrainingMemory" -> 436840, "ModelMemory" -> 183472, 
              "ExperimentCount" -> 1, "ModelUtility" -> 147.91935879217706`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.05212570116342062, 0.006761230276739219]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9824623342365758, 0.007836786915662586]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.029394898226630082`, 0.0047089791563973025`], 
              "Accuracy" -> 
              PlusMinus[0.9892363063744388, 0.0050978768822199485`], 
              "EvaluationTime" -> 0.00005472285714285714, "TestSize" -> 700, 
              "TrainingSize" -> 5146, "TrainingTime" -> 0.045958, 
              "TrainingMemory" -> 1010408, "ModelMemory" -> 217200, 
              "ExperimentCount" -> 1, "ModelUtility" -> 469.340119716775, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.029394898226630082`, 0.0047089791563973025`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9892363063744388, 0.0050978768822199485`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00005472285714285714, "MeanCrossEntropy" -> 
             PlusMinus[0.029394898226630082`, 0.0047089791563973025`], 
             "ModelMemory" -> 217200, "TrainingMemory" -> 1010408, 
             "TrainingTime" -> 0.07101321541002721], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.385454882709607, 0.0015329653242391545`], 
              "Accuracy" -> 
              PlusMinus[0.4341743714198303, 0.08981220335005585], 
              "EvaluationTime" -> 3.880701754385964*^-6, "TestSize" -> 3400, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.00692925, 
              "TrainingMemory" -> 62336., "ModelMemory" -> 8824., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.22493131315196307`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.385037799230007, 0.004453524860251647], 
                PlusMinus[1.3856274036084484`, 0.0018058287793282781`], 
                PlusMinus[1.385033414980806, 0.0036362680926019424`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6384706944041955, 0.019623003311045897`], 
                PlusMinus[0.4148472810692614, 0.011277854213806502`], 
                PlusMinus[0.34099590207211317`, 0.01568800639733292]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.3849205836280132`, 0.006898366644477906], 
              "Accuracy" -> PlusMinus[0.7093604453592971, 0.0287736564912192],
               "EvaluationTime" -> 4.428*^-6, "TestSize" -> 500, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.007816, 
              "TrainingMemory" -> 65272, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.22475650932614866`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.3849205836280132`, 0.004877881833421417]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7093604453592971, 0.020346047624473416`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.38494552017692, 0.0018687373100706704`], "Accuracy" -> 
              PlusMinus[0.8051408355972031, 0.00950856555234741], 
              "EvaluationTime" -> 4.992571428571429*^-6, "TestSize" -> 3500, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.008031, 
              "TrainingMemory" -> 87608, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.22507493659090505`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.38494552017692, 0.0013213968242072789`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8051408355972031, 0.006723571181421663]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.3830714494002845`, 0.0010779483048646336`], 
              "Accuracy" -> 
              PlusMinus[0.8227481490855971, 0.0073460707206050605`], 
              "EvaluationTime" -> 1.981225842076201*^-6, "TestSize" -> 5433, 
              "TrainingSize" -> 1000, "TrainingTime" -> 0.013015, 
              "TrainingMemory" -> 257048, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.2257367517720928, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.3830714494002845`, 0.0007622245561383262]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8227481490855971, 0.005194456421615786]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.3710557444922982`, 0.002138914896123978], 
              "Accuracy" -> 
              PlusMinus[0.7269835453251401, 0.017587852596423478`], 
              "EvaluationTime" -> 1.6029526029526026`*^-6, "TestSize" -> 1287,
               "TrainingSize" -> 5146, "TrainingTime" -> 0.02836, 
              "TrainingMemory" -> 1251576, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.2296390257198577, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.3710557444922982`, 0.0015124412274301847`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7269835453251401, 0.012436489837440466`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1.6029526029526026`*^-6, "MeanCrossEntropy" -> 
             PlusMinus[1.3710557444922982`, 0.002138914896123978], 
             "ModelMemory" -> 8824, "TrainingMemory" -> 1251576, 
             "TrainingTime" -> 0.04238200553828216], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0137231412591237`, 0.04859599132407378], "Accuracy" -> 
              PlusMinus[0.5988654609404324, 0.07338414994482384], 
              "EvaluationTime" -> 5.749642857142857*^-6, "TestSize" -> 2100, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.023100000000000002`, 
              "TrainingMemory" -> 70050., "ModelMemory" -> 8824., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.412382404046499, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.1527205469684638`, 0.04158961092040211], 
                PlusMinus[1.0763529913897516`, 0.024647828066512844`], 
                PlusMinus[0.988331911718527, 0.01176471850540709]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.72808169784625, 0.016904118973722224`], 
                PlusMinus[0.48366309721639317`, 0.018848554585587592`], 
                PlusMinus[0.5540986060329111, 0.018706289362028422`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5346198542653252, 0.021937134039216818`], 
              "Accuracy" -> PlusMinus[0.823708481491672, 0.02063322545585776],
               "EvaluationTime" -> 3.454285714285714*^-6, "TestSize" -> 700, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.017539, 
              "TrainingMemory" -> 73472, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 1.4867488894447365`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.5346198542653252, 0.015511896238928449`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.823708481491672, 0.014589893637587914`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.34113754293948334`, 0.019086196574851607`], 
              "Accuracy" -> 
              PlusMinus[0.8764566201963025, 0.017985519532246492`], 
              "EvaluationTime" -> 4.345714285714286*^-6, "TestSize" -> 700, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.026003, 
              "TrainingMemory" -> 94912, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 3.6299659037429346`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.34113754293948334`, 0.013495979025137026`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8764566201963025, 0.012717682824414597`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.21355136400403407`, 0.005426296493829688], 
              "Accuracy" -> 
              PlusMinus[0.9428828196910006, 0.0045255994486535795`], 
              "EvaluationTime" -> 1.9416528621387816`*^-6, "TestSize" -> 5433,
               "TrainingSize" -> 1000, "TrainingTime" -> 0.049838, 
              "TrainingMemory" -> 257112, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 9.376035270249128, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.21355136400403407`, 0.003836971047515759]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9428828196910006, 0.0032000820590770466`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.12873907240934532`, 0.008158202148104384], 
              "Accuracy" -> 
              PlusMinus[0.9783100497293518, 0.006044464243439847], 
              "EvaluationTime" -> 2.1748251748251752`*^-6, "TestSize" -> 1287,
               "TrainingSize" -> 5146, "TrainingTime" -> 0.151937, 
              "TrainingMemory" -> 1251624, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 25.41363608147759, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.12873907240934532`, 0.005768720061215269]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9783100497293518, 0.00427408165517593]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 2.1748251748251752`*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.12873907240934532`, 0.008158202148104384], 
             "ModelMemory" -> 8824, "TrainingMemory" -> 1251624, 
             "TrainingTime" -> 0.21303601263116984`], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^-6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.675679862546739, 7.073968061250346], "Accuracy" -> 
              PlusMinus[0.7406585341902556, 0.055978762619634276`], 
              "EvaluationTime" -> 4.024557226399332*^-6, "TestSize" -> 3500, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.021764000000000002`, 
              "TrainingMemory" -> 70338., "ModelMemory" -> 8824., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.09884109851369056, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[21.605540575581305`, 2.0752476397569533`], 
                PlusMinus[22.046924165755737`, 1.1969063335452814`], 
                PlusMinus[0.6084892412012722, 0.05828606937659227]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7900817488072764, 0.015509440169889201`], 
                PlusMinus[0.6479244578536848, 0.010958397423087374`], 
                PlusMinus[0.8311017352844918, 0.012632449626835528`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.18741818581167027`, 0.05429934726197771], 
              "Accuracy" -> 
              PlusMinus[0.948722356273465, 0.011755631127033251`], 
              "EvaluationTime" -> 4.1100000000000005`*^-6, "TestSize" -> 800, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.021185, 
              "TrainingMemory" -> 73440, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 10.9869610480219, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.18741818581167027`, 0.038395436662947625`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.948722356273465, 0.008312486487052868]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.03986088218407762, 0.014189990736382954`], 
              "Accuracy" -> 
              PlusMinus[0.9694799385576971, 0.008547935169492659], 
              "EvaluationTime" -> 3.4*^-6, "TestSize" -> 1000, "TrainingSize" -> 
              250, "TrainingTime" -> 0.022176, "TrainingMemory" -> 95016, 
              "ModelMemory" -> 8824, "ExperimentCount" -> 1, "ModelUtility" -> 
              236.91573870060978`, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.03986088218407762, 0.010033838674670677`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9694799385576971, 0.006044302923491239]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.018281353002759456`, 0.0029957978291365274`], 
              "Accuracy" -> 
              PlusMinus[0.9892178555615082, 0.002802870642917517], 
              "EvaluationTime" -> 2.11*^-6, "TestSize" -> 3700, 
              "TrainingSize" -> 1000, "TrainingTime" -> 0.045982, 
              "TrainingMemory" -> 257176, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 1211.7117694565984`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.018281353002759456`, 0.0021183489600463765`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9892178555615082, 0.001981928838395674]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.01628906883420366, 0.003307094402126371], 
              "Accuracy" -> 
              PlusMinus[0.9954056422677338, 0.001639707632832321], 
              "EvaluationTime" -> 2.124320124320124*^-6, "TestSize" -> 2574, 
              "TrainingSize" -> 5146, "TrainingTime" -> 0.1393273333333333, 
              "TrainingMemory" -> 1.2538826666666665`*^6, "ModelMemory" -> 
              8824., "ExperimentCount" -> 2, "ModelUtility" -> 
              1503.3582655236287`, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.02024022202395721, 0.005413635264555691], 
                PlusMinus[0.015441022649935075`, 0.0025080535830551867`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9948954201793531, 0.002306953823493742], 
                PlusMinus[0.9958452242541955, 0.0021413083833234344`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 2.124320124320124*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.01628906883420366, 0.003307094402126371], 
             "ModelMemory" -> 8824., "TrainingMemory" -> 
             1.2538826666666665`*^6, "TrainingTime" -> 0.19593670410674954`], 
           "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.364047352523355, 0.003220735148836995], "Accuracy" -> 
              PlusMinus[0.4523405431625994, 0.09698500190513712], 
              "EvaluationTime" -> 4.259527777777777*^-6, "TestSize" -> 2600, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.010060999999999999`, 
              "TrainingMemory" -> 64436., "ModelMemory" -> 8824., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.2319305261506659, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.368256718765819, 0.004080032717283601], 
                PlusMinus[1.360045547165718, 0.0035449923252138084`], 
                PlusMinus[1.3649364095244507`, 0.003682158467353197]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6587850823196979, 0.017897465499256773`], 
                PlusMinus[0.40269634742926125`, 0.015419935190520397`], 
                PlusMinus[0.3445228604342846, 0.01573064883969228]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.276545948755979, 0.006411349529251277], "Accuracy" -> 
              PlusMinus[0.7024832125872359, 0.024512767487386032`], 
              "EvaluationTime" -> 4.051428571428571*^-6, "TestSize" -> 700, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.013077, 
              "TrainingMemory" -> 69088, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.2645342668471926, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.276545948755979, 0.0045335087286907565`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7024832125872359, 0.01733314411597979]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.05111441538125, 0.005334209584209395], "Accuracy" -> 
              PlusMinus[0.8233730936655865, 0.008916659445767373], 
              "EvaluationTime" -> 2.4062162162162165`*^-6, "TestSize" -> 3700,
               "TrainingSize" -> 250, "TrainingTime" -> 0.017071, 
              "TrainingMemory" -> 102424, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.39016271448247425`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.05111441538125, 0.003771855769264737]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8233730936655865, 0.006305030359633192]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7849902313392376, 0.007046545128592394], "Accuracy" -> 
              PlusMinus[0.8337830133659839, 0.0071588437579452715`], 
              "EvaluationTime" -> 1.2578685808945333`*^-6, "TestSize" -> 5433,
               "TrainingSize" -> 1000, "TrainingTime" -> 0.033966, 
              "TrainingMemory" -> 257112, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6984581436530792, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7849902313392376, 0.004982659844364714]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8337830133659839, 0.005062066966698088]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5319211424391418, 0.016287365908248756`], 
              "Accuracy" -> 
              PlusMinus[0.8357041658876713, 0.014684326131490271`], 
              "EvaluationTime" -> 1.5990675990675991`*^-6, "TestSize" -> 1287,
               "TrainingSize" -> 5146, "TrainingTime" -> 0.109891, 
              "TrainingMemory" -> 1251688, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 1.5080973735114012`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.5319211424391418, 0.011516906881389285`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8357041658876713, 0.010383386584731593`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1.5990675990675991`*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.5319211424391418, 0.016287365908248756`], 
             "ModelMemory" -> 8824, "TrainingMemory" -> 1251688, 
             "TrainingTime" -> 0.14743542732219198`], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.2519570834087985`, 0.011058529116340995`], 
              "Accuracy" -> 
              PlusMinus[0.5013422729548078, 0.09162010838022339], 
              "EvaluationTime" -> 5.734330357142857*^-6, "TestSize" -> 2000, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.01293425, 
              "TrainingMemory" -> 67548., "ModelMemory" -> 8824., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.27460908913901494`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.2623819714965205`, 0.0063699907591150545`], 
                PlusMinus[1.2284638527289866`, 0.009327012379876258], 
                PlusMinus[1.2529323180357226`, 0.00861476873484705]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6723148532722366, 0.01775053094000785], 
                PlusMinus[0.40902614329241965`, 0.01727779433183385], 
                PlusMinus[0.39062118495391035`, 0.021780989846495413`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.9413496598667809, 0.01606731729071911], "Accuracy" -> 
              PlusMinus[0.7332507248265541, 0.025660852402411238`], 
              "EvaluationTime" -> 4.391666666666667*^-6, "TestSize" -> 600, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.01766, 
              "TrainingMemory" -> 73232, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.48413325293608567`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.9413496598667809, 0.011361309011743348`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7332507248265541, 0.018144962744772095`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6277748263930601, 0.00915121307630689], "Accuracy" -> 
              PlusMinus[0.838978445760268, 0.008168491547066163], 
              "EvaluationTime" -> 2.2763414634146344`*^-6, "TestSize" -> 4100,
               "TrainingSize" -> 250, "TrainingTime" -> 0.021368, 
              "TrainingMemory" -> 95048, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 1.08965861067016, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6277748263930601, 0.0064708848223396075`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.838978445760268, 0.005775995764995477]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.42734405127845704`, 0.0076130966043180025`], 
              "Accuracy" -> 
              PlusMinus[0.8524619365126909, 0.006834094738471107], 
              "EvaluationTime" -> 1.959138597459967*^-6, "TestSize" -> 5433, 
              "TrainingSize" -> 1000, "TrainingTime" -> 0.049675, 
              "TrainingMemory" -> 257048, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 2.3484552786293484`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.42734405127845704`, 0.0053832722347415375`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8524619365126909, 0.004832434732844225]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.2716149932945454, 0.012333911086464415`], 
              "Accuracy" -> 
              PlusMinus[0.934269580567183, 0.009941776899401025], 
              "EvaluationTime" -> 2.0885780885780885`*^-6, "TestSize" -> 1287,
               "TrainingSize" -> 5146, "TrainingTime" -> 0.196082, 
              "TrainingMemory" -> 1251576, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 5.749983109570474, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.2716149932945454, 0.008721392167790925]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.934269580567183, 0.007029897862610233]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 2.0885780885780885`*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.2716149932945454, 0.012333911086464415`], 
             "ModelMemory" -> 8824, "TrainingMemory" -> 1251576, 
             "TrainingTime" -> 0.2580558018849592], "Index" -> 10], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 60], "LearningRate" -> 
             Association["Value" -> 0.04], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 4], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 15], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6126918278008991, 0.06303393596991604], "Accuracy" -> 
              PlusMinus[0.7750825959330814, 0.05969779597751166], 
              "EvaluationTime" -> 0.00012947, "TestSize" -> 100, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.076404, 
              "TrainingMemory" -> 1420880, "ModelMemory" -> 377112, 
              "ExperimentCount" -> 1, "ModelUtility" -> 1.1047071377590498`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6126918278008991, 0.044571723569206266`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7750825959330814, 0.04221271635758949]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.2648117837490078, 0.044770948443322994`], 
              "Accuracy" -> 
              PlusMinus[0.956331465768601, 0.021909986424587358`], 
              "EvaluationTime" -> 0.00013075, "TestSize" -> 200, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.196017, 
              "TrainingMemory" -> 2121080, "ModelMemory" -> 405832, 
              "ExperimentCount" -> 1, "ModelUtility" -> 5.763187998523872, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.2648117837490078, 0.03165784124442699]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.956331465768601, 0.015492699976530917`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.385054812618793, 0.002816716071768008], "Accuracy" -> 
              PlusMinus[0.1322273141922723, 0.011726385726723814`], 
              "EvaluationTime" -> 8.2665*^-6, "TestSize" -> 1500, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.009884, 
              "TrainingMemory" -> 61920., "ModelMemory" -> 20240., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.2249777695519398, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.385054812618793, 0.0048786953467980145`], 
                PlusMinus[1.385054812618793, 0.0048786953467980145`], 
                PlusMinus[1.385054812618793, 0.0048786953467980145`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.14314515935118607`, 0.015521111770101768`], 
                PlusMinus[0.13858585241801832`, 0.015302895214658578`], 
                PlusMinus[0.11747664887153136`, 0.014266541528951831`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.20721114867643708`, 0.015756338469823866`], 
              "Accuracy" -> 
              PlusMinus[0.9731023979132799, 0.012931350236123754`], 
              "EvaluationTime" -> 0.000166145, "TestSize" -> 200, 
              "TrainingSize" -> 1000, "TrainingTime" -> 0.315492, 
              "TrainingMemory" -> 2931944, "ModelMemory" -> 429720, 
              "ExperimentCount" -> 1, "ModelUtility" -> 9.7607929238802, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.20721114867643708`, 0.015756338469823866`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9731023979132799, 0.012931350236123754`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.17956306167257052`, 0.008842944562665394], 
              "Accuracy" -> 
              PlusMinus[0.9786215483751459, 0.009700595782620083], 
              "EvaluationTime" -> 0.00017182333333333333`, "TestSize" -> 300, 
              "TrainingSize" -> 5146, "TrainingTime" -> 0.439508, 
              "TrainingMemory" -> 4636784, "ModelMemory" -> 474376, 
              "ExperimentCount" -> 1, "ModelUtility" -> 13.13631622016751, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.17956306167257052`, 0.008842944562665394]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9786215483751459, 0.009700595782620083]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00017182333333333333`, "MeanCrossEntropy" -> 
             PlusMinus[0.17956306167257052`, 0.008842944562665394], 
             "ModelMemory" -> 474376, "TrainingMemory" -> 4636784, 
             "TrainingTime" -> 0.6258317038476486], "Index" -> 11], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[3.0614086177632895`, 0.39050779253631734`], 
              "Accuracy" -> 
              PlusMinus[0.7063623780198118, 0.06364636492421402], 
              "EvaluationTime" -> 3.742666666666667*^-6, "TestSize" -> 3300, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.040334666666666665`, 
              "TrainingMemory" -> 92677.33333333333, "ModelMemory" -> 8824., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.04382310002127776, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[3.6569563053863097`, 0.2861777653315563], 
                PlusMinus[2.917807308089182, 0.14052604292435333`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7867029184019546, 0.013065199217063754`], 
                PlusMinus[0.6603900890082892, 0.009883180476572195]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.14771315886085562`, 0.005113678397758486], 
              "Accuracy" -> 
              PlusMinus[0.9554145299813396, 0.0037349715813589095`], 
              "EvaluationTime" -> 1.5550681497728343`*^-6, "TestSize" -> 6383,
               "TrainingSize" -> 50, "TrainingTime" -> 0.02528, 
              "TrainingMemory" -> 73576, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 19.525191751931924`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.14771315886085562`, 0.003615916671862184]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9554145299813396, 0.0026410237327179277`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.07967978022422684, 0.004133916958729954], 
              "Accuracy" -> 
              PlusMinus[0.983019095036725, 0.0032331643308833985`], 
              "EvaluationTime" -> 2.3756410256410255`*^-6, "TestSize" -> 3900,
               "TrainingSize" -> 250, "TrainingTime" -> 0.027743, 
              "TrainingMemory" -> 94808, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 66.64449908856687, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.07967978022422684, 0.0029231207143800195`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.983019095036725, 0.0022861924230581174`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.0522734566760163, 0.002876184019628389], "Accuracy" -> 
              PlusMinus[0.9931249045088397, 0.0018035955410533621`], 
              "EvaluationTime" -> 1.713602061476164*^-6, "TestSize" -> 5433, 
              "TrainingSize" -> 1000, "TrainingTime" -> 0.095425, 
              "TrainingMemory" -> 257176, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 154.6530098901106, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.0522734566760163, 0.002033769224219616]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9931249045088397, 0.0012753346375966525`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.033716424464932955`, 0.00565461631616142], 
              "Accuracy" -> 
              PlusMinus[0.9949185489310793, 0.0032462355552018564`], 
              "EvaluationTime" -> 2.098679098679099*^-6, "TestSize" -> 1287, 
              "TrainingSize" -> 5146, "TrainingTime" -> 0.114703, 
              "TrainingMemory" -> 1251576, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 355.70291879482045`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.033716424464932955`, 0.003998417542165835]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9949185489310793, 0.0022954351744121095`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 2.098679098679099*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.033716424464932955`, 0.00565461631616142], 
             "ModelMemory" -> 8824, "TrainingMemory" -> 1251576, 
             "TrainingTime" -> 0.18372456153646843`], "Index" -> 12], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.3725671786607354`, 0.0009934960415870788], 
              "Accuracy" -> 
              PlusMinus[0.7261091500855792, 0.007905235881014471], 
              "EvaluationTime" -> 1.7159642801190661`*^-6, "TestSize" -> 6383,
               "TrainingSize" -> 50, "TrainingTime" -> 0.009038, 
              "TrainingMemory" -> 66832, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.22921019779326546`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.3725671786607354`, 0.0007025077880882157]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7261091500855792, 0.005589845898344544]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.3218638206967286`, 0.0020574741522502117`], 
              "Accuracy" -> 
              PlusMinus[0.807822555003583, 0.009203098364407577], 
              "EvaluationTime" -> 2.475945945945946*^-6, "TestSize" -> 3700, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.031617, 
              "TrainingMemory" -> 102992, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.24704900310436465`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.3218638206967286`, 0.0014548539251721677`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.807822555003583, 0.006507573261399421]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.1882519829886935`, 0.0029636138677551463`], 
              "Accuracy" -> 
              PlusMinus[0.828028023465796, 0.0072637781127346465`], 
              "EvaluationTime" -> 2.00754647524388*^-6, "TestSize" -> 5433, 
              "TrainingSize" -> 1000, "TrainingTime" -> 0.023882, 
              "TrainingMemory" -> 257048, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.3056163825200093, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.1882519829886935`, 0.002095591462708156]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.828028023465796, 0.00513626676054909]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.9165197457815709, 0.013390274448252606`], 
              "Accuracy" -> 
              PlusMinus[0.8063483771212557, 0.01563993218557926], 
              "EvaluationTime" -> 1.6293706293706293`*^-6, "TestSize" -> 1287,
               "TrainingSize" -> 5146, "TrainingTime" -> 0.063986, 
              "TrainingMemory" -> 1251384, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5112212925529758, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.9165197457815709, 0.009468353864308374]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8063483771212557, 0.011059102105720834`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1.6293706293706293`*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.9165197457815709, 0.013390274448252606`], 
             "ModelMemory" -> 8824, "TrainingMemory" -> 1251384, 
             "TrainingTime" -> 0.08902671706179557], "Index" -> 13], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.1], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.2784654207547418, 0.006537123493124136], "Accuracy" -> 
              PlusMinus[0.9068441027421862, 0.005189245119466232], 
              "EvaluationTime" -> 1.5647814507284975`*^-6, "TestSize" -> 6383,
               "TrainingSize" -> 50, "TrainingTime" -> 0.021301, 
              "TrainingMemory" -> 73168, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 5.518432915014884, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.2784654207547418, 0.004622444351441967]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9068441027421862, 0.0036693504132137684`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.16625697304173964`, 0.004535932277434431], 
              "Accuracy" -> 
              PlusMinus[0.9588552760303718, 0.003658121899985522], 
              "EvaluationTime" -> 1.5877405790069545`*^-6, "TestSize" -> 6183,
               "TrainingSize" -> 250, "TrainingTime" -> 0.024285, 
              "TrainingMemory" -> 94824, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 15.457546055052692`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.16625697304173964`, 0.0032073884723768263`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9588552760303718, 0.00258668280188678]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.10240263521016923`, 0.0036960192591377044`], 
              "Accuracy" -> 
              PlusMinus[0.983902635728364, 0.002564423015225731], 
              "EvaluationTime" -> 1.9917172832689122`*^-6, "TestSize" -> 5433,
               "TrainingSize" -> 1000, "TrainingTime" -> 0.045607, 
              "TrainingMemory" -> 257288, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 40.60290859471583, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.10240263521016923`, 0.00261348028153235]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.983902635728364, 0.0018133209038969673`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.061282159928408256`, 0.005967790121964582], 
              "Accuracy" -> 
              PlusMinus[0.9946356211504955, 0.003342782507828458], 
              "EvaluationTime" -> 2.2315462315462315`*^-6, "TestSize" -> 1287,
               "TrainingSize" -> 5146, "TrainingTime" -> 0.205007, 
              "TrainingMemory" -> 1253336, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 110.66349337003976`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.061282159928408256`, 0.004219864863939249]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9946356211504955, 0.0023637041793172758`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 2.2315462315462315`*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.061282159928408256`, 0.005967790121964582], 
             "ModelMemory" -> 8824, "TrainingMemory" -> 1253336, 
             "TrainingTime" -> 0.2775796690633502], "Index" -> 14], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.3855906668715796`, 0.0018701779040952323`], 
              "Accuracy" -> 
              PlusMinus[0.8054126227617695, 0.009503757293056461], 
              "EvaluationTime" -> 2.364*^-6, "TestSize" -> 3500, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.007417, 
              "TrainingMemory" -> 87320, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.22486535410453598`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.3855906668715796`, 0.0013224154780109834`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8054126227617695, 0.00672017122867133]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.3858310083880776`, 0.0007858515933646616], 
              "Accuracy" -> 
              PlusMinus[0.8228000686613693, 0.007335172875021802], 
              "EvaluationTime" -> 1.2265783176882016`*^-6, "TestSize" -> 5433,
               "TrainingSize" -> 1000, "TrainingTime" -> 0.009648, 
              "TrainingMemory" -> 257048, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.22485773676063425`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.3858310083880776`, 0.0005556809906744055]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8228000686613693, 0.005186750481103539]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.3844755924484937`, 0.0020913922668890665`], 
              "Accuracy" -> 
              PlusMinus[0.7269608285386856, 0.017588757703312623`], 
              "EvaluationTime" -> 1.5726495726495724`*^-6, "TestSize" -> 1287,
               "TrainingSize" -> 5146, "TrainingTime" -> 0.02227, 
              "TrainingMemory" -> 1251688, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.22521323077228042`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.3844755924484937`, 0.0014788376540383647`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7269608285386856, 0.01243712984465948]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1.5726495726495724`*^-6, "MeanCrossEntropy" -> 
             PlusMinus[1.3844755924484937`, 0.0020913922668890665`], 
             "ModelMemory" -> 8824, "TrainingMemory" -> 1251688, 
             "TrainingTime" -> 0.03525666381655655], "Index" -> 15], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.049965261722318785`, 0.0034867738049960497`], 
              "Accuracy" -> 
              PlusMinus[0.9806508186904974, 0.0026014440822271913`], 
              "EvaluationTime" -> 1.519650655021834*^-6, "TestSize" -> 6183, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.025705, 
              "TrainingMemory" -> 95232, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 168.28742167267777`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.049965261722318785`, 0.0024655214019763273`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9806508186904974, 0.0018394987514204614`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.029138698188001556`, 0.0025284778144568504`], 
              "Accuracy" -> 
              PlusMinus[0.9933048737435376, 0.0017876220087532102`], 
              "EvaluationTime" -> 1.601325234676974*^-6, "TestSize" -> 5433, 
              "TrainingSize" -> 1000, "TrainingTime" -> 0.043227, 
              "TrainingMemory" -> 257048, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 491.5206189574198, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.029138698188001556`, 0.00178790380868218]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9933048737435376, 0.0012640396445877126`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.02382605995660533, 0.006800288874778782], 
              "Accuracy" -> 
              PlusMinus[0.9948954201793531, 0.0032625253849533175`], 
              "EvaluationTime" -> 2.147630147630148*^-6, "TestSize" -> 1287, 
              "TrainingSize" -> 5146, "TrainingTime" -> 0.154327, 
              "TrainingMemory" -> 1251448, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 680.9330734400253, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.02382605995660533, 0.004808530377383513]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9948954201793531, 0.002306953823493742]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 2.147630147630148*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.02382605995660533, 0.006800288874778782], 
             "ModelMemory" -> 8824, "TrainingMemory" -> 1251448, 
             "TrainingTime" -> 0.2186287448503692], "Index" -> 16], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.06165508765592636, 0.008769614687194205], 
              "Accuracy" -> 
              PlusMinus[0.9776895201347929, 0.002771490177480468], 
              "EvaluationTime" -> 1.7271551027009542`*^-6, "TestSize" -> 6183,
               "TrainingSize" -> 250, "TrainingTime" -> 0.029646, 
              "TrainingMemory" -> 95064, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 107.42984119197135`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.06165508765592636, 0.006201054013708166]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9776895201347929, 0.001959739498488347]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.022146163502403372`, 0.004027659698656705], 
              "Accuracy" -> 
              PlusMinus[0.992327875998342, 0.0017909542178167533`], 
              "EvaluationTime" -> 1.2992821645499722`*^-6, "TestSize" -> 5433,
               "TrainingSize" -> 1000, "TrainingTime" -> 0.044262, 
              "TrainingMemory" -> 257288, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 819.9688279914463, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.022146163502403372`, 0.0028479854852319223`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.992327875998342, 0.0012663958722128753`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.02028654214368837, 0.00764037534622073], "Accuracy" -> 
              PlusMinus[0.9948954201793531, 0.0032625253849533175`], 
              "EvaluationTime" -> 2.0505050505050506`*^-6, "TestSize" -> 1287,
               "TrainingSize" -> 5146, "TrainingTime" -> 0.164136, 
              "TrainingMemory" -> 1251624, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 907.6777581739991, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.02028654214368837, 0.005402561218123193]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9948954201793531, 0.002306953823493742]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 2.0505050505050506`*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.02028654214368837, 0.00764037534622073], 
             "ModelMemory" -> 8824, "TrainingMemory" -> 1251624, 
             "TrainingTime" -> 0.23483194792071513`], "Index" -> 17], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.3583241736048737`, 0.0008819447041108257], 
              "Accuracy" -> 
              PlusMinus[0.8239557111225503, 0.007317151804919066], 
              "EvaluationTime" -> 1.3502668875391128`*^-6, "TestSize" -> 5433,
               "TrainingSize" -> 1000, "TrainingTime" -> 0.014921, 
              "TrainingMemory" -> 257112, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.23404924370642552`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.3583241736048737`, 0.000623629080908328]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8239557111225503, 0.005174007660229657]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.2634140284398008`, 0.004688625080753867], 
              "Accuracy" -> PlusMinus[0.7422786714724197, 0.0172640997813269],
               "EvaluationTime" -> 1.588966588966589*^-6, "TestSize" -> 1287, 
              "TrainingSize" -> 5146, "TrainingTime" -> 0.043262, 
              "TrainingMemory" -> 1251688, "ModelMemory" -> 8824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.27020355387020734`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.2634140284398008`, 0.0033153585890423835`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7422786714724197, 0.012207562026457442`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1.588966588966589*^-6, "MeanCrossEntropy" -> 
             PlusMinus[1.2634140284398008`, 0.004688625080753867], 
             "ModelMemory" -> 8824, "TrainingMemory" -> 1251688, 
             "TrainingTime" -> 0.06900270345899728], "Index" -> 18]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
             "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 18], 
        Association["ID" -> 239693701995386]], "MaxTrainingSize" -> 6433, 
      "LastReportingTime" -> 3.764663417107544`16.32830114296966*^9, 
      "PreprocessorEvaluationTime" -> 3.2236328125`2.*^-6, 
      "PreprocessorMemory" -> 48112, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 1.0240000000000005`, 
          "ElapsedTimes" -> 1.2267860000000002`, "ExperimentCounts" -> 35], 
         Association[
         "TrainingSizes" -> 50, "TimeBudgets" -> 1.28, "ElapsedTimes" -> 
          1.311809, "ExperimentCounts" -> 14], 
         Association[
         "TrainingSizes" -> 250, "TimeBudgets" -> 1.6000000000000005`, 
          "ElapsedTimes" -> 1.6835140000000002`, "ExperimentCounts" -> 17], 
         Association[
         "TrainingSizes" -> 1000, "TimeBudgets" -> 2., "ElapsedTimes" -> 
          2.0724590000000003`, "ExperimentCounts" -> 18], 
         Association[
         "TrainingSizes" -> 5146, "TimeBudgets" -> 2.5, "ElapsedTimes" -> 
          2.6017390000000002`, "ExperimentCounts" -> 19]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 5], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[239702291929978]], "ID" -> 
         239706586897274]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {330}, "ID" -> 
           8102574889493170096], "f2" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {731}, "ID" -> 
           6701357641463675607]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 9.85202, "MaxTrainingMemory" -> 6122648, "DataMemory" -> 
      1185464, "FunctionMemory" -> 385808, "LanguageVersion" -> {11.3, 0}, 
      "Date" -> DateObject[{2019, 4, 19, 11, 50, 17.632145`7.99888013318083}, 
        "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Unix", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.764676175431409*^9, 3.764676201180455*^9}, 
   3.764676248755274*^9, 3.7646762980448017`*^9, 3.7646774281701612`*^9, 
   3.764677817652369*^9},
 CellLabel->
  "Out[253]=",ExpressionUUID->"ded75cd8-c545-48af-bc26-dd15fbf9a2d7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierInformation", "[", "cThermo0", "]"}]], "Input",
 CellChangeTimes->{{3.764676472975573*^9, 3.764676480706005*^9}},
 CellLabel->
  "In[254]:=",ExpressionUUID->"82e98c4e-ac56-4204-b290-c6e19b3e42b3"],

Cell[BoxData[
 TagBox[
  StyleBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        FrameBox[
         StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold],
         FrameMargins->{{10, 5}, {-5, 5}},
         FrameStyle->None,
         StripOnInput->False],
        Alignment->{Left, Bottom},
        Background->RGBColor[0.93119, 0.93119, 0.93119],
        Frame->{{False, False}, {True, False}},
        FrameStyle->Opacity[0.1],
        ItemSize->{Automatic, 1},
        StripOnInput->False]},
      {
       ItemBox[
        TagBox[
         FrameBox[
          TagBox[GridBox[{
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Input type\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              RowBox[{"{", 
               RowBox[{"\<\"Numerical\"\>", ",", "\<\"Numerical\"\>"}], "}"}]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"Classes\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{",","\",\"","\"r1\"","\"r2\"","\"r3\"","\"r5\""},
               "RowWithSeparators"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Method\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox["\<\"LogisticRegression\"\>",
                TemplateBox[{
                  TagBox[
                   
                   DynamicModuleBox[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
                    Data`UnorderedAssociation[
                    "RowCount" -> 20, "Length" -> 3, "InitialType" -> 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], "Shape" -> 
                    TypeSystem`PackageScope`DocumentShape[
                    
                    Association[{"L1Regularization"} -> 
                    TypeSystem`PackageScope`AtomShape[34], {
                    "L2Regularization"} -> 
                    TypeSystem`PackageScope`AtomShape[60], {
                    "OptimizationMethod"} -> 
                    TypeSystem`PackageScope`AtomShape[48.00000000000001]], 1],
                     "InitialData" -> 
                    TypeSystem`PackageScope`CacheHandle[1230110886], "Type" -> 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], "HandleQ" -> True, "RowTarget" -> 
                    20, "Data" -> 
                    TypeSystem`PackageScope`CacheHandle[1230110886]], 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
                    DynamicModule[{
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
                    Style[
                    Grid[{{
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L1Regularization\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L1Regularization\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1876192786][{
                    Key["L1Regularization"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1876192786][
                    GeneralUtilities`Slice[
                    Key["L1Regularization"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["0"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1876192786][
                    GeneralUtilities`Slice[
                    Key["L1Regularization"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L2Regularization\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L2Regularization\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1876192786][{
                    Key["L2Regularization"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1876192786][
                    GeneralUtilities`Slice[
                    Key["L2Regularization"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["0.000001"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1876192786][
                    GeneralUtilities`Slice[
                    Key["L2Regularization"]]], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"OptimizationMethod\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"OptimizationMethod\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1876192786][{
                    Key["OptimizationMethod"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1876192786][
                    GeneralUtilities`Slice[
                    Key["OptimizationMethod"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation["LBFGS", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1876192786][
                    GeneralUtilities`Slice[
                    Key["OptimizationMethod"]]], "Mouse"], 
                    ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}}, 
                    BaseStyle -> {ContextMenu -> {
                    MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                    FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
                    Dividers -> All, FrameStyle -> GrayLevel[0.85], 
                    BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
                    LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
                    False, ShowAutoStyles -> False]], 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
                    TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
                    Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
                    Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
                    Module[{
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                    TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                    If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                    TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1876192786][
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                    Not[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
                    TypeSystem`SparseGrid[
                    TypeSystem`H["(data no longer present)"]], 
                    If[GeneralUtilities`$DebugMode, 
                    
                    Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    "  ", 
                    TypeSystem`NestedGrid`PackagePrivate`formatState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
                    DynamicModuleValues :> {}], 
                    TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
                    TypeSystem`PackageScope`Pathbar[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1876192786]]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
                    Dynamic[
                    Replace[
                    MouseAnnotation[Null], {
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1876192786][Null] -> "", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1876192786][
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                    Blank[]]] :> (
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
                    TypeSystem`NestedGrid`PackagePrivate`path; 
                    TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
                    TypeSystem`NestedGrid`PackagePrivate`path, 
                    TypeSystem`NestedGrid`PackagePrivate`makePathElements]), 
                    Null :> Spacer[10], Blank[] :> Spacer[10]}], 
                    TrackedSymbols :> {}], FrameStyle -> None, ImageMargins -> 
                    0, FrameMargins -> 0, Alignment -> Top, 
                    ImageSize -> {Automatic, 14}]}, 
                    DynamicBox[
                    ToBoxes[
                    Column[
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], 
                    Spacings -> 
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
                    0, {{}, {0, 0.05, 0}}]], StandardForm], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
                    Initialization :> Block[{$ContextPath = $ContextPath}, 
                    Needs["TypeSystem`"]], DynamicModuleValues :> {}, 
                    BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
                    TypeSystem`NestedGrid`PackagePrivate`deleteState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
                   DefaultBaseStyle -> "Deploy"]}, "CopyTag", 
                 DisplayFunction -> (#& ), 
                 InterpretationFunction -> ("Dataset[<>]"& )]],
               Annotation[#, 
                Dataset[
                 Association[
                 "L1Regularization" -> 0, "L2Regularization" -> 1.*^-6, 
                  "OptimizationMethod" -> "LBFGS"], 
                 
                 TypeSystem`Struct[{
                  "L1Regularization", "L2Regularization", 
                   "OptimizationMethod"}, {
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[String]}], 
                 Association["ID" -> 134054686382972]], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Accuracy\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                
                TemplateBox[{
                 TemplateBox[{
                   "99.5405642267733696826`3.", "\"%\"", "percent", 
                    "\"Percent\""}, "QuantityPostfix", SyntaxForm -> Mod],
                  StyleBox[
                   TemplateBox[{"\" \[PlusMinus] \"", 
                    
                    TemplateBox[{
                    "0.163970763283232096`2.", "\"%\"", "percent", 
                    "\"Percent\""}, "QuantityPostfix", SyntaxForm -> Mod]}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.9921262270020690943`3.",
                   "\", \"", "0.9986850575333984237`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.9921262270020690943`3., 
                  ", ", 0.9986850575333984237`3., "]"}], "Tooltip"]& ]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox[
                 TagBox[
                  TooltipBox[
                  "\"Loss\"", "\"Mean cross entropy\"", LabelStyle -> 
                   "TextStyling"], 
                  Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"0.0162890688342036613`3.",StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0033070944021263708`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.0096748800299509205`3.",
                   "\", \"", "0.0229032576384564021`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.0096748800299509205`3., 
                  ", ", 0.0229032576384564021`3., "]"}], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Single evaluation time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "1.24`",
                RowBox[{
                 "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
                  "\"example\""}],"milliseconds per example",FractionBox[
                "\"Milliseconds\"", "\"Examples\""]},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Batch evaluation speed\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "361.`",
                RowBox[{
                 "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                  "\[InvisibleSpace]", "\"ms\""}],"examples per millisecond",
                FractionBox["\"Examples\"", "\"Milliseconds\""]},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Classifier memory\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"389.`","\"kB\"","kilobytes","\"Kilobytes\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Training examples used\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"6433","\"examples\"","examples","\"Examples\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Training time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"9.85`","\"s\"","seconds","\"Seconds\""},
               "Quantity"]},
             {
              ItemBox[
               DynamicModuleBox[{
                MachineLearning`file4Automation`PackagePrivate`pos$$ = 1}, 
                DynamicBox[ToBoxes[
                  Show[
                   Part[{
                    Graphics[{{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.044729082996218784`}, {
                    3.912023005428146, -2.406003065123385}, {
                    5.521460917862246, -3.222359832378234}, {
                    6.907755278982137, -4.001873700226901}, {
                    8.545974992841689, -4.117261019806545}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, -0.22705063979017337`}, {
                    2.302585092994046, -3.9349394630125905`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, -0.044729082996218784`}}, {{
                    3.912023005428146, -2.406003065123385}}, {{
                    5.521460917862246, -3.222359832378234}}, {{
                    6.907755278982137, -4.001873700226901}}, {{
                    8.545974992841689, -4.117261019806545}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, -0.22705063979017337`}}, {{
                    2.302585092994046, -3.9349394630125905`}}}]}, {}}}, {}, \
{}, {}, {}}}, {{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, -0.08922622558288869}, {
                    2.302585092994046, -0.002127872038573706}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.912023005428146, -2.591977854966924}, {
                    3.912023005428146, -2.2492510801172516`}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.521460917862246, -3.6623975574837284`}, {
                    5.521460917862246, -2.917829584787545}}]}, {
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{6.907755278982137, -4.180847002831959}, {
                    6.907755278982137, -3.850121512951262}}]}, {
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{8.545974992841689, -4.344193465863071}, {
                    8.545974992841689, -3.932421485156301}}]}}}, {}, {}, {}, \
{}}}}, {DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.0696147194275873`, -4.412848015220199}, 
                    PlotRange -> {{2.170613436291659, 
                    Log[6433]}, {-4.343512794073785, -0.044729082996218784`}},
                     PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.0696147194275873`, -4.412848015220199}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.170613436291659, 
                    Log[6433]}, {-4.343512794073785, -0.044729082996218784`}},
                     PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.7129397735128815}, {
                    3.912023005428146, 0.9531931488181176}, {
                    5.521460917862246, 0.9694799385576971}, {
                    6.907755278982137, 0.9892178555615082}, {
                    8.545974992841689, 0.9954056422677338}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, 0.8295047018897782}, {
                    2.302585092994046, 0.8555277282154578}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.7129397735128815}}, {{
                    3.912023005428146, 0.9531931488181176}}, {{
                    5.521460917862246, 0.9694799385576971}}, {{
                    6.907755278982137, 0.9892178555615082}}, {{
                    8.545974992841689, 0.9954056422677338}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.8295047018897782}}, {{
                    2.302585092994046, 
                    0.8555277282154578}}}]}, {}}}, {}, {}, {}, {}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, 
                    AxesOrigin -> {2.0696147194275873`, 0.699342183837176}, 
                    PlotRange -> {{2.170613436291659, 
                    Log[6433]}, {0.7129397735128815, 1}}, PlotRangeClipping -> 
                    True, ImagePadding -> {{30, 10}, {37, 0}}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.0696147194275873`, 0.699342183837176}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.170613436291659, 
                    Log[6433]}, {0.7129397735128815, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
                    Graphics[{{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.8910566916797086}, {
                    3.912023005428146, -2.406003065123385}, {
                    5.521460917862246, -3.0660158363913106`}, {
                    6.907755278982137, -3.8755546798116924`}, {
                    8.545974992841689, -3.878707819915177}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.027202593546774533`}, {
                    3.912023005428146, -0.7427999497308672}, {
                    5.521460917862246, -1.700272772876113}, {
                    6.907755278982137, -2.148203753114262}, {
                    8.545974992841689, -2.1093395615054624`}}]}, 
                    "NaiveBayes"], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.044729082996218784`}, {
                    3.912023005428146, -0.5833009915407007}, {
                    5.521460917862246, -1.5368878862765267`}, {
                    6.907755278982137, -2.3888664247119893`}, {
                    8.545974992841689, -3.1563514041771055`}}]}, 
                    "DecisionTree"], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.010433990011348855`}, {
                    3.912023005428146, -1.0543770171860245`}, {
                    5.521460917862246, -1.7286062165117129`}, {
                    6.907755278982137, -2.311924560092767}, {
                    8.545974992841689, -2.7765270840300804`}}]}, 
                    "NearestNeighbors"], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.1926328538703781}, {
                    3.912023005428146, -0.5258693947957243}, {
                    5.521460917862246, -1.3109772167481415`}, {
                    6.907755278982137, -2.954097147377228}, {
                    8.545974992841689, -3.5269341494019826`}}]}, 
                    "RandomForest"], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.32602852088566936`}, {
                    3.912023005428146, 0.32564279765449694`}, {
                    5.521460917862246, 0.32566080325330427`}, {
                    6.907755278982137, 0.324306713965858}, {8.545974992841689,
                     0.3155810594853931}}]}, "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.013629831654206904`}, {
                    3.912023005428146, -0.626199337423493}, {
                    5.521460917862246, -1.0754695312943712`}, {
                    6.907755278982137, -1.5438778944332336`}, {
                    8.545974992841689, -2.0499676175308568`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.3920358912260487}, {
                    3.912023005428146, -1.6744128711344495`}, {
                    5.521460917862246, -3.222359832378234}, {
                    6.907755278982137, -4.001873700226901}, {
                    8.545974992841689, -4.117261019806545}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.31045627474489984`}, {
                    3.912023005428146, 0.24415795294344028`}, {
                    5.521460917862246, 0.0498509493200101}, {
                    6.907755278982137, -0.24208400543099517`}, {
                    8.545974992841689, -0.631260029125276}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.7946117974981064, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.22470799366291083`}, {
                    3.912023005428146, -0.060440625136407536`}, {
                    5.521460917862246, -0.4655737335097102}, {
                    6.907755278982137, -0.850165849489325}, {
                    8.545974992841689, -1.3033696812330937`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.030679774997896203`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.32573971475424207`}, {
                    3.912023005428146, -0.4898931973500904}, {
                    5.521460917862246, -1.3287359553466862`}, {
                    6.907755278982137, -1.574016963690858}, {
                    8.545974992841689, -1.717228814241559}}]}, 
                    "GradientBoostedTrees"], 
                    Tooltip[{
                    Hue[0.266747752497686, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 1.1188751426461236`}, {
                    3.912023005428146, -1.9124830015997316`}, {
                    5.521460917862246, -2.529739423939683}, {
                    6.907755278982137, -2.9512665572784598`}, {
                    8.545974992841689, -3.3897701875047166`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.5028157299974758, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, 0.31668283940462255`}, {
                    5.521460917862246, 0.27904272606060465`}, {
                    6.907755278982137, 0.17248330534180617`}, {
                    8.545974992841689, -0.08717166716460886}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.7388837074972656, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, -1.2784613897841268`}, {
                    5.521460917862246, -1.7942206572175528`}, {
                    6.907755278982137, -2.2788428322335466`}, {
                    8.545974992841689, -2.792266507297455}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.9749516849970554, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{5.521460917862246, 0.3261265230005042}, {
                    6.907755278982137, 0.3262999657640115}, {
                    8.545974992841689, 0.32532143432830096`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.21101966249684523`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{5.521460917862246, -2.9964272805690486`}, {
                    6.907755278982137, -3.5356881536124063`}, {
                    8.545974992841689, -3.7369753411720836`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.44708763999663503`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{5.521460917862246, -2.786199527944226}, {
                    6.907755278982137, -3.810091002801867}, {
                    8.545974992841689, -3.89779756136876}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.6831556174964248, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{6.907755278982137, 0.30625171464360457`}, {
                    8.545974992841689, 0.23381760314077973`}}]}, 
                    "LogisticRegression"]}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.0696147194275873`, -4.4973031606297225`},
                     PlotRange -> {{2.170613436291659, 
                    Log[6433]}, {-4.4081574732761375`, 1.1188751426461236`}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.0696147194275873`, -4.4973031606297225`},
                     DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.170613436291659, 
                    Log[6433]}, {-4.4081574732761375`, 1.1188751426461236`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}]}, 
                    MachineLearning`file4Automation`PackagePrivate`pos$$], 
                   PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file4Automation`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file4Automation`PackagePrivate`pos$$ - 
                    1, 1], Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file4Automation`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file4Automation`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file4Automation`PackagePrivate`pos$$ + 
                    1, 
                    Length[{
                    Graphics[{{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.044729082996218784`}, {
                    3.912023005428146, -2.406003065123385}, {
                    5.521460917862246, -3.222359832378234}, {
                    6.907755278982137, -4.001873700226901}, {
                    8.545974992841689, -4.117261019806545}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, -0.22705063979017337`}, {
                    2.302585092994046, -3.9349394630125905`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, -0.044729082996218784`}}, {{
                    3.912023005428146, -2.406003065123385}}, {{
                    5.521460917862246, -3.222359832378234}}, {{
                    6.907755278982137, -4.001873700226901}}, {{
                    8.545974992841689, -4.117261019806545}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, -0.22705063979017337`}}, {{
                    2.302585092994046, -3.9349394630125905`}}}]}, {}}}, {}, \
{}, {}, {}}}, {{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, -0.08922622558288869}, {
                    2.302585092994046, -0.002127872038573706}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.912023005428146, -2.591977854966924}, {
                    3.912023005428146, -2.2492510801172516`}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.521460917862246, -3.6623975574837284`}, {
                    5.521460917862246, -2.917829584787545}}]}, {
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{6.907755278982137, -4.180847002831959}, {
                    6.907755278982137, -3.850121512951262}}]}, {
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{8.545974992841689, -4.344193465863071}, {
                    8.545974992841689, -3.932421485156301}}]}}}, {}, {}, {}, \
{}}}}, {DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.0696147194275873`, -4.412848015220199}, 
                    PlotRange -> {{2.170613436291659, 
                    Log[6433]}, {-4.343512794073785, -0.044729082996218784`}},
                     PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.0696147194275873`, -4.412848015220199}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {"CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.170613436291659, 
                    Log[6433]}, {-4.343512794073785, -0.044729082996218784`}},
                     PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.7129397735128815}, {
                    3.912023005428146, 0.9531931488181176}, {
                    5.521460917862246, 0.9694799385576971}, {
                    6.907755278982137, 0.9892178555615082}, {
                    8.545974992841689, 0.9954056422677338}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, 0.8295047018897782}, {
                    2.302585092994046, 0.8555277282154578}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.7129397735128815}}, {{
                    3.912023005428146, 0.9531931488181176}}, {{
                    5.521460917862246, 0.9694799385576971}}, {{
                    6.907755278982137, 0.9892178555615082}}, {{
                    8.545974992841689, 0.9954056422677338}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.8295047018897782}}, {{
                    2.302585092994046, 
                    0.8555277282154578}}}]}, {}}}, {}, {}, {}, {}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, 
                    AxesOrigin -> {2.0696147194275873`, 0.699342183837176}, 
                    PlotRange -> {{2.170613436291659, 
                    Log[6433]}, {0.7129397735128815, 1}}, PlotRangeClipping -> 
                    True, ImagePadding -> {{30, 10}, {37, 0}}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.0696147194275873`, 0.699342183837176}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {"CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.170613436291659, 
                    Log[6433]}, {0.7129397735128815, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
                    Graphics[{{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.8910566916797086}, {
                    3.912023005428146, -2.406003065123385}, {
                    5.521460917862246, -3.0660158363913106`}, {
                    6.907755278982137, -3.8755546798116924`}, {
                    8.545974992841689, -3.878707819915177}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.027202593546774533`}, {
                    3.912023005428146, -0.7427999497308672}, {
                    5.521460917862246, -1.700272772876113}, {
                    6.907755278982137, -2.148203753114262}, {
                    8.545974992841689, -2.1093395615054624`}}]}, 
                    "NaiveBayes"], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.044729082996218784`}, {
                    3.912023005428146, -0.5833009915407007}, {
                    5.521460917862246, -1.5368878862765267`}, {
                    6.907755278982137, -2.3888664247119893`}, {
                    8.545974992841689, -3.1563514041771055`}}]}, 
                    "DecisionTree"], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.010433990011348855`}, {
                    3.912023005428146, -1.0543770171860245`}, {
                    5.521460917862246, -1.7286062165117129`}, {
                    6.907755278982137, -2.311924560092767}, {
                    8.545974992841689, -2.7765270840300804`}}]}, 
                    "NearestNeighbors"], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.1926328538703781}, {
                    3.912023005428146, -0.5258693947957243}, {
                    5.521460917862246, -1.3109772167481415`}, {
                    6.907755278982137, -2.954097147377228}, {
                    8.545974992841689, -3.5269341494019826`}}]}, 
                    "RandomForest"], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.32602852088566936`}, {
                    3.912023005428146, 0.32564279765449694`}, {
                    5.521460917862246, 0.32566080325330427`}, {
                    6.907755278982137, 0.324306713965858}, {8.545974992841689,
                     0.3155810594853931}}]}, "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.013629831654206904`}, {
                    3.912023005428146, -0.626199337423493}, {
                    5.521460917862246, -1.0754695312943712`}, {
                    6.907755278982137, -1.5438778944332336`}, {
                    8.545974992841689, -2.0499676175308568`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.3920358912260487}, {
                    3.912023005428146, -1.6744128711344495`}, {
                    5.521460917862246, -3.222359832378234}, {
                    6.907755278982137, -4.001873700226901}, {
                    8.545974992841689, -4.117261019806545}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.31045627474489984`}, {
                    3.912023005428146, 0.24415795294344028`}, {
                    5.521460917862246, 0.0498509493200101}, {
                    6.907755278982137, -0.24208400543099517`}, {
                    8.545974992841689, -0.631260029125276}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.7946117974981064, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.22470799366291083`}, {
                    3.912023005428146, -0.060440625136407536`}, {
                    5.521460917862246, -0.4655737335097102}, {
                    6.907755278982137, -0.850165849489325}, {
                    8.545974992841689, -1.3033696812330937`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.030679774997896203`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.32573971475424207`}, {
                    3.912023005428146, -0.4898931973500904}, {
                    5.521460917862246, -1.3287359553466862`}, {
                    6.907755278982137, -1.574016963690858}, {
                    8.545974992841689, -1.717228814241559}}]}, 
                    "GradientBoostedTrees"], 
                    Tooltip[{
                    Hue[0.266747752497686, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 1.1188751426461236`}, {
                    3.912023005428146, -1.9124830015997316`}, {
                    5.521460917862246, -2.529739423939683}, {
                    6.907755278982137, -2.9512665572784598`}, {
                    8.545974992841689, -3.3897701875047166`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.5028157299974758, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, 0.31668283940462255`}, {
                    5.521460917862246, 0.27904272606060465`}, {
                    6.907755278982137, 0.17248330534180617`}, {
                    8.545974992841689, -0.08717166716460886}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.7388837074972656, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, -1.2784613897841268`}, {
                    5.521460917862246, -1.7942206572175528`}, {
                    6.907755278982137, -2.2788428322335466`}, {
                    8.545974992841689, -2.792266507297455}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.9749516849970554, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{5.521460917862246, 0.3261265230005042}, {
                    6.907755278982137, 0.3262999657640115}, {
                    8.545974992841689, 0.32532143432830096`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.21101966249684523`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{5.521460917862246, -2.9964272805690486`}, {
                    6.907755278982137, -3.5356881536124063`}, {
                    8.545974992841689, -3.7369753411720836`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.44708763999663503`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{5.521460917862246, -2.786199527944226}, {
                    6.907755278982137, -3.810091002801867}, {
                    8.545974992841689, -3.89779756136876}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.6831556174964248, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{6.907755278982137, 0.30625171464360457`}, {
                    8.545974992841689, 0.23381760314077973`}}]}, 
                    "LogisticRegression"]}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.0696147194275873`, -4.4973031606297225`},
                     PlotRange -> {{2.170613436291659, 
                    Log[6433]}, {-4.4081574732761375`, 1.1188751426461236`}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.0696147194275873`, -4.4973031606297225`},
                     DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {"CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.170613436291659, 
                    Log[6433]}, {-4.4081574732761375`, 1.1188751426461236`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}]}]], Appearance -> 
                    "Frameless"]}}, Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                 ImageSizeCache->{413., {148., 154.}}],
                DynamicModuleValues:>{}],
               Alignment->Center,
               StripOnInput->False], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            ColumnsEqual->False,
            
            GridBoxAlignment->{
             "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
              "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
            GridBoxDividers->{"Columns" -> {False, {
                 Opacity[0.15]}, False}},
            
            GridBoxItemSize->{
             "Columns" -> {Automatic, {Automatic}}, "ColumnsIndexed" -> {}, 
              "Rows" -> {{1.}}, "RowsIndexed" -> {}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], 
                Offset[1.1199999999999999`], {
                 Offset[1.75]}, 
                Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.8]}, 
                Offset[0.2]}, "RowsIndexed" -> {}}],
           "Grid"],
          FrameMargins->{{10, 10}, {10, 5}},
          FrameStyle->None,
          StripOnInput->False],
         Deploy,
         DefaultBaseStyle->"Deploy"],
        Alignment->Center,
        BaseStyle->{
         FontWeight -> "Light", FontSize -> 12, FontFamily -> "DejaVu Sans", 
          NumberMarks -> False, Deployed -> False},
        StripOnInput->False]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Background->RGBColor[0.9802, 0.9802, 0.9802],
    FrameMargins->{{0, 0}, {0, 0}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   StripOnInput->False,
   LineBreakWithin->False],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{3.764676482068218*^9, 3.764677430872264*^9, 
  3.764677820662735*^9},
 CellLabel->
  "Out[254]=",ExpressionUUID->"81b5bc6d-e20a-4ab3-983a-a18985a4e047"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"cm0", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"cThermo0", ",", "validation"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"cm0", "[", "\"\<Accuracy\>\"", "]"}], "\[IndentingNewLine]", 
 RowBox[{"cm0", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.764676213053334*^9, 3.764676230100232*^9}, {
  3.764676277129405*^9, 3.7646762818558903`*^9}},
 CellLabel->
  "In[255]:=",ExpressionUUID->"d5814991-a2c2-4cb7-b9dd-21d648160d2d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierMeasurementsObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2757", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2757", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["4", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  RowBox[{
                   "0.9952847297787450476`7.636879131758725", "\[PlusMinus]", 
                    "0.0013049304248280507`2."}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierMeasurementsObject[
   Association["Model" -> ClassifierFunction[
      Association[
      "ExampleNumber" -> 6433, "ClassNumber" -> 4, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Numerical"], "f2" -> 
              Association["Type" -> "Numerical"]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["Transpose", 
                  Association["FeatureNumber" -> 2]], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Numerical", "Numerical"}, 
                   "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> 
                   Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
            Association[
             "(f1f2)" -> 
              Association["Type" -> "NumericalVector", "Weight" -> 2]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f2" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "(f1f2)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2]], 
                "Version" -> {11.3, 0}, "ID" -> 5999172908886121309]], 
              MachineLearning`MLProcessor["ImputeMissing", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                Association[
                 "(f1f2)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2]], 
                "Imputer" -> (DimensionReducerFunction[
                  Association[
                  "ExampleNumber" -> 6433, "Imputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {536.2599098398881, 5.532117796154375}, 
                    "Method" -> "Naive", "VectorLength" -> 2, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {536.2599098398881, 5.532117796154375}, 
                    "StandardDeviation" -> {418.52899360450834`, 
                    1.4147743899911247`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 2, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                   MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                    True, "Invertibility" -> "Perfect", "Missing" -> 
                    "Allowed"]], "Processor" -> 
                   MachineLearning`MLProcessor[
                    "LogTransformNumericalVector", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Indices" -> {2}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], "Padder" -> 
                   MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                   MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                   "Model" -> 
                   Association[
                    "Matrix" -> {{-0.7071067811864277, -0.7071067811866675}, {
                    0.7071067811866675, -0.7071067811864277}}, "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {536.2599098398881, 5.532117796154375}, 
                    "StandardDeviation" -> {418.52899360450834`, 
                    1.4147743899911247`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 2, "Method" -> "Linear"], 
                   "PerformanceGoal" -> Automatic, "Invertibility" -> 
                   "Approximate", "Log" -> 
                   Association[
                    "TrainingTime" -> 0.009358, "MaxTrainingMemory" -> 367832,
                     "DataMemory" -> 103080, "FunctionMemory" -> 24312, 
                    "LanguageVersion" -> {11.3, 0}, "Date" -> 
                    DateObject[{
                    2019, 4, 19, 11, 50, 7.827074`7.646174427067722}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                    "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
                  "ImputedVectors", PerformanceGoal -> "Quality"]& ), 
                "Method" -> "DimensionReduction", "VectorLength" -> 2, 
                "Output" -> 
                Association[
                 "(f1f2)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2]], 
                "Type" -> "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
                3183744061192450103]], 
              MachineLearning`MLProcessor["LogTransformNumericalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "(f1f2)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2]], 
                "Indices" -> {2}, "Version" -> {11.3, 0}, "ID" -> 
                8662679617415285566, "Output" -> 
                Association[
                 "(f1f2)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2]]]], 
              
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "(f1f2)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2]], 
                "Mean" -> {536.2599098398881, 5.532117796154375}, 
                "StandardDeviation" -> {418.52899360450834`, 
                 1.4147743899911247`}, "Output" -> 
                Association[
                 "(f1f2)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2]], 
                "Version" -> {11.3, 0}, "ID" -> 2821404797631399570]]}, 
            "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            True, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 6575292539387000017]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association["r1" -> 1, "r2" -> 2, "r3" -> 3, "r5" -> 4]}, 
                "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
                7125443539825747892, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 987800726533092851]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 4], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]},
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
         "Marginal" -> 
         Association[
          "r1" -> 0.3647661954326549, "r2" -> 0.3798353270156905, "r3" -> 
           0.12443684946403603`, "r5" -> 0.13096162808761844`]], "Prior" -> 
       Automatic, "Utility" -> 
       SparseArray[
        Automatic, {4, 5}, 0., {
         1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       "Quality", "BatchProcessing" -> Automatic, "Model" -> 
       Association["LogProbabilitiesFunction" -> LinearLayer[
           Association[
           "Type" -> "Linear", "Arrays" -> 
            Association[
             "Weights" -> 
              RawArray["Real32",{{-384.5337829589844, 
                55.03048324584961}, {-112.19454956054688`, 
                1.0478700399398804`}, {-226.03048706054688`, 
                53.03271484375}}], "Biases" -> 
              RawArray["Real32",{-33.11286163330078, 74.27030944824219, 
                36.863407135009766`}]], "Parameters" -> 
            Association[
             "OutputDimensions" -> {3}, "$OutputSize" -> 3, "$InputSize" -> 2,
               "$InputDimensions" -> {2}], "Inputs" -> 
            Association[
             "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
            "Outputs" -> 
            Association[
             "Output" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
           
           Association["Version" -> "11.3.5"]], "Processor" -> 
         MachineLearning`MLProcessor["FirstValues", 
           Association[
           "Info" -> Association["Weight" -> 2, "Type" -> "NumericalVector"], 
            "Key" -> "(f1f2)", "Invertibility" -> "Perfect", "Missing" -> 
            "Allowed"]], "Method" -> "LogisticRegression", "Options" -> 
         Association[
          "L1Regularization" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "L2Regularization" -> 
           Association["Value" -> 1.*^-6, "Options" -> Association[]], 
           "OptimizationMethod" -> 
           Association["Value" -> "LBFGS", "Options" -> Association[]], 
           MaxIterations -> 
           Association["Value" -> 30, "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            PlusMinus[0.01628906883420366, 0.003307094402126371], "Accuracy" -> 
            PlusMinus[0.9954056422677338, 0.001639707632832321], 
            "EvaluationTime" -> 2.124320124320124*^-6, "TestSize" -> 2574, 
            "TrainingSize" -> 5146, "TrainingTime" -> 0.1393273333333333, 
            "TrainingMemory" -> 1.2538826666666665`*^6, "ModelMemory" -> 
            8824., "ExperimentCount" -> 2, "ModelUtility" -> 
            1503.3582655236287`, "MeanCrossEntropyHistory" -> {
              PlusMinus[0.02024022202395721, 0.005413635264555691], 
              PlusMinus[0.015441022649935075`, 0.0025080535830551867`]}, 
            "AccuracyHistory" -> {
              PlusMinus[0.9948954201793531, 0.002306953823493742], 
              PlusMinus[0.9958452242541955, 0.0021413083833234344`]}, 
            "Configuration" -> {
             "LogisticRegression", "L1Regularization" -> 0, 
              "L2Regularization" -> 1.*^-6, "OptimizationMethod" -> Automatic,
               MaxIterations -> 30}, "FinalTrainingSize" -> 6433], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
             "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Vector[TypeSystem`AnyType, 2], 
             TypeSystem`Vector[TypeSystem`AnyType, 2], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], 
           Association["ID" -> 239697996962682]], "Configurations" -> 
         Dataset[
           Association[
           Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.0001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.41022204542300716`, 3.512567064353572], 
                 "Accuracy" -> 
                 PlusMinus[0.775483796610153, 0.05142195163135836], 
                 "EvaluationTime" -> 3.903875*^-6, "TestSize" -> 2900, 
                 "TrainingSize" -> 10, "TrainingTime" -> 
                 0.019021000000000003`, "TrainingMemory" -> 70274., 
                 "ModelMemory" -> 8824., "ExperimentCount" -> 3, 
                 "ModelUtility" -> 0.3488534572206053, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[11.738754305654423`, 1.0576761199886244`], 
                   PlusMinus[9.857049014911, 0.7671032384134716], 
                   PlusMinus[0.38734505838060684`, 0.02956039540302601]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7894587814401207, 0.014530992367821564`], 
                   PlusMinus[0.6629537146996425, 0.014958483006127711`], 
                   PlusMinus[0.8323305724872052, 0.011408987613986928`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.09017499883396056, 0.015303190868395463`], 
                 "Accuracy" -> 
                 PlusMinus[0.9531931488181176, 0.012103111559353251`], 
                 "EvaluationTime" -> 4.2285714285714285`*^-6, "TestSize" -> 
                 700, "TrainingSize" -> 50, "TrainingTime" -> 0.021522, 
                 "TrainingMemory" -> 73360, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 49.68931403360152, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.09017499883396056, 0.010820990036834482`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9531931488181176, 0.008558192257075973]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.04660647325756199, 0.010072935350062016`], 
                 "Accuracy" -> 
                 PlusMinus[0.9749503936602315, 0.008378398555295615], 
                 "EvaluationTime" -> 3.341111111111111*^-6, "TestSize" -> 900,
                  "TrainingSize" -> 250, "TrainingTime" -> 0.022404, 
                 "TrainingMemory" -> 94936, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 182.71661252235907`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.04660647325756199, 0.0071226408924825405`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9749503936602315, 0.0059244224339331025`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.020742829053626313`, 0.0028684391072297515`], 
                 "Accuracy" -> 
                 PlusMinus[0.9908684073382998, 0.002798566125750477], 
                 "EvaluationTime" -> 2.7924242424242426`*^-6, "TestSize" -> 
                 3300, "TrainingSize" -> 1000, "TrainingTime" -> 0.04166, 
                 "TrainingMemory" -> 257112, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 950.592540671026, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.020742829053626313`, 0.0020282927441428434`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9908684073382998, 0.0019788850851171266`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.020677527014820615`, 0.007469848786776846], 
                 "Accuracy" -> 
                 PlusMinus[0.9948954201793531, 0.0032625253849533175`], 
                 "EvaluationTime" -> 1.6340326340326342`*^-6, "TestSize" -> 
                 1287, "TrainingSize" -> 5146, "TrainingTime" -> 0.115083, 
                 "TrainingMemory" -> 1251384, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 878.692382627991, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.020677527014820615`, 0.005281980731568012]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9948954201793531, 0.002306953823493742]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1.6340326340326342`*^-6, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.020677527014820615`, 0.007469848786776846], 
                "ModelMemory" -> 8824, "TrainingMemory" -> 1251384, 
                "TrainingTime" -> 0.16288593179168287`], "Index" -> 1], 
            Association[
             "Value" -> "NaiveBayes", "Options" -> 
              Association[
               "SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.0275759619356337`, 0.06195156160788645], 
                 "Accuracy" -> 
                 PlusMinus[0.6114340643697601, 0.042051406087689834`], 
                 "EvaluationTime" -> 4.5306249999999995`*^-6, "TestSize" -> 
                 1400, "TrainingSize" -> 10, "TrainingTime" -> 
                 0.0040922499999999995`, "TrainingMemory" -> 46680., 
                 "ModelMemory" -> 15128., "ExperimentCount" -> 3, 
                 "ModelUtility" -> 0.39938182188205085`, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.9166401284673689, 0.05369451959790355], 
                   PlusMinus[1.0916174554570428`, 0.055819022809010174`], 
                   PlusMinus[1.065121924116227, 0.04576833590648972]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6940140365842007, 0.02316755816590969], 
                   PlusMinus[0.5747660270153442, 0.024764111767712562`], 
                   PlusMinus[0.5732432563542688, 0.020149654089206683`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.47577988901678664`, 0.0716950700607897], 
                 "Accuracy" -> 
                 PlusMinus[0.7676725524410007, 0.04257150845077362], 
                 "EvaluationTime" -> 5.150000000000001*^-6, "TestSize" -> 200,
                  "TrainingSize" -> 50, "TrainingTime" -> 0.004861, 
                 "TrainingMemory" -> 47608, "ModelMemory" -> 15256, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 1.7981416360857327`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.47577988901678664`, 0.05069607021762902]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7676725524410007, 0.03010260231088244]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.1826336997381301, 0.03757930576401922], 
                 "Accuracy" -> 
                 PlusMinus[0.9214561505808956, 0.022841587151992488`], 
                 "EvaluationTime" -> 4.9033333333333335`*^-6, "TestSize" -> 
                 300, "TrainingSize" -> 250, "TrainingTime" -> 0.0053, 
                 "TrainingMemory" -> 68368, "ModelMemory" -> 17752, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 11.946374283809506`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.1826336997381301, 0.026572581938020704`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9214561505808956, 0.016151441168237406`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.11669358010993672`, 0.007962482432835219], 
                 "Accuracy" -> 
                 PlusMinus[0.9600361808984103, 0.0051888136392418405`], 
                 "EvaluationTime" -> 2.725161290322581*^-6, "TestSize" -> 
                 3100, "TrainingSize" -> 1000, "TrainingTime" -> 0.006138, 
                 "TrainingMemory" -> 174112, "ModelMemory" -> 22624, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 30.871622507429944`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.11669358010993672`, 0.005630325323336541]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9600361808984103, 0.0036690453106211535`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.12131806309996329`, 0.010935697189502738`], 
                 "Accuracy" -> 
                 PlusMinus[0.962574112249789, 0.007851247443119195], 
                 "EvaluationTime" -> 3.278943278943279*^-6, "TestSize" -> 
                 1287, "TrainingSize" -> 5146, "TrainingTime" -> 0.015679, 
                 "TrainingMemory" -> 754584, "ModelMemory" -> 27744, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 28.317580163193714`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.12131806309996329`, 0.0077327056397000545`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.962574112249789, 0.005551670307803125]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 3.278943278943279*^-6, "MeanCrossEntropy" -> 
                PlusMinus[0.12131806309996329`, 0.010935697189502738`], 
                "ModelMemory" -> 27744, "TrainingMemory" -> 754584, 
                "TrainingTime" -> 0.023692523416245625`], "Index" -> 2], 
            Association[
             "Value" -> "DecisionTree", "Options" -> 
              Association[
               "DistributionSmoothing" -> Association["Value" -> 1], 
                "FeatureFraction" -> Association["Value" -> 1]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.9562565128928755, 0.04161787738333376], 
                 "Accuracy" -> 
                 PlusMinus[0.7129397735128815, 0.019279264017105287`], 
                 "EvaluationTime" -> 8.586166666666667*^-6, "TestSize" -> 
                 1500, "TrainingSize" -> 10, "TrainingTime" -> 0.00428075, 
                 "TrainingMemory" -> 63400., "ModelMemory" -> 5480., 
                 "ExperimentCount" -> 3, "ModelUtility" -> 
                 0.46424832118900894`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.9520053461126404, 0.03226936310681307], 
                   PlusMinus[0.8908453047978744, 0.025186949655091], 
                   PlusMinus[1.0243509403617517`, 0.025204230988849448`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7124325103435362, 0.02274812620049468], 
                   PlusMinus[0.7406407942726688, 0.019745657937032684`], 
                   PlusMinus[0.6876714539418335, 0.01899016672240835]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.5580531939188664, 0.07608466907355416], 
                 "Accuracy" -> 
                 PlusMinus[0.8245860422868198, 0.03848638107734334], 
                 "EvaluationTime" -> 8.32*^-6, "TestSize" -> 200, 
                 "TrainingSize" -> 50, "TrainingTime" -> 0.006215, 
                 "TrainingMemory" -> 69088, "ModelMemory" -> 5480, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 1.3143417499998276`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.5580531939188664, 0.053799985446244536`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.8245860422868198, 0.0272139810431191]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.2150493190400629, 0.05714596614568825], 
                 "Accuracy" -> 
                 PlusMinus[0.958026892998748, 0.017723712959775036`], 
                 "EvaluationTime" -> 8.286666666666666*^-6, "TestSize" -> 300,
                  "TrainingSize" -> 250, "TrainingTime" -> 0.007537, 
                 "TrainingMemory" -> 98888, "ModelMemory" -> 5480, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 8.421179417309123, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.2150493190400629, 0.040408300179073035`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.958026892998748, 0.012532557621660822`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.09173361191679624, 0.006608290916867551], 
                 "Accuracy" -> 
                 PlusMinus[0.9802494730937665, 0.0028056268415304945`], 
                 "EvaluationTime" -> 2.778943493465857*^-6, "TestSize" -> 
                 5433, "TrainingSize" -> 1000, "TrainingTime" -> 0.011564, 
                 "TrainingMemory" -> 192360, "ModelMemory" -> 5992, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 49.88212829733948, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.09173361191679624, 0.004672767319370512]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9802494730937665, 0.0019838777651252078`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.042580818197025284`, 0.008083045090784953], 
                 "Accuracy" -> 
                 PlusMinus[0.9929894692408658, 0.0038124333167801174`], 
                 "EvaluationTime" -> 4.808857808857809*^-6, "TestSize" -> 
                 1287, "TrainingSize" -> 5146, "TrainingTime" -> 0.03626, 
                 "TrainingMemory" -> 857976, "ModelMemory" -> 6504, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 221.1225006283344, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.042580818197025284`, 0.005715575996330672]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9929894692408658, 0.002695797451116742]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 4.808857808857809*^-6, "MeanCrossEntropy" -> 
                PlusMinus[0.042580818197025284`, 0.008083045090784953], 
                "ModelMemory" -> 6504, "TrainingMemory" -> 857976, 
                "TrainingTime" -> 0.049609273124757096`], "Index" -> 3], 
            Association[
             "Value" -> "NearestNeighbors", "Options" -> 
              Association[
               "NeighborsNumber" -> Association["Value" -> Automatic], 
                "DistributionSmoothing" -> Association["Value" -> 0.5], 
                "NearestMethod" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.9896202552337182, 0.20150727856731437`], 
                 "Accuracy" -> 
                 PlusMinus[0.707615709712648, 0.07191891174174682], 
                 "EvaluationTime" -> 9.36595238095238*^-6, "TestSize" -> 1400,
                  "TrainingSize" -> 10, "TrainingTime" -> 
                 0.0030897499999999996`, "TrainingMemory" -> 50056., 
                 "ModelMemory" -> 6112., "ExperimentCount" -> 3, 
                 "ModelUtility" -> 0.4072100540228539, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.8680949470728558, 0.07240714875819092], 
                   PlusMinus[1.4766404700879205`, 0.07274246430539018], 
                   PlusMinus[0.8907022905863619, 0.03790148552182042]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7951092297463658, 0.02359498574853302], 
                   PlusMinus[0.5579558933221208, 0.024792351079119975`], 
                   PlusMinus[0.7320041538322377, 0.01680823498443094]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.3484094127864604, 0.07950720943380048], 
                 "Accuracy" -> 
                 PlusMinus[0.8542905167251608, 0.05091366344541073], 
                 "EvaluationTime" -> 0.00001027, "TestSize" -> 100, 
                 "TrainingSize" -> 50, "TrainingTime" -> 0.003898, 
                 "TrainingMemory" -> 85408, "ModelMemory" -> 6888, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 3.2544880841782162`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.3484094127864604, 0.056220086943859354`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.8542905167251608, 0.03600139667729956]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.17753167833247574`, 0.028434034057884843`], 
                 "Accuracy" -> 
                 PlusMinus[0.9107323692806796, 0.029529152791980214`], 
                 "EvaluationTime" -> 0.00001101, "TestSize" -> 200, 
                 "TrainingSize" -> 250, "TrainingTime" -> 0.009418, 
                 "TrainingMemory" -> 881440, "ModelMemory" -> 10664, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 12.867325382147907`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.17753167833247574`, 0.020105898298819615`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9107323692806796, 0.02088026418190288]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.09907040102670364, 0.005468390662798574], 
                 "Accuracy" -> 
                 PlusMinus[0.9759970844443536, 0.004860355193819462], 
                 "EvaluationTime" -> 8.097826086956523*^-6, "TestSize" -> 
                 2300, "TrainingSize" -> 1000, "TrainingTime" -> 0.023221, 
                 "TrainingMemory" -> 3428688, "ModelMemory" -> 24784, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 43.05292608020024, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.09907040102670364, 0.0038667361198420703`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9759970844443536, 0.0034367901165249974`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.06225433646158702, 0.005558502210637032], 
                 "Accuracy" -> 
                 PlusMinus[0.9933119048545447, 0.004058982292079972], 
                 "EvaluationTime" -> 0.000014000777000777, "TestSize" -> 1287,
                  "TrainingSize" -> 5146, "TrainingTime" -> 0.032113, 
                 "TrainingMemory" -> 3581080, "ModelMemory" -> 93728, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 107.57533263158857`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.06225433646158702, 0.00393045460638186]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9933119048545447, 0.0028701339034458637`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000014000777000777, "MeanCrossEntropy" -> 
                PlusMinus[0.06225433646158702, 0.005558502210637032], 
                "ModelMemory" -> 93728, "TrainingMemory" -> 3581080, 
                "TrainingTime" -> 0.04323412019043918], "Index" -> 4], 
            Association[
             "Value" -> "RandomForest", "Options" -> 
              Association[
               "FeatureFraction" -> Association["Value" -> Automatic], 
                "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
                Association["Value" -> Automatic], "DistributionSmoothing" -> 
                Association["Value" -> 0.5], "Implementation" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.2124375700318353`, 0.06423879942648729], 
                 "Accuracy" -> 
                 PlusMinus[0.7170815339802655, 0.041659847463376753`], 
                 "EvaluationTime" -> 0.0000662225, "TestSize" -> 300, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.01356125, 
                 "TrainingMemory" -> 279684., "ModelMemory" -> 164184., 
                 "ExperimentCount" -> 3, "ModelUtility" -> 0.2877069762847375,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.1000261767858432`, 0.03327663075758331], 
                   PlusMinus[1.0588212826282848`, 0.034442576010502705`], 
                   PlusMinus[1.2649030938560273`, 0.015070347391562003`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6661717048439721, 0.04740308811963848], 
                   PlusMinus[0.7750825959330814, 0.04221271635758949], 
                   PlusMinus[0.6958746751410019, 0.04629784814569237]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.5910412927096435, 0.10281826732294576`], 
                 "Accuracy" -> 
                 PlusMinus[0.8740924969231806, 0.04806735992053685], 
                 "EvaluationTime" -> 0.00006961, "TestSize" -> 100, 
                 "TrainingSize" -> 50, "TrainingTime" -> 0.014113, 
                 "TrainingMemory" -> 300520, "ModelMemory" -> 166400, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 1.1547363905223853`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.5910412927096435, 0.07270349405390615]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.8740924969231806, 0.033988756153546074`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.2695565124973262, 0.09458400235559021], 
                 "Accuracy" -> 
                 PlusMinus[0.9136964573192202, 0.041236181821619526`], 
                 "EvaluationTime" -> 0.00010343, "TestSize" -> 100, 
                 "TrainingSize" -> 250, "TrainingTime" -> 0.078991, 
                 "TrainingMemory" -> 377880, "ModelMemory" -> 170832, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 5.190551139720565, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.2695565124973262, 0.06688098945740222]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9136964573192202, 0.029158383796308605`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.05212570116342062, 0.0095618235556922], 
                 "Accuracy" -> 
                 PlusMinus[0.9824623342365758, 0.011082890341558045`], 
                 "EvaluationTime" -> 0.0000751875, "TestSize" -> 400, 
                 "TrainingSize" -> 1000, "TrainingTime" -> 0.022977, 
                 "TrainingMemory" -> 436840, "ModelMemory" -> 183472, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 147.91935879217706`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.05212570116342062, 0.006761230276739219]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9824623342365758, 0.007836786915662586]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.029394898226630082`, 0.0047089791563973025`], 
                 "Accuracy" -> 
                 PlusMinus[0.9892363063744388, 0.0050978768822199485`], 
                 "EvaluationTime" -> 0.00005472285714285714, "TestSize" -> 
                 700, "TrainingSize" -> 5146, "TrainingTime" -> 0.045958, 
                 "TrainingMemory" -> 1010408, "ModelMemory" -> 217200, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 469.340119716775, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.029394898226630082`, 0.0047089791563973025`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9892363063744388, 0.0050978768822199485`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00005472285714285714, "MeanCrossEntropy" -> 
                PlusMinus[0.029394898226630082`, 0.0047089791563973025`], 
                "ModelMemory" -> 217200, "TrainingMemory" -> 1010408, 
                "TrainingTime" -> 0.07101321541002721], "Index" -> 5], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 100000.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.385454882709607, 0.0015329653242391545`], 
                 "Accuracy" -> 
                 PlusMinus[0.4341743714198303, 0.08981220335005585], 
                 "EvaluationTime" -> 3.880701754385964*^-6, "TestSize" -> 
                 3400, "TrainingSize" -> 10, "TrainingTime" -> 0.00692925, 
                 "TrainingMemory" -> 62336., "ModelMemory" -> 8824., 
                 "ExperimentCount" -> 3, "ModelUtility" -> 
                 0.22493131315196307`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.385037799230007, 0.004453524860251647], 
                   PlusMinus[1.3856274036084484`, 0.0018058287793282781`], 
                   PlusMinus[1.385033414980806, 0.0036362680926019424`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6384706944041955, 0.019623003311045897`], 
                   PlusMinus[0.4148472810692614, 0.011277854213806502`], 
                   PlusMinus[0.34099590207211317`, 0.01568800639733292]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.3849205836280132`, 0.006898366644477906], 
                 "Accuracy" -> 
                 PlusMinus[0.7093604453592971, 0.0287736564912192], 
                 "EvaluationTime" -> 4.428*^-6, "TestSize" -> 500, 
                 "TrainingSize" -> 50, "TrainingTime" -> 0.007816, 
                 "TrainingMemory" -> 65272, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.22475650932614866`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.3849205836280132`, 0.004877881833421417]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7093604453592971, 0.020346047624473416`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.38494552017692, 0.0018687373100706704`], 
                 "Accuracy" -> 
                 PlusMinus[0.8051408355972031, 0.00950856555234741], 
                 "EvaluationTime" -> 4.992571428571429*^-6, "TestSize" -> 
                 3500, "TrainingSize" -> 250, "TrainingTime" -> 0.008031, 
                 "TrainingMemory" -> 87608, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.22507493659090505`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.38494552017692, 0.0013213968242072789`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.8051408355972031, 0.006723571181421663]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.3830714494002845`, 0.0010779483048646336`], 
                 "Accuracy" -> 
                 PlusMinus[0.8227481490855971, 0.0073460707206050605`], 
                 "EvaluationTime" -> 1.981225842076201*^-6, "TestSize" -> 
                 5433, "TrainingSize" -> 1000, "TrainingTime" -> 0.013015, 
                 "TrainingMemory" -> 257048, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.2257367517720928,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.3830714494002845`, 0.0007622245561383262]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.8227481490855971, 0.005194456421615786]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.3710557444922982`, 0.002138914896123978], 
                 "Accuracy" -> 
                 PlusMinus[0.7269835453251401, 0.017587852596423478`], 
                 "EvaluationTime" -> 1.6029526029526026`*^-6, "TestSize" -> 
                 1287, "TrainingSize" -> 5146, "TrainingTime" -> 0.02836, 
                 "TrainingMemory" -> 1251576, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.2296390257198577,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.3710557444922982`, 0.0015124412274301847`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7269835453251401, 0.012436489837440466`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1.6029526029526026`*^-6, 
                "MeanCrossEntropy" -> 
                PlusMinus[1.3710557444922982`, 0.002138914896123978], 
                "ModelMemory" -> 8824, "TrainingMemory" -> 1251576, 
                "TrainingTime" -> 0.04238200553828216], "Index" -> 6], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.0137231412591237`, 0.04859599132407378], 
                 "Accuracy" -> 
                 PlusMinus[0.5988654609404324, 0.07338414994482384], 
                 "EvaluationTime" -> 5.749642857142857*^-6, "TestSize" -> 
                 2100, "TrainingSize" -> 10, "TrainingTime" -> 
                 0.023100000000000002`, "TrainingMemory" -> 70050., 
                 "ModelMemory" -> 8824., "ExperimentCount" -> 3, 
                 "ModelUtility" -> 0.412382404046499, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.1527205469684638`, 0.04158961092040211], 
                   PlusMinus[1.0763529913897516`, 0.024647828066512844`], 
                   PlusMinus[0.988331911718527, 0.01176471850540709]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.72808169784625, 0.016904118973722224`], 
                   PlusMinus[0.48366309721639317`, 0.018848554585587592`], 
                   PlusMinus[0.5540986060329111, 0.018706289362028422`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.5346198542653252, 0.021937134039216818`], 
                 "Accuracy" -> 
                 PlusMinus[0.823708481491672, 0.02063322545585776], 
                 "EvaluationTime" -> 3.454285714285714*^-6, "TestSize" -> 700,
                  "TrainingSize" -> 50, "TrainingTime" -> 0.017539, 
                 "TrainingMemory" -> 73472, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 1.4867488894447365`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.5346198542653252, 0.015511896238928449`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.823708481491672, 0.014589893637587914`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.34113754293948334`, 0.019086196574851607`], 
                 "Accuracy" -> 
                 PlusMinus[0.8764566201963025, 0.017985519532246492`], 
                 "EvaluationTime" -> 4.345714285714286*^-6, "TestSize" -> 700,
                  "TrainingSize" -> 250, "TrainingTime" -> 0.026003, 
                 "TrainingMemory" -> 94912, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 3.6299659037429346`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.34113754293948334`, 0.013495979025137026`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.8764566201963025, 0.012717682824414597`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.21355136400403407`, 0.005426296493829688], 
                 "Accuracy" -> 
                 PlusMinus[0.9428828196910006, 0.0045255994486535795`], 
                 "EvaluationTime" -> 1.9416528621387816`*^-6, "TestSize" -> 
                 5433, "TrainingSize" -> 1000, "TrainingTime" -> 0.049838, 
                 "TrainingMemory" -> 257112, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 9.376035270249128, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.21355136400403407`, 0.003836971047515759]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9428828196910006, 0.0032000820590770466`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.12873907240934532`, 0.008158202148104384], 
                 "Accuracy" -> 
                 PlusMinus[0.9783100497293518, 0.006044464243439847], 
                 "EvaluationTime" -> 2.1748251748251752`*^-6, "TestSize" -> 
                 1287, "TrainingSize" -> 5146, "TrainingTime" -> 0.151937, 
                 "TrainingMemory" -> 1251624, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 25.41363608147759, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.12873907240934532`, 0.005768720061215269]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9783100497293518, 0.00427408165517593]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 2.1748251748251752`*^-6, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.12873907240934532`, 0.008158202148104384], 
                "ModelMemory" -> 8824, "TrainingMemory" -> 1251624, 
                "TrainingTime" -> 0.21303601263116984`], "Index" -> 7], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.*^-6], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.675679862546739, 7.073968061250346], "Accuracy" -> 
                 PlusMinus[0.7406585341902556, 0.055978762619634276`], 
                 "EvaluationTime" -> 4.024557226399332*^-6, "TestSize" -> 
                 3500, "TrainingSize" -> 10, "TrainingTime" -> 
                 0.021764000000000002`, "TrainingMemory" -> 70338., 
                 "ModelMemory" -> 8824., "ExperimentCount" -> 3, 
                 "ModelUtility" -> 0.09884109851369056, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[21.605540575581305`, 2.0752476397569533`], 
                   PlusMinus[22.046924165755737`, 1.1969063335452814`], 
                   PlusMinus[0.6084892412012722, 0.05828606937659227]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7900817488072764, 0.015509440169889201`], 
                   PlusMinus[0.6479244578536848, 0.010958397423087374`], 
                   PlusMinus[0.8311017352844918, 0.012632449626835528`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.18741818581167027`, 0.05429934726197771], 
                 "Accuracy" -> 
                 PlusMinus[0.948722356273465, 0.011755631127033251`], 
                 "EvaluationTime" -> 4.1100000000000005`*^-6, "TestSize" -> 
                 800, "TrainingSize" -> 50, "TrainingTime" -> 0.021185, 
                 "TrainingMemory" -> 73440, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 10.9869610480219, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.18741818581167027`, 0.038395436662947625`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.948722356273465, 0.008312486487052868]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.03986088218407762, 0.014189990736382954`], 
                 "Accuracy" -> 
                 PlusMinus[0.9694799385576971, 0.008547935169492659], 
                 "EvaluationTime" -> 3.4*^-6, "TestSize" -> 1000, 
                 "TrainingSize" -> 250, "TrainingTime" -> 0.022176, 
                 "TrainingMemory" -> 95016, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 236.91573870060978`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.03986088218407762, 0.010033838674670677`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9694799385576971, 0.006044302923491239]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.018281353002759456`, 0.0029957978291365274`], 
                 "Accuracy" -> 
                 PlusMinus[0.9892178555615082, 0.002802870642917517], 
                 "EvaluationTime" -> 2.11*^-6, "TestSize" -> 3700, 
                 "TrainingSize" -> 1000, "TrainingTime" -> 0.045982, 
                 "TrainingMemory" -> 257176, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 1211.7117694565984`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.018281353002759456`, 0.0021183489600463765`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9892178555615082, 0.001981928838395674]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.01628906883420366, 0.003307094402126371], 
                 "Accuracy" -> 
                 PlusMinus[0.9954056422677338, 0.001639707632832321], 
                 "EvaluationTime" -> 2.124320124320124*^-6, "TestSize" -> 
                 2574, "TrainingSize" -> 5146, "TrainingTime" -> 
                 0.1393273333333333, "TrainingMemory" -> 
                 1.2538826666666665`*^6, "ModelMemory" -> 8824., 
                 "ExperimentCount" -> 2, "ModelUtility" -> 
                 1503.3582655236287`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.02024022202395721, 0.005413635264555691], 
                   PlusMinus[0.015441022649935075`, 0.0025080535830551867`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9948954201793531, 0.002306953823493742], 
                   PlusMinus[0.9958452242541955, 0.0021413083833234344`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 2.124320124320124*^-6, "MeanCrossEntropy" -> 
                PlusMinus[0.01628906883420366, 0.003307094402126371], 
                "ModelMemory" -> 8824., "TrainingMemory" -> 
                1.2538826666666665`*^6, "TrainingTime" -> 
                0.19593670410674954`], "Index" -> 8], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 100.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.364047352523355, 0.003220735148836995], 
                 "Accuracy" -> 
                 PlusMinus[0.4523405431625994, 0.09698500190513712], 
                 "EvaluationTime" -> 4.259527777777777*^-6, "TestSize" -> 
                 2600, "TrainingSize" -> 10, "TrainingTime" -> 
                 0.010060999999999999`, "TrainingMemory" -> 64436., 
                 "ModelMemory" -> 8824., "ExperimentCount" -> 3, 
                 "ModelUtility" -> 0.2319305261506659, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.368256718765819, 0.004080032717283601], 
                   PlusMinus[1.360045547165718, 0.0035449923252138084`], 
                   PlusMinus[1.3649364095244507`, 0.003682158467353197]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6587850823196979, 0.017897465499256773`], 
                   PlusMinus[0.40269634742926125`, 0.015419935190520397`], 
                   PlusMinus[0.3445228604342846, 0.01573064883969228]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.276545948755979, 0.006411349529251277], 
                 "Accuracy" -> 
                 PlusMinus[0.7024832125872359, 0.024512767487386032`], 
                 "EvaluationTime" -> 4.051428571428571*^-6, "TestSize" -> 700,
                  "TrainingSize" -> 50, "TrainingTime" -> 0.013077, 
                 "TrainingMemory" -> 69088, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.2645342668471926,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.276545948755979, 0.0045335087286907565`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7024832125872359, 0.01733314411597979]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.05111441538125, 0.005334209584209395], 
                 "Accuracy" -> 
                 PlusMinus[0.8233730936655865, 0.008916659445767373], 
                 "EvaluationTime" -> 2.4062162162162165`*^-6, "TestSize" -> 
                 3700, "TrainingSize" -> 250, "TrainingTime" -> 0.017071, 
                 "TrainingMemory" -> 102424, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.39016271448247425`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.05111441538125, 0.003771855769264737]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.8233730936655865, 0.006305030359633192]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7849902313392376, 0.007046545128592394], 
                 "Accuracy" -> 
                 PlusMinus[0.8337830133659839, 0.0071588437579452715`], 
                 "EvaluationTime" -> 1.2578685808945333`*^-6, "TestSize" -> 
                 5433, "TrainingSize" -> 1000, "TrainingTime" -> 0.033966, 
                 "TrainingMemory" -> 257112, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6984581436530792,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7849902313392376, 0.004982659844364714]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.8337830133659839, 0.005062066966698088]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.5319211424391418, 0.016287365908248756`], 
                 "Accuracy" -> 
                 PlusMinus[0.8357041658876713, 0.014684326131490271`], 
                 "EvaluationTime" -> 1.5990675990675991`*^-6, "TestSize" -> 
                 1287, "TrainingSize" -> 5146, "TrainingTime" -> 0.109891, 
                 "TrainingMemory" -> 1251688, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 1.5080973735114012`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.5319211424391418, 0.011516906881389285`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.8357041658876713, 0.010383386584731593`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1.5990675990675991`*^-6, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.5319211424391418, 0.016287365908248756`], 
                "ModelMemory" -> 8824, "TrainingMemory" -> 1251688, 
                "TrainingTime" -> 0.14743542732219198`], "Index" -> 9], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 10.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.2519570834087985`, 0.011058529116340995`], 
                 "Accuracy" -> 
                 PlusMinus[0.5013422729548078, 0.09162010838022339], 
                 "EvaluationTime" -> 5.734330357142857*^-6, "TestSize" -> 
                 2000, "TrainingSize" -> 10, "TrainingTime" -> 0.01293425, 
                 "TrainingMemory" -> 67548., "ModelMemory" -> 8824., 
                 "ExperimentCount" -> 3, "ModelUtility" -> 
                 0.27460908913901494`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.2623819714965205`, 0.0063699907591150545`], 
                   PlusMinus[1.2284638527289866`, 0.009327012379876258], 
                   PlusMinus[1.2529323180357226`, 0.00861476873484705]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6723148532722366, 0.01775053094000785], 
                   PlusMinus[0.40902614329241965`, 0.01727779433183385], 
                   PlusMinus[0.39062118495391035`, 0.021780989846495413`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.9413496598667809, 0.01606731729071911], 
                 "Accuracy" -> 
                 PlusMinus[0.7332507248265541, 0.025660852402411238`], 
                 "EvaluationTime" -> 4.391666666666667*^-6, "TestSize" -> 600,
                  "TrainingSize" -> 50, "TrainingTime" -> 0.01766, 
                 "TrainingMemory" -> 73232, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.48413325293608567`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.9413496598667809, 0.011361309011743348`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7332507248265541, 0.018144962744772095`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6277748263930601, 0.00915121307630689], 
                 "Accuracy" -> 
                 PlusMinus[0.838978445760268, 0.008168491547066163], 
                 "EvaluationTime" -> 2.2763414634146344`*^-6, "TestSize" -> 
                 4100, "TrainingSize" -> 250, "TrainingTime" -> 0.021368, 
                 "TrainingMemory" -> 95048, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 1.08965861067016, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6277748263930601, 0.0064708848223396075`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.838978445760268, 0.005775995764995477]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.42734405127845704`, 0.0076130966043180025`], 
                 "Accuracy" -> 
                 PlusMinus[0.8524619365126909, 0.006834094738471107], 
                 "EvaluationTime" -> 1.959138597459967*^-6, "TestSize" -> 
                 5433, "TrainingSize" -> 1000, "TrainingTime" -> 0.049675, 
                 "TrainingMemory" -> 257048, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 2.3484552786293484`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.42734405127845704`, 0.0053832722347415375`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.8524619365126909, 0.004832434732844225]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.2716149932945454, 0.012333911086464415`], 
                 "Accuracy" -> 
                 PlusMinus[0.934269580567183, 0.009941776899401025], 
                 "EvaluationTime" -> 2.0885780885780885`*^-6, "TestSize" -> 
                 1287, "TrainingSize" -> 5146, "TrainingTime" -> 0.196082, 
                 "TrainingMemory" -> 1251576, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 5.749983109570474, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.2716149932945454, 0.008721392167790925]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.934269580567183, 0.007029897862610233]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 2.0885780885780885`*^-6, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.2716149932945454, 0.012333911086464415`], 
                "ModelMemory" -> 8824, "TrainingMemory" -> 1251576, 
                "TrainingTime" -> 0.2580558018849592], "Index" -> 10], 
            Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 60], "LearningRate" -> 
                Association["Value" -> 0.04], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 4], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 15], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6126918278008991, 0.06303393596991604], 
                 "Accuracy" -> 
                 PlusMinus[0.7750825959330814, 0.05969779597751166], 
                 "EvaluationTime" -> 0.00012947, "TestSize" -> 100, 
                 "TrainingSize" -> 50, "TrainingTime" -> 0.076404, 
                 "TrainingMemory" -> 1420880, "ModelMemory" -> 377112, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 1.1047071377590498`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6126918278008991, 0.044571723569206266`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7750825959330814, 0.04221271635758949]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.2648117837490078, 0.044770948443322994`], 
                 "Accuracy" -> 
                 PlusMinus[0.956331465768601, 0.021909986424587358`], 
                 "EvaluationTime" -> 0.00013075, "TestSize" -> 200, 
                 "TrainingSize" -> 250, "TrainingTime" -> 0.196017, 
                 "TrainingMemory" -> 2121080, "ModelMemory" -> 405832, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 5.763187998523872, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.2648117837490078, 0.03165784124442699]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.956331465768601, 0.015492699976530917`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.385054812618793, 0.002816716071768008], 
                 "Accuracy" -> 
                 PlusMinus[0.1322273141922723, 0.011726385726723814`], 
                 "EvaluationTime" -> 8.2665*^-6, "TestSize" -> 1500, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.009884, 
                 "TrainingMemory" -> 61920., "ModelMemory" -> 20240., 
                 "ExperimentCount" -> 3, "ModelUtility" -> 0.2249777695519398,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.385054812618793, 0.0048786953467980145`], 
                   PlusMinus[1.385054812618793, 0.0048786953467980145`], 
                   PlusMinus[1.385054812618793, 0.0048786953467980145`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.14314515935118607`, 0.015521111770101768`], 
                   PlusMinus[0.13858585241801832`, 0.015302895214658578`], 
                   PlusMinus[0.11747664887153136`, 0.014266541528951831`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.20721114867643708`, 0.015756338469823866`], 
                 "Accuracy" -> 
                 PlusMinus[0.9731023979132799, 0.012931350236123754`], 
                 "EvaluationTime" -> 0.000166145, "TestSize" -> 200, 
                 "TrainingSize" -> 1000, "TrainingTime" -> 0.315492, 
                 "TrainingMemory" -> 2931944, "ModelMemory" -> 429720, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 9.7607929238802, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.20721114867643708`, 0.015756338469823866`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9731023979132799, 0.012931350236123754`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.17956306167257052`, 0.008842944562665394], 
                 "Accuracy" -> 
                 PlusMinus[0.9786215483751459, 0.009700595782620083], 
                 "EvaluationTime" -> 0.00017182333333333333`, "TestSize" -> 
                 300, "TrainingSize" -> 5146, "TrainingTime" -> 0.439508, 
                 "TrainingMemory" -> 4636784, "ModelMemory" -> 474376, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 13.13631622016751, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.17956306167257052`, 0.008842944562665394]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9786215483751459, 0.009700595782620083]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00017182333333333333`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.17956306167257052`, 0.008842944562665394], 
                "ModelMemory" -> 474376, "TrainingMemory" -> 4636784, 
                "TrainingTime" -> 0.6258317038476486], "Index" -> 11], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.01], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[3.0614086177632895`, 0.39050779253631734`], 
                 "Accuracy" -> 
                 PlusMinus[0.7063623780198118, 0.06364636492421402], 
                 "EvaluationTime" -> 3.742666666666667*^-6, "TestSize" -> 
                 3300, "TrainingSize" -> 10, "TrainingTime" -> 
                 0.040334666666666665`, "TrainingMemory" -> 92677.33333333333,
                  "ModelMemory" -> 8824., "ExperimentCount" -> 2, 
                 "ModelUtility" -> 0.04382310002127776, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[3.6569563053863097`, 0.2861777653315563], 
                   PlusMinus[2.917807308089182, 0.14052604292435333`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7867029184019546, 0.013065199217063754`], 
                   PlusMinus[0.6603900890082892, 0.009883180476572195]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.14771315886085562`, 0.005113678397758486], 
                 "Accuracy" -> 
                 PlusMinus[0.9554145299813396, 0.0037349715813589095`], 
                 "EvaluationTime" -> 1.5550681497728343`*^-6, "TestSize" -> 
                 6383, "TrainingSize" -> 50, "TrainingTime" -> 0.02528, 
                 "TrainingMemory" -> 73576, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 19.525191751931924`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.14771315886085562`, 0.003615916671862184]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9554145299813396, 0.0026410237327179277`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.07967978022422684, 0.004133916958729954], 
                 "Accuracy" -> 
                 PlusMinus[0.983019095036725, 0.0032331643308833985`], 
                 "EvaluationTime" -> 2.3756410256410255`*^-6, "TestSize" -> 
                 3900, "TrainingSize" -> 250, "TrainingTime" -> 0.027743, 
                 "TrainingMemory" -> 94808, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 66.64449908856687, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.07967978022422684, 0.0029231207143800195`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.983019095036725, 0.0022861924230581174`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.0522734566760163, 0.002876184019628389], 
                 "Accuracy" -> 
                 PlusMinus[0.9931249045088397, 0.0018035955410533621`], 
                 "EvaluationTime" -> 1.713602061476164*^-6, "TestSize" -> 
                 5433, "TrainingSize" -> 1000, "TrainingTime" -> 0.095425, 
                 "TrainingMemory" -> 257176, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 154.6530098901106, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.0522734566760163, 0.002033769224219616]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9931249045088397, 0.0012753346375966525`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.033716424464932955`, 0.00565461631616142], 
                 "Accuracy" -> 
                 PlusMinus[0.9949185489310793, 0.0032462355552018564`], 
                 "EvaluationTime" -> 2.098679098679099*^-6, "TestSize" -> 
                 1287, "TrainingSize" -> 5146, "TrainingTime" -> 0.114703, 
                 "TrainingMemory" -> 1251576, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 355.70291879482045`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.033716424464932955`, 0.003998417542165835]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9949185489310793, 0.0022954351744121095`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 2.098679098679099*^-6, "MeanCrossEntropy" -> 
                PlusMinus[0.033716424464932955`, 0.00565461631616142], 
                "ModelMemory" -> 8824, "TrainingMemory" -> 1251576, 
                "TrainingTime" -> 0.18372456153646843`], "Index" -> 12], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1000.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.3725671786607354`, 0.0009934960415870788], 
                 "Accuracy" -> 
                 PlusMinus[0.7261091500855792, 0.007905235881014471], 
                 "EvaluationTime" -> 1.7159642801190661`*^-6, "TestSize" -> 
                 6383, "TrainingSize" -> 50, "TrainingTime" -> 0.009038, 
                 "TrainingMemory" -> 66832, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.22921019779326546`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.3725671786607354`, 0.0007025077880882157]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7261091500855792, 0.005589845898344544]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.3218638206967286`, 0.0020574741522502117`], 
                 "Accuracy" -> 
                 PlusMinus[0.807822555003583, 0.009203098364407577], 
                 "EvaluationTime" -> 2.475945945945946*^-6, "TestSize" -> 
                 3700, "TrainingSize" -> 250, "TrainingTime" -> 0.031617, 
                 "TrainingMemory" -> 102992, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.24704900310436465`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.3218638206967286`, 0.0014548539251721677`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.807822555003583, 0.006507573261399421]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.1882519829886935`, 0.0029636138677551463`], 
                 "Accuracy" -> 
                 PlusMinus[0.828028023465796, 0.0072637781127346465`], 
                 "EvaluationTime" -> 2.00754647524388*^-6, "TestSize" -> 5433,
                  "TrainingSize" -> 1000, "TrainingTime" -> 0.023882, 
                 "TrainingMemory" -> 257048, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.3056163825200093,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.1882519829886935`, 0.002095591462708156]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.828028023465796, 0.00513626676054909]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.9165197457815709, 0.013390274448252606`], 
                 "Accuracy" -> 
                 PlusMinus[0.8063483771212557, 0.01563993218557926], 
                 "EvaluationTime" -> 1.6293706293706293`*^-6, "TestSize" -> 
                 1287, "TrainingSize" -> 5146, "TrainingTime" -> 0.063986, 
                 "TrainingMemory" -> 1251384, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5112212925529758,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.9165197457815709, 0.009468353864308374]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.8063483771212557, 0.011059102105720834`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1.6293706293706293`*^-6, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.9165197457815709, 0.013390274448252606`], 
                "ModelMemory" -> 8824, "TrainingMemory" -> 1251384, 
                "TrainingTime" -> 0.08902671706179557], "Index" -> 13], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.1], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.2784654207547418, 0.006537123493124136], 
                 "Accuracy" -> 
                 PlusMinus[0.9068441027421862, 0.005189245119466232], 
                 "EvaluationTime" -> 1.5647814507284975`*^-6, "TestSize" -> 
                 6383, "TrainingSize" -> 50, "TrainingTime" -> 0.021301, 
                 "TrainingMemory" -> 73168, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 5.518432915014884, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.2784654207547418, 0.004622444351441967]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9068441027421862, 0.0036693504132137684`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.16625697304173964`, 0.004535932277434431], 
                 "Accuracy" -> 
                 PlusMinus[0.9588552760303718, 0.003658121899985522], 
                 "EvaluationTime" -> 1.5877405790069545`*^-6, "TestSize" -> 
                 6183, "TrainingSize" -> 250, "TrainingTime" -> 0.024285, 
                 "TrainingMemory" -> 94824, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 15.457546055052692`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.16625697304173964`, 0.0032073884723768263`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9588552760303718, 0.00258668280188678]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.10240263521016923`, 0.0036960192591377044`], 
                 "Accuracy" -> 
                 PlusMinus[0.983902635728364, 0.002564423015225731], 
                 "EvaluationTime" -> 1.9917172832689122`*^-6, "TestSize" -> 
                 5433, "TrainingSize" -> 1000, "TrainingTime" -> 0.045607, 
                 "TrainingMemory" -> 257288, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 40.60290859471583, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.10240263521016923`, 0.00261348028153235]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.983902635728364, 0.0018133209038969673`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.061282159928408256`, 0.005967790121964582], 
                 "Accuracy" -> 
                 PlusMinus[0.9946356211504955, 0.003342782507828458], 
                 "EvaluationTime" -> 2.2315462315462315`*^-6, "TestSize" -> 
                 1287, "TrainingSize" -> 5146, "TrainingTime" -> 0.205007, 
                 "TrainingMemory" -> 1253336, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 110.66349337003976`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.061282159928408256`, 0.004219864863939249]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9946356211504955, 0.0023637041793172758`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 2.2315462315462315`*^-6, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.061282159928408256`, 0.005967790121964582], 
                "ModelMemory" -> 8824, "TrainingMemory" -> 1253336, 
                "TrainingTime" -> 0.2775796690633502], "Index" -> 14], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.*^6], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.3855906668715796`, 0.0018701779040952323`], 
                 "Accuracy" -> 
                 PlusMinus[0.8054126227617695, 0.009503757293056461], 
                 "EvaluationTime" -> 2.364*^-6, "TestSize" -> 3500, 
                 "TrainingSize" -> 250, "TrainingTime" -> 0.007417, 
                 "TrainingMemory" -> 87320, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.22486535410453598`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.3855906668715796`, 0.0013224154780109834`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.8054126227617695, 0.00672017122867133]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.3858310083880776`, 0.0007858515933646616], 
                 "Accuracy" -> 
                 PlusMinus[0.8228000686613693, 0.007335172875021802], 
                 "EvaluationTime" -> 1.2265783176882016`*^-6, "TestSize" -> 
                 5433, "TrainingSize" -> 1000, "TrainingTime" -> 0.009648, 
                 "TrainingMemory" -> 257048, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.22485773676063425`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.3858310083880776`, 0.0005556809906744055]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.8228000686613693, 0.005186750481103539]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.3844755924484937`, 0.0020913922668890665`], 
                 "Accuracy" -> 
                 PlusMinus[0.7269608285386856, 0.017588757703312623`], 
                 "EvaluationTime" -> 1.5726495726495724`*^-6, "TestSize" -> 
                 1287, "TrainingSize" -> 5146, "TrainingTime" -> 0.02227, 
                 "TrainingMemory" -> 1251688, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.22521323077228042`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.3844755924484937`, 0.0014788376540383647`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7269608285386856, 0.01243712984465948]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1.5726495726495724`*^-6, 
                "MeanCrossEntropy" -> 
                PlusMinus[1.3844755924484937`, 0.0020913922668890665`], 
                "ModelMemory" -> 8824, "TrainingMemory" -> 1251688, 
                "TrainingTime" -> 0.03525666381655655], "Index" -> 15], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.049965261722318785`, 0.0034867738049960497`], 
                 "Accuracy" -> 
                 PlusMinus[0.9806508186904974, 0.0026014440822271913`], 
                 "EvaluationTime" -> 1.519650655021834*^-6, "TestSize" -> 
                 6183, "TrainingSize" -> 250, "TrainingTime" -> 0.025705, 
                 "TrainingMemory" -> 95232, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 168.28742167267777`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.049965261722318785`, 0.0024655214019763273`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9806508186904974, 0.0018394987514204614`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.029138698188001556`, 0.0025284778144568504`], 
                 "Accuracy" -> 
                 PlusMinus[0.9933048737435376, 0.0017876220087532102`], 
                 "EvaluationTime" -> 1.601325234676974*^-6, "TestSize" -> 
                 5433, "TrainingSize" -> 1000, "TrainingTime" -> 0.043227, 
                 "TrainingMemory" -> 257048, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 491.5206189574198, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.029138698188001556`, 0.00178790380868218]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9933048737435376, 0.0012640396445877126`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.02382605995660533, 0.006800288874778782], 
                 "Accuracy" -> 
                 PlusMinus[0.9948954201793531, 0.0032625253849533175`], 
                 "EvaluationTime" -> 2.147630147630148*^-6, "TestSize" -> 
                 1287, "TrainingSize" -> 5146, "TrainingTime" -> 0.154327, 
                 "TrainingMemory" -> 1251448, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 680.9330734400253, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.02382605995660533, 0.004808530377383513]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9948954201793531, 0.002306953823493742]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 2.147630147630148*^-6, "MeanCrossEntropy" -> 
                PlusMinus[0.02382605995660533, 0.006800288874778782], 
                "ModelMemory" -> 8824, "TrainingMemory" -> 1251448, 
                "TrainingTime" -> 0.2186287448503692], "Index" -> 16], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.00001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.06165508765592636, 0.008769614687194205], 
                 "Accuracy" -> 
                 PlusMinus[0.9776895201347929, 0.002771490177480468], 
                 "EvaluationTime" -> 1.7271551027009542`*^-6, "TestSize" -> 
                 6183, "TrainingSize" -> 250, "TrainingTime" -> 0.029646, 
                 "TrainingMemory" -> 95064, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 107.42984119197135`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.06165508765592636, 0.006201054013708166]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9776895201347929, 0.001959739498488347]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.022146163502403372`, 0.004027659698656705], 
                 "Accuracy" -> 
                 PlusMinus[0.992327875998342, 0.0017909542178167533`], 
                 "EvaluationTime" -> 1.2992821645499722`*^-6, "TestSize" -> 
                 5433, "TrainingSize" -> 1000, "TrainingTime" -> 0.044262, 
                 "TrainingMemory" -> 257288, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 819.9688279914463, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.022146163502403372`, 0.0028479854852319223`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.992327875998342, 0.0012663958722128753`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.02028654214368837, 0.00764037534622073], 
                 "Accuracy" -> 
                 PlusMinus[0.9948954201793531, 0.0032625253849533175`], 
                 "EvaluationTime" -> 2.0505050505050506`*^-6, "TestSize" -> 
                 1287, "TrainingSize" -> 5146, "TrainingTime" -> 0.164136, 
                 "TrainingMemory" -> 1251624, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 907.6777581739991, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.02028654214368837, 0.005402561218123193]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9948954201793531, 0.002306953823493742]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 2.0505050505050506`*^-6, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.02028654214368837, 0.00764037534622073], 
                "ModelMemory" -> 8824, "TrainingMemory" -> 1251624, 
                "TrainingTime" -> 0.23483194792071513`], "Index" -> 17], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 10000.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.3583241736048737`, 0.0008819447041108257], 
                 "Accuracy" -> 
                 PlusMinus[0.8239557111225503, 0.007317151804919066], 
                 "EvaluationTime" -> 1.3502668875391128`*^-6, "TestSize" -> 
                 5433, "TrainingSize" -> 1000, "TrainingTime" -> 0.014921, 
                 "TrainingMemory" -> 257112, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.23404924370642552`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.3583241736048737`, 0.000623629080908328]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.8239557111225503, 0.005174007660229657]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.2634140284398008`, 0.004688625080753867], 
                 "Accuracy" -> 
                 PlusMinus[0.7422786714724197, 0.0172640997813269], 
                 "EvaluationTime" -> 1.588966588966589*^-6, "TestSize" -> 
                 1287, "TrainingSize" -> 5146, "TrainingTime" -> 0.043262, 
                 "TrainingMemory" -> 1251688, "ModelMemory" -> 8824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.27020355387020734`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.2634140284398008`, 0.0033153585890423835`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7422786714724197, 0.012207562026457442`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1.588966588966589*^-6, "MeanCrossEntropy" -> 
                PlusMinus[1.2634140284398008`, 0.004688625080753867], 
                "ModelMemory" -> 8824, "TrainingMemory" -> 1251688, 
                "TrainingTime" -> 0.06900270345899728], "Index" -> 18]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration[
               "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
                "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
               TypeSystem`AnyLength]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "TrainingSize", "TrainingTime", "TrainingMemory", 
                 "ModelMemory", "ExperimentCount", "ModelUtility", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 
                 TypeSystem`Vector[
                 TypeSystem`AnyType, TypeSystem`AnyLength]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 18], 
           Association["ID" -> 239693701995386]], "MaxTrainingSize" -> 6433, 
         "LastReportingTime" -> 3.764663417107544`16.32830114296966*^9, 
         "PreprocessorEvaluationTime" -> 3.2236328125`2.*^-6, 
         "PreprocessorMemory" -> 48112, "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 10, "TimeBudgets" -> 1.0240000000000005`, 
             "ElapsedTimes" -> 1.2267860000000002`, "ExperimentCounts" -> 35], 
            Association[
            "TrainingSizes" -> 50, "TimeBudgets" -> 1.28, "ElapsedTimes" -> 
             1.311809, "ExperimentCounts" -> 14], 
            Association[
            "TrainingSizes" -> 250, "TimeBudgets" -> 1.6000000000000005`, 
             "ElapsedTimes" -> 1.6835140000000002`, "ExperimentCounts" -> 17], 
            Association[
            "TrainingSizes" -> 1000, "TimeBudgets" -> 2., "ElapsedTimes" -> 
             2.0724590000000003`, "ExperimentCounts" -> 18], 
            Association[
            "TrainingSizes" -> 5146, "TimeBudgets" -> 2.5, "ElapsedTimes" -> 
             2.6017390000000002`, "ExperimentCounts" -> 19]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 5], 
           Association[
           "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
              Dataset`DatasetHandle[239702291929978]], "ID" -> 
            239706586897274]]], "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {330}, "ID" -> 
              8102574889493170096], "f2" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {731}, "ID" -> 
              6701357641463675607]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> 
            False]], "TrainingTime" -> 9.85202, "MaxTrainingMemory" -> 
         6122648, "DataMemory" -> 1185464, "FunctionMemory" -> 385808, 
         "LanguageVersion" -> {11.3, 0}, "Date" -> 
         DateObject[{2019, 4, 19, 11, 50, 17.632145`7.99888013318083}, 
           "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association["Input" -> CompressedData["
1:eJxNnHuMVuWdx9/bvDPCQokFHRPEggZGgQZ1GZsBCt3AWNBwKbhBKGi4FDEC
HdyMsGDDZcUGsY6GS5EGhmVoEIoYLoUahB3oclnAAC7QIAg0XDbQABpoFBrY
85nzefLwx3B43/ec5/ldvt/v7/c857xv+zFTfjY5l8lk/rtZJsNxe/LPF8lx
bfL3bvK3IPm7kLy3MPnblPzl8pnMs8l7A5P/d81mMg/4uk8xk2mTHCuT99on
7z2V/P908leR/L2QTV9vSI53kr/bXv90cuyQvH4z+TtVksmMTF63Td4/k1x/
Pjm+lRznOR7jHknem5yck09eDyxN59uYvPdwLr2uMXn/aPLeouT/s5K/95LX
3ZLj1uR4K5PaOyKTznc2m16Pfb2Sv5O51N4/5lM7GHdnJrWXOPxGP4nDo8l7
Ddn08/uT1yuT48fJ6xPJX8fk9d3keDg5zkiuqU4++17yujZ5/brzM/6Y5PUj
yfFyMR13QDb1u13y/z8l/z+Y/GWNz/5MOl6nXBoP/O2b/L2Y/H1SyGQeTz7/
J+2bmny+JZPa910u9aeX9tUYz3XJ60IxHb/OecnP0OR4PHndI5f62zx5b1g2
jdvwXDo+8W+RT+17Jpva+3Y2jfOh5Dgzm+YbnGA3+DiW/G1L3rsvl173ZC6N
w5e5FF9TwFmS/yHJcXEmjStx3pv8fWu89yXvdc6nccR+5n0nl8bl+7nUb15P
y6Tjg99V4uERzyceP8inn5Mn7FyTS/3kc+LRMpvO2yAuX0n+vhYHP8mm8bmS
Te0r8frpxh+7r5ek8e6ZSeNB3Bj3w2yKQ+a5pt/N5cFpcTQ3OZYlx3PJuT/L
p9eRN/CAX2+Yd/D0X+J0s+PNl7fE/WY2zRN4Yf6Hsmk8njXf+A0/yPfobDoO
OAVH+Is9T4inWu0r1294wXmXk/+/L55759PxJyTH7aUprxd6HXHZKp+xe2Fp
6venhZR/e3Jp3s7fw5t14gCeT1Y/lifvX8qkvIVX98vrOerKefOITjyXTeN7
0zzt1I8t8ho+nxJ32/SL8cE1fh1Ijv8ub/B7qfoDjv9hXubIA+ycK59fyqb+
gq/N4pP4TEqOV/UL/HAePOT9bcb/FfPSsTQdn3yjk/WZdF54+JZ6hv0VJSmu
WxVS3mA/eMdveEZ8GH+HPCA/g3KpP+C42rgR3wfzKY7xs4s6Bs52Z1Ndva0+
Pa6fJ9SzFvJxdTaNB/h8xfgvL03x82+F1M7F2gGPPsulOoHft3x/tDpfJZ8X
iEf4yjx9xd1wcUWeqEfkZYn6PdY6FfIOvp53fuIBTsnP4+Yd/9AXcHbD+kK8
uievx2XSeMPb2bk0D2Pl305x2Eu97afuTMymeSaulepstfhAV5gfv+EH86CP
f7snf7uNI59flNfPF2KdelY84ne1nzPvauvrI/L/kPUtb7zJ7ynnW6AuTRO/
6DN2FdQZ9Gmp75823tS31plU78DDR+KbOsG42N/N+F62Ls6Xr9iDfq4Rn9vM
M7rHkfihd/Xic4117qj43+Xn4P1p9Qsdr7I+gGt07LB2HjTuzDse3S2mcWnt
9eTvivrwpDh8zrhP11/yj+6CQ+Ynn1OtX9Rj6tYt9Zu4gBv0eIh5ol5WiBfs
Az/Ed5H174J1HB63tb7Rd8HzZvIB3L9hnHdbh46okxecH3yCh/75FMc35XVe
vZ0rPuk7LjrOL9S1b53vz+KPeGBPg/HaLq/JB33Da+rtZHHHcYnx/Eh7eun/
JXHPfPAanT2vzlPfHrTfGJVPecs88AP7hxVTe8jLilyqe/vVifX5VH+I668L
aT6xg7rzgX3Q3+XL4Eysm49apxrtf14ynuC/lfowoBj7KOI7Wt6At0Z1Ff+u
2jf8r3UAfNSYrxXi8j51cLo6wWviP8N6Qd74/IzXbVFXhxgn8NvSPEw17+Sp
uTwDny3FITxBj7EDvuxR96/Lb3CMbvwhn8YFXjaaR+LCvNQ76iJ8gL/oQ7n+
39H+4epyX3k7U118Sl1Ap4jPN/IA/sHnLvL3h+KM83eqY53V9bx6C54WilvO
C/1r1jpAv4HegOc+2ZTfDdYr8rZbf+h30PNL4oB++bf5NJ7MB17II9fPEk8P
2K+Cc/q+n+cjvpqL6y3mk3j+i7gZJ2/A+5vqfwv7fvRzo/iukJfYib7Cg7B+
2mr8mX+HfTB5BU+cj84dVj/hLfWGfhh92Kg/c6wDjBvWKY/L45Xq7yDHqZFH
6DX6siyb4gpejyhJr6c/DvPD382OTx5Wi7fu9iXEfZh5wG7w8YuAt9LUH3Tt
cfN1zvy9KT976MdpeU/et6uL5O9FP4f/nE+cOqgrfeQx/TZ1A7zjJ/i7q64e
sm7ddd516jb+3fE19eg749pov4Ren1SvyNMz+n3IejvX+cHPcuMM79CxetcB
rxTTPgc7TogD/Nkj79Al6lFH/W0prtfIM/z4TJ7hX6XrRfLQXh4zzxz5Q/wZ
d7D+HZXn8JBjrXinP4EX4B18l4kvcD9S/r2gPeAbXWP83xVSPtabzyr71bbi
C90ER/SL1IW2XrdWPb5h/Vtg3ivVe/qspdYD4oie4+doz8eerLpxRl2mj/1E
vccedP0f1jfyy7gFdZg8oR/oL3nkc3SNefPq8ibzP0o+kZfJ4r6nnzMe+vKh
OK52nGGOUy/+X5Nn4HaG/eVE+fO1er9OfUDPZomHLuo4ecc/8PSF/jDvPHlW
K6+2iYd96hM6Tf7myYt22vOq9XGYdpxS1x7zffxjv4S+tMZ+cbp6yOcHzetT
6l3Oekd+v6df4GuBur3HvOMf4+4rievZ99RHcH5K/SE+x8QtvP65eayz/vUR
T8eLcV/itnHE/1vaVSleH7COE7cHjcND5h97wWPo89Hx5erhcfUDPXhYHA+R
j0O0Fxy1EycD5NVy84hdjY5LvOA7+o1e4Q/XkT9wTt2k3hKXBfKjUnz9VfwT
J3jZWt2o9jjG+kFfQR8w3zgwTyfjxXjNxEV5MY4HLlgPUd/ox78WL/SR6NsS
445/4OmMOh/6uvesH8TxoNcP8EhfQ10ijtSpbfIaHGXVx1Xmn7izj/eIdqyw
v4DH4PCCeWijPoDLbs57IxtxOlE9rrGvpI9pabzRvwnWje7y8Jr5QN/RX+oK
/EEXy41blXq2x33Gb60P6AF+PZGP+xzoM/yhPyLvxOuWxyrrGvo/0Xy/4by9
jBvxRm/myo9D1hnwTn5XmF94cth6v1B8wi/8oC9hH451DnydZf0GT9gHDl5w
3P7WlWesizfVN/Sn0n3Bs8WIJ+IDvulTiCfj16rT8PVRcZhX715SN/FzpvVv
oftCi80rfUAPcQIeuX62ehz2T9AH+BP6VsadYz5HyzNwQz/5I/tLcA0/Frje
o64+Zx0L+1hhfxRdGKC/2+Qhfo1X73rbp4Er4hn4QLz/w/z/cz7WP3jHdWGf
E5781no6Vd097joD/yaJ9/6uB4L+Yz/6hU6go519Hx0k3oyHP2OtV4F3jdob
eL/BukIdAW/o01Xna60OVerngGJcX6C/9EXNjdde9QacsL5i/l3mif6ws30M
/MBP9PGsuAPfu7WH+dgfHCnev1AP4NNJedRH3YHHg6wvY/28jfpJ3aTenBZ/
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
EA==
       "], 
      "Output" -> {
       "r2", "r1", "r1", "r2", "r2", "r2", "r2", "r5", "r1", "r1", "r1", "r1",
         "r2", "r2", "r1", "r5", "r3", "r2", "r3", "r1", "r1", "r5", "r2", 
        "r3", "r1", "r2", "r3", "r1", "r1", "r2", "r1", "r2", "r5", "r2", 
        "r2", "r5", "r2", "r2", "r2", "r3", "r2", "r2", "r1", "r2", "r1", 
        "r2", "r5", "r1", "r1", "r2", "r1", "r2", "r3", "r2", "r5", "r2", 
        "r2", "r3", "r5", "r3", "r2", "r5", "r3", "r1", "r3", "r5", "r1", 
        "r2", "r1", "r2", "r1", "r2", "r3", "r2", "r2", "r3", "r3", "r1", 
        "r1", "r5", "r1", "r2", "r2", "r1", "r2", "r1", "r2", "r3", "r1", 
        "r1", "r1", "r1", "r2", "r2", "r2", "r1", "r1", "r3", "r3", "r2", 
        "r3", "r2", "r2", "r2", "r5", "r1", "r2", "r3", "r1", "r1", "r2", 
        "r2", "r2", "r5", "r3", "r1", "r2", "r5", "r1", "r2", "r2", "r1", 
        "r2", "r1", "r3", "r2", "r2", "r1", "r3", "r5", "r2", "r1", "r2", 
        "r2", "r1", "r1", "r5", "r2", "r2", "r2", "r5", "r5", "r2", "r2", 
        "r2", "r1", "r1", "r2", "r3", "r3", "r1", "r2", "r1", "r1", "r2", 
        "r2", "r2", "r1", "r3", "r2", "r3", "r5", "r1", "r1", "r5", "r1", 
        "r1", "r2", "r2", "r1", "r1", "r2", "r2", "r3", "r2", "r3", "r5", 
        "r1", "r1", "r1", "r2", "r5", "r5", "r2", "r1", "r2", "r1", "r1", 
        "r1", "r1", "r1", "r2", "r1", "r2", "r2", "r2", "r2", "r2", "r2", 
        "r1", "r3", "r5", "r5", "r1", "r3", "r2", "r1", "r1", "r2", "r1", 
        "r2", "r2", "r2", "r3", "r1", "r2", "r2", "r2", "r5", "r3", "r2", 
        "r3", "r2", "r3", "r1", "r1", "r3", "r1", "r2", "r2", "r3", "r1", 
        "r2", "r1", "r1", "r1", "r2", "r1", "r5", "r2", "r1", "r1", "r5", 
        "r1", "r1", "r1", "r1", "r1", "r2", "r3", "r3", "r1", "r1", "r1", 
        "r2", "r1", "r1", "r2", "r2", "r1", "r2", "r1", "r1", "r2", "r2", 
        "r2", "r2", "r2", "r3", "r2", "r3", "r1", "r2", "r1", "r3", "r5", 
        "r3", "r2", "r1", "r2", "r2", "r2", "r5", "r5", "r2", "r1", "r3", 
        "r1", "r2", "r3", "r3", "r3", "r1", "r2", "r1", "r5", "r1", "r1", 
        "r1", "r1", "r3", "r2", "r2", "r2", "r1", "r2", "r1", "r3", "r2", 
        "r1", "r1", "r2", "r1", "r2", "r3", "r1", "r5", "r2", "r5", "r1", 
        "r5", "r2", "r2", "r2", "r1", "r1", "r2", "r1", "r1", "r1", "r2", 
        "r2", "r3", "r1", "r2", "r1", "r5", "r3", "r1", "r1", "r2", "r5", 
        "r1", "r5", "r5", "r1", "r1", "r1", "r3", "r3", "r5", "r5", "r2", 
        "r1", "r3", "r1", "r2", "r5", "r3", "r2", "r2", "r2", "r3", "r1", 
        "r1", "r3", "r2", "r2", "r2", "r5", "r3", "r5", "r2", "r1", "r1", 
        "r2", "r2", "r1", "r2", "r5", "r2", "r1", "r2", "r2", "r2", "r1", 
        "r2", "r2", "r2", "r3", "r1", "r5", "r5", "r2", "r1", "r5", "r1", 
        "r1", "r2", "r1", "r2", "r1", "r5", "r2", "r1", "r2", "r3", "r2", 
        "r2", "r2", "r1", "r5", "r2", "r2", "r2", "r2", "r2", "r5", "r1", 
        "r1", "r2", "r5", "r1", "r1", "r2", "r1", "r2", "r1", "r2", "r2", 
        "r2", "r2", "r5", "r1", "r2", "r2", "r2", "r1", "r2", "r1", "r2", 
        "r2", "r2", "r2", "r2", "r2", "r1", "r2", "r5", "r2", "r2", "r1", 
        "r2", "r3", "r1", "r1", "r1", "r5", "r5", "r1", "r3", "r1", "r1", 
        "r2", "r3", "r2", "r1", "r2", "r1", "r1", "r1", "r1", "r3", "r2", 
        "r2", "r2", "r1", "r1", "r2", "r2", "r1", "r1", "r2", "r2", "r3", 
        "r1", "r1", "r2", "r1", "r5", "r5", "r2", "r1", "r2", "r1", "r2", 
        "r1", "r2", "r2", "r1", "r5", "r2", "r1", "r1", "r1", "r1", "r1", 
        "r1", "r2", "r1", "r2", "r3", "r5", "r1", "r1", "r2", "r5", "r1", 
        "r5", "r2", "r1", "r1", "r2", "r1", "r3", "r1", "r5", "r3", "r2", 
        "r5", "r1", "r1", "r1", "r3", "r5", "r1", "r5", "r1", "r1", "r1", 
        "r1", "r1", "r3", "r1", "r1", "r1", "r1", "r1", "r1", "r3", "r1", 
        "r1", "r1", "r2", "r2", "r2", "r2", "r2", "r2", "r2", "r1", "r2", 
        "r1", "r1", "r3", "r5", "r5", "r1", "r2", "r3", "r1", "r5", "r1", 
        "r2", "r5", "r1", "r1", "r1", "r2", "r3", "r1", "r2", "r2", "r2", 
        "r1", "r2", "r2", "r5", "r3", "r1", "r1", "r3", "r1", "r5", "r3", 
        "r1", "r5", "r1", "r2", "r1", "r1", "r2", "r1", "r1", "r1", "r1", 
        "r1", "r2", "r3", "r2", "r2", "r2", "r1", "r1", "r1", "r2", "r1", 
        "r1", "r1", "r2", "r1", "r2", "r2", "r1", "r1", "r5", "r1", "r1", 
        "r1", "r2", "r1", "r2", "r1", "r1", "r1", "r5", "r1", "r2", "r2", 
        "r3", "r2", "r3", "r2", "r1", "r1", "r2", "r2", "r1", "r3", "r3", 
        "r3", "r2", "r1", "r1", "r5", "r3", "r2", "r1", "r2", "r3", "r2", 
        "r3", "r1", "r1", "r1", "r1", "r1", "r1", "r3", "r1", "r1", "r1", 
        "r1", "r2", "r5", "r2", "r1", "r5", "r2", "r1", "r1", "r1", "r2", 
        "r2", "r3", "r1", "r1", "r1", "r3", "r3", "r1", "r2", "r2", "r2", 
        "r2", "r2", "r5", "r2", "r1", "r1", "r3", "r2", "r2", "r1", "r5", 
        "r5", "r1", "r2", "r1", "r2", "r1", "r1", "r2", "r1", "r5", "r5", 
        "r1", "r3", "r3", "r1", "r3", "r1", "r1", "r2", "r1", "r1", "r2", 
        "r5", "r2", "r5", "r2", "r1", "r1", "r3", "r5", "r2", "r2", "r3", 
        "r3", "r2", "r2", "r5", "r5", "r2", "r3", "r3", "r5", "r3", "r5", 
        "r1", "r2", "r3", "r1", "r2", "r2", "r1", "r1", "r1", "r1", "r3", 
        "r2", "r1", "r2", "r1", "r2", "r1", "r1", "r5", "r2", "r2", "r1", 
        "r2", "r5", "r3", "r2", "r1", "r3", "r3", "r1", "r1", "r5", "r1", 
        "r1", "r2", "r1", "r1", "r2", "r2", "r1", "r2", "r1", "r1", "r3", 
        "r1", "r1", "r5", "r1", "r1", "r2", "r2", "r2", "r2", "r2", "r2", 
        "r3", "r1", "r2", "r2", "r2", "r3", "r3", "r2", "r3", "r2", "r3", 
        "r3", "r5", "r2", "r5", "r5", "r3", "r2", "r2", "r1", "r2", "r3", 
        "r2", "r2", "r2", "r1", "r5", "r1", "r1", "r1", "r1", "r2", "r1", 
        "r1", "r2", "r1", "r5", "r2", "r1", "r2", "r2", "r2", "r1", "r1", 
        "r1", "r2", "r5", "r1", "r2", "r2", "r2", "r2", "r1", "r1", "r1", 
        "r2", "r1", "r3", "r1", "r2", "r2", "r1", "r1", "r2", "r2", "r5", 
        "r1", "r2", "r3", "r1", "r1", "r2", "r2", "r2", "r1", "r2", "r1", 
        "r1", "r2", "r1", "r1", "r3", "r1", "r1", "r2", "r2", "r2", "r2", 
        "r3", "r1", "r3", "r2", "r3", "r2", "r2", "r2", "r5", "r1", "r2", 
        "r2", "r1", "r1", "r1", "r3", "r2", "r2", "r1", "r5", "r5", "r1", 
        "r1", "r2", "r2", "r1", "r2", "r2", "r3", "r1", "r5", "r5", "r1", 
        "r2", "r5", "r2", "r2", "r2", "r2", "r1", "r1", "r2", "r3", "r1", 
        "r3", "r1", "r1", "r1", "r5", "r5", "r2", "r5", "r2", "r1", "r2", 
        "r1", "r5", "r3", "r5", "r1", "r2", "r1", "r2", "r2", "r1", "r1", 
        "r1", "r1", "r2", "r2", "r2", "r1", "r2", "r2", "r3", "r5", "r5", 
        "r3", "r2", "r2", "r3", "r1", "r3", "r1", "r1", "r2", "r1", "r5", 
        "r2", "r1", "r2", "r5", "r5", "r2", "r2", "r2", "r2", "r3", "r2", 
        "r1", "r2", "r5", "r2", "r1", "r2", "r5", "r1", "r5", "r3", "r3", 
        "r5", "r3", "r2", "r1", "r2", "r2", "r1", "r2", "r2", "r2", "r1", 
        "r2", "r1", "r2", "r2", "r2", "r5", "r5", "r1", "r1", "r2", "r1", 
        "r1", "r2", "r2", "r2", "r1", "r2", "r5", "r1", "r3", "r2", "r3", 
        "r1", "r2", "r3", "r5", "r2", "r1", "r1", "r3", "r1", "r2", "r1", 
        "r2", "r3", "r2", "r1", "r2", "r2", "r3", "r1", "r1", "r2", "r5", 
        "r5", "r2", "r5", "r2", "r2", "r3", "r2", "r2", "r1", "r3", "r1", 
        "r2", "r2", "r2", "r1", "r1", "r5", "r5", "r2", "r2", "r3", "r2", 
        "r2", "r3", "r5", "r1", "r5", "r1", "r5", "r2", "r3", "r5", "r5", 
        "r3", "r1", "r2", "r2", "r2", "r2", "r2", "r1", "r1", "r1", "r1", 
        "r1", "r5", "r1", "r1", "r5", "r3", "r3", "r1", "r1", "r5", "r3", 
        "r1", "r5", "r1", "r5", "r2", "r2", "r1", "r1", "r2", "r2", "r1", 
        "r3", "r1", "r1", "r1", "r2", "r1", "r2", "r1", "r1", "r1", "r1", 
        "r5", "r1", "r2", "r1", "r5", "r2", "r2", "r2", "r2", "r2", "r1", 
        "r1", "r2", "r2", "r2", "r3", "r2", "r2", "r2", "r1", "r2", "r3", 
        "r1", "r3", "r3", "r1", "r2", "r5", "r1", "r1", "r3", "r3", "r2", 
        "r2", "r5", "r5", "r1", "r1", "r2", "r5", "r3", "r5", "r1", "r2", 
        "r3", "r5", "r1", "r3", "r2", "r5", "r2", "r2", "r1", "r2", "r1", 
        "r2", "r1", "r1", "r5", "r2", "r1", "r3", "r5", "r2", "r1", "r5", 
        "r1", "r2", "r1", "r2", "r1", "r1", "r5", "r1", "r2", "r3", "r1", 
        "r2", "r2", "r1", "r1", "r3", "r2", "r1", "r1", "r1", "r2", "r2", 
        "r1", "r3", "r1", "r3", "r2", "r1", "r3", "r2", "r1", "r1", "r2", 
        "r3", "r5", "r2", "r2", "r2", "r2", "r2", "r1", "r2", "r1", "r5", 
        "r2", "r2", "r2", "r1", "r3", "r3", "r1", "r1", "r2", "r2", "r1", 
        "r2", "r1", "r2", "r5", "r3", "r2", "r1", "r3", "r3", "r1", "r1", 
        "r3", "r1", "r2", "r3", "r2", "r1", "r2", "r2", "r1", "r3", "r1", 
        "r3", "r1", "r1", "r2", "r5", "r1", "r1", "r1", "r1", "r2", "r5", 
        "r1", "r3", "r2", "r1", "r5", "r3", "r2", "r1", "r3", "r1", "r5", 
        "r2", "r3", "r3", "r5", "r2", "r2", "r5", "r1", "r1", "r2", "r1", 
        "r3", "r5", "r1", "r1", "r2", "r2", "r1", "r2", "r2", "r2", "r3", 
        "r5", "r1", "r5", "r3", "r1", "r1", "r2", "r3", "r2", "r2", "r2", 
        "r1", "r2", "r2", "r2", "r5", "r2", "r3", "r1", "r3", "r3", "r1", 
        "r5", "r2", "r2", "r5", "r5", "r1", "r1", "r1", "r1", "r2", "r1", 
        "r2", "r5", "r1", "r1", "r2", "r1", "r3", "r5", "r3", "r3", "r1", 
        "r3", "r2", "r5", "r1", "r3", "r1", "r2", "r3", "r2", "r2", "r1", 
        "r1", "r2", "r1", "r1", "r1", "r1", "r2", "r3", "r2", "r2", "r1", 
        "r2", "r2", "r3", "r2", "r2", "r5", "r1", "r2", "r2", "r2", "r2", 
        "r2", "r1", "r2", "r3", "r3", "r1", "r3", "r1", "r3", "r2", "r2", 
        "r1", "r1", "r2", "r3", "r1", "r2", "r2", "r1", "r2", "r2", "r1", 
        "r5", "r2", "r2", "r3", "r5", "r2", "r1", "r1", "r1", "r1", "r2", 
        "r5", "r1", "r1", "r2", "r1", "r5", "r3", "r1", "r1", "r2", "r2", 
        "r2", "r1", "r2", "r1", "r3", "r2", "r3", "r5", "r2", "r1", "r3", 
        "r2", "r1", "r2", "r5", "r2", "r1", "r2", "r1", "r5", "r1", "r2", 
        "r1", "r5", "r1", "r3", "r1", "r3", "r1", "r1", "r1", "r1", "r1", 
        "r2", "r1", "r5", "r1", "r1", "r1", "r1", "r1", "r1", "r1", "r2", 
        "r2", "r1", "r1", "r1", "r2", "r2", "r1", "r3", "r5", "r5", "r1", 
        "r3", "r1", "r2", "r5", "r2", "r3", "r2", "r3", "r1", "r2", "r2", 
        "r3", "r2", "r1", "r1", "r1", "r2", "r5", "r1", "r2", "r3", "r2", 
        "r2", "r2", "r1", "r2", "r1", "r2", "r5", "r2", "r2", "r2", "r2", 
        "r2", "r2", "r5", "r1", "r2", "r2", "r3", "r1", "r2", "r5", "r1", 
        "r2", "r1", "r2", "r1", "r2", "r3", "r1", "r1", "r1", "r2", "r1", 
        "r1", "r1", "r1", "r1", "r1", "r2", "r2", "r1", "r1", "r5", "r2", 
        "r1", "r1", "r2", "r2", "r1", "r2", "r5", "r2", "r2", "r2", "r3", 
        "r5", "r2", "r1", "r1", "r1", "r3", "r2", "r3", "r3", "r1", "r3", 
        "r2", "r3", "r5", "r1", "r1", "r1", "r1", "r2", "r3", "r1", "r1", 
        "r1", "r1", "r3", "r2", "r2", "r1", "r1", "r1", "r1", "r3", "r2", 
        "r1", "r1", "r2", "r3", "r1", "r3", "r2", "r2", "r2", "r2", "r1", 
        "r2", "r1", "r1", "r1", "r1", "r2", "r2", "r5", "r1", "r2", "r2", 
        "r1", "r1", "r5", "r2", "r3", "r2", "r5", "r2", "r2", "r3", "r1", 
        "r2", "r2", "r2", "r2", "r2", "r1", "r1", "r2", "r1", "r3", "r3", 
        "r2", "r2", "r1", "r5", "r2", "r1", "r2", "r2", "r1", "r3", "r1", 
        "r2", "r3", "r3", "r3", "r1", "r1", "r5", "r1", "r2", "r2", "r1", 
        "r2", "r5", "r5", "r2", "r2", "r1", "r2", "r3", "r2", "r2", "r1", 
        "r2", "r1", "r1", "r1", "r2", "r2", "r3", "r5", "r2", "r1", "r3", 
        "r2", "r2", "r2", "r1", "r1", "r3", "r2", "r5", "r1", "r1", "r5", 
        "r1", "r5", "r1", "r1", "r2", "r1", "r1", "r3", "r3", "r5", "r3", 
        "r2", "r1", "r2", "r2", "r2", "r1", "r2", "r1", "r2", "r1", "r2", 
        "r5", "r1", "r5", "r1", "r3", "r2", "r1", "r5", "r2", "r1", "r2", 
        "r5", "r1", "r1", "r1", "r1", "r2", "r2", "r2", "r5", "r2", "r1", 
        "r5", "r1", "r1", "r1", "r5", "r1", "r3", "r2", "r5", "r2", "r1", 
        "r5", "r5", "r1", "r2", "r3", "r2", "r2", "r5", "r1", "r5", "r2", 
        "r2", "r1", "r5", "r1", "r2", "r1", "r2", "r2", "r3", "r1", "r1", 
        "r5", "r3", "r2", "r3", "r2", "r3", "r3", "r1", "r3", "r2", "r2", 
        "r2", "r1", "r2", "r3", "r2", "r2", "r1", "r1", "r2", "r1", "r1", 
        "r2", "r1", "r3", "r1", "r2", "r1", "r2", "r5", "r2", "r2", "r2", 
        "r3", "r1", "r1", "r2", "r5", "r5", "r5", "r2", "r5", "r1", "r3", 
        "r2", "r1", "r2", "r3", "r3", "r1", "r3", "r5", "r2", "r1", "r2", 
        "r2", "r2", "r1", "r2", "r1", "r1", "r2", "r3", "r1", "r1", "r1", 
        "r1", "r2", "r1", "r1", "r1", "r1", "r2", "r1", "r2", "r1", "r5", 
        "r1", "r1", "r1", "r5", "r1", "r2", "r2", "r2", "r2", "r3", "r3", 
        "r2", "r1", "r2", "r2", "r5", "r1", "r2", "r1", "r5", "r2", "r1", 
        "r1", "r1", "r1", "r3", "r3", "r3", "r1", "r2", "r2", "r2", "r1", 
        "r1", "r1", "r5", "r1", "r2", "r5", "r2", "r3", "r2", "r1", "r1", 
        "r3", "r1", "r2", "r1", "r2", "r1", "r2", "r2", "r2", "r1", "r2", 
        "r1", "r1", "r1", "r2", "r1", "r1", "r5", "r1", "r3", "r1", "r2", 
        "r1", "r2", "r2", "r2", "r1", "r1", "r2", "r2", "r2", "r1", "r1", 
        "r2", "r2", "r5", "r5", "r1", "r5", "r3", "r2", "r2", "r1", "r2", 
        "r2", "r1", "r1", "r1", "r1", "r2", "r1", "r1", "r1", "r1", "r3", 
        "r5", "r1", "r1", "r5", "r1", "r1", "r1", "r2", "r1", "r3", "r1", 
        "r5", "r2", "r1", "r1", "r2", "r2", "r2", "r1", "r2", "r1", "r2", 
        "r2", "r3", "r1", "r3", "r5", "r3", "r2", "r5", "r3", "r2", "r3", 
        "r2", "r3", "r1", "r3", "r2", "r3", "r3", "r1", "r5", "r2", "r3", 
        "r5", "r2", "r2", "r2", "r2", "r3", "r2", "r5", "r3", "r5", "r3", 
        "r1", "r2", "r1", "r1", "r2", "r2", "r1", "r2", "r2", "r1", "r2", 
        "r1", "r1", "r3", "r1", "r1", "r5", "r5", "r1", "r1", "r3", "r2", 
        "r2", "r2", "r1", "r5", "r5", "r1", "r1", "r3", "r1", "r1", "r3", 
        "r1", "r2", "r3", "r2", "r5", "r5", "r5", "r1", "r2", "r5", "r1", 
        "r5", "r1", "r2", "r5", "r5", "r2", "r1", "r1", "r1", "r1", "r1", 
        "r5", "r1", "r1", "r2", "r3", "r3", "r2", "r1", "r3", "r3", "r2", 
        "r2", "r1", "r2", "r3", "r5", "r5", "r2", "r2", "r2", "r1", "r3", 
        "r2", "r1", "r2", "r5", "r1", "r3", "r1", "r3", "r1", "r3", "r5", 
        "r1", "r3", "r2", "r1", "r3", "r5", "r3", "r3", "r2", "r5", "r3", 
        "r2", "r1", "r1", "r3", "r2", "r1", "r3", "r5", "r2", "r2", "r1", 
        "r1", "r2", "r1", "r2", "r1", "r5", "r3", "r2", "r2", "r2", "r3", 
        "r2", "r2", "r2", "r3", "r1", "r3", "r2", "r2", "r1", "r2", "r1", 
        "r5", "r1", "r5", "r1", "r1", "r2", "r1", "r1", "r5", "r5", "r1", 
        "r5", "r1", "r2", "r2", "r3", "r1", "r3", "r2", "r1", "r1", "r5", 
        "r1", "r3", "r1", "r1", "r1", "r1", "r1", "r2", "r3", "r1", "r1", 
        "r2", "r1", "r1", "r5", "r2", "r1", "r1", "r5", "r1", "r2", "r1", 
        "r5", "r2", "r1", "r1", "r2", "r2", "r5", "r1", "r2", "r1", "r2", 
        "r2", "r1", "r2", "r2", "r1", "r3", "r1", "r1", "r2", "r2", "r5", 
        "r2", "r1", "r2", "r2", "r1", "r1", "r3", "r3", "r2", "r1", "r1", 
        "r2", "r2", "r3", "r1", "r2", "r5", "r1", "r5", "r1", "r1", "r3", 
        "r1", "r5", "r2", "r2", "r5", "r1", "r1", "r2", "r2", "r2", "r3", 
        "r2", "r1", "r2", "r5", "r5", "r2", "r2", "r2", "r2", "r1", "r2", 
        "r5", "r2", "r2", "r2", "r2", "r1", "r2", "r2", "r1", "r5", "r2", 
        "r1", "r1", "r1", "r1", "r2", "r1", "r1", "r5", "r3", "r3", "r1", 
        "r2", "r5", "r1", "r3", "r3", "r1", "r1", "r5", "r1", "r5", "r1", 
        "r1", "r5", "r1", "r2", "r1", "r1", "r5", "r2", "r2", "r1", "r1", 
        "r1", "r2", "r2", "r1", "r2", "r5", "r3", "r1", "r2", "r3", "r3", 
        "r2", "r1", "r1", "r1", "r1", "r2", "r1", "r5", "r2", "r1", "r2", 
        "r1", "r3", "r1", "r5", "r1", "r1", "r2", "r2", "r2", "r1", "r1", 
        "r1", "r2", "r1", "r1", "r1", "r2", "r1", "r1", "r2", "r1", "r2", 
        "r1", "r5", "r3", "r2", "r2", "r2", "r2", "r2", "r5", "r2", "r2", 
        "r2", "r5", "r1", "r1", "r5", "r3", "r1", "r2", "r1", "r5", "r5", 
        "r2", "r2", "r1", "r2", "r3", "r3", "r1", "r1", "r5", "r5", "r2", 
        "r2", "r5", "r1", "r2", "r3", "r1", "r5", "r2", "r1", "r2", "r1", 
        "r2", "r1", "r2", "r1", "r2", "r2", "r2", "r1", "r2", "r2", "r2", 
        "r2", "r3", "r2", "r2", "r2", "r2", "r2", "r1", "r2", "r2", "r1", 
        "r1", "r2", "r5", "r2", "r2", "r2", "r2", "r5", "r5", "r1", "r2", 
        "r2", "r2", "r2", "r1", "r5", "r2", "r1", "r2", "r1", "r5", "r1", 
        "r2", "r1", "r2", "r2", "r1", "r2", "r2", "r3", "r3", "r2", "r1", 
        "r2", "r3", "r2", "r2", "r2", "r1", "r2", "r1", "r1", "r1", "r3", 
        "r5", "r1", "r2", "r1", "r3", "r2", "r2", "r5", "r5", "r3", "r1", 
        "r2", "r1", "r3", "r1", "r1", "r2", "r2", "r5", "r1", "r3", "r2", 
        "r5", "r1", "r3", "r2", "r3", "r3", "r5", "r3", "r1", "r1", "r2", 
        "r2", "r1", "r2", "r2", "r1", "r2", "r2", "r2", "r2", "r2", "r2", 
        "r2", "r2", "r3", "r3", "r1", "r3", "r5", "r2", "r5", "r2", "r3", 
        "r1", "r1", "r5", "r1", "r2", "r5", "r3", "r1", "r2", "r2", "r1", 
        "r1", "r1", "r2", "r2", "r5", "r2", "r2", "r2", "r1", "r1", "r1", 
        "r1", "r5", "r1", "r2", "r1", "r2", "r5", "r1", "r2", "r2", "r5", 
        "r1", "r5", "r3", "r2", "r1", "r2", "r2", "r1", "r3", "r1", "r1", 
        "r1", "r2", "r2", "r5", "r3", "r3", "r1", "r5", "r1", "r1", "r1", 
        "r1", "r1", "r3", "r1", "r1", "r2", "r1", "r2", "r2", "r2", "r1", 
        "r1", "r5", "r2", "r1", "r1", "r2", "r1", "r1", "r1", "r2", "r2", 
        "r1", "r2", "r2", "r3", "r2", "r5", "r1", "r3", "r3", "r3", "r5", 
        "r1", "r2", "r2", "r2", "r2", "r3", "r3", "r1", "r2", "r1", "r5", 
        "r5", "r2", "r2", "r5", "r2", "r1", "r3", "r2", "r2", "r1", "r3", 
        "r5", "r3", "r2", "r2", "r2", "r2", "r2", "r1", "r1", "r1", "r1", 
        "r2", "r1", "r2", "r5", "r2", "r1", "r2", "r1", "r1", "r1", "r2", 
        "r1", "r2", "r1", "r2", "r1", "r1", "r3", "r2", "r1", "r3", "r3", 
        "r1", "r3", "r1", "r1", "r2", "r1", "r2", "r2", "r5", "r1", "r3", 
        "r1", "r5", "r2", "r1", "r1", "r3", "r2", "r1", "r1", "r3", "r1", 
        "r1", "r2", "r5", "r2", "r5", "r3", "r5", "r3", "r5", "r3", "r5", 
        "r3", "r2", "r1", "r5", "r2", "r2", "r3", "r1", "r2", "r5", "r1", 
        "r2", "r5", "r1", "r5", "r2", "r3", "r1", "r1", "r2", "r3", "r1", 
        "r3", "r2", "r2", "r1", "r2", "r2", "r3", "r1", "r3", "r2", "r1", 
        "r2", "r3", "r1", "r2", "r2", "r1", "r2", "r3", "r1", "r5", "r1", 
        "r2", "r1", "r2", "r2", "r2", "r2", "r1", "r2", "r2", "r1", "r3", 
        "r3", "r5", "r3", "r1", "r1", "r5", "r5", "r1", "r2", "r5", "r2", 
        "r3", "r2", "r3", "r2", "r1", "r1"}], 
    "Predictions" -> {
     "r2", "r1", "r1", "r2", "r2", "r2", "r2", "r5", "r1", "r1", "r1", "r1", 
      "r2", "r2", "r1", "r5", "r3", "r2", "r3", "r1", "r1", "r5", "r2", "r3", 
      "r1", "r2", "r3", "r1", "r1", "r2", "r1", "r2", "r5", "r2", "r2", "r5", 
      "r2", "r2", "r2", "r3", "r2", "r2", "r1", "r2", "r1", "r2", "r5", "r1", 
      "r1", "r2", "r1", "r2", "r3", "r2", "r5", "r2", "r2", "r3", "r5", "r3", 
      "r2", "r5", "r3", "r1", "r3", "r5", "r1", "r2", "r1", "r2", "r1", "r2", 
      "r3", "r2", "r2", "r3", "r3", "r1", "r1", "r5", "r1", "r2", "r2", "r1", 
      "r2", "r1", "r2", "r3", "r1", "r1", "r1", "r1", "r2", "r2", "r2", "r1", 
      "r1", "r3", "r3", "r2", "r3", "r2", "r2", "r2", "r5", "r1", "r2", "r3", 
      "r1", "r1", "r2", "r2", "r2", "r5", "r3", "r1", "r2", "r5", "r1", "r2", 
      "r2", "r1", "r2", "r1", "r3", "r2", "r2", "r1", "r3", "r5", "r2", "r1", 
      "r2", "r2", "r1", "r1", "r5", "r2", "r2", "r2", "r5", "r5", "r2", "r2", 
      "r2", "r1", "r1", "r2", "r3", "r3", "r1", "r2", "r1", "r1", "r2", "r2", 
      "r2", "r1", "r3", "r2", "r3", "r5", "r1", "r1", "r5", "r1", "r1", "r2", 
      "r2", "r1", "r1", "r2", "r2", "r3", "r2", "r3", "r5", "r1", "r1", "r1", 
      "r2", "r5", "r5", "r2", "r1", "r2", "r1", "r1", "r1", "r1", "r1", "r2", 
      "r1", "r2", "r2", "r2", "r2", "r2", "r2", "r1", "r3", "r5", "r5", "r1", 
      "r3", "r2", "r1", "r1", "r2", "r1", "r2", "r2", "r2", "r3", "r1", "r2", 
      "r2", "r2", "r5", "r3", "r2", "r3", "r2", "r3", "r1", "r1", "r3", "r1", 
      "r2", "r2", "r3", "r1", "r2", "r1", "r1", "r1", "r2", "r1", "r5", "r2", 
      "r1", "r1", "r5", "r1", "r1", "r1", "r1", "r1", "r2", "r3", "r3", "r1", 
      "r1", "r1", "r2", "r1", "r1", "r2", "r2", "r1", "r2", "r1", "r1", "r2", 
      "r2", "r2", "r2", "r2", "r3", "r2", "r3", "r1", "r2", "r1", "r3", "r5", 
      "r3", "r2", "r1", "r2", "r2", "r2", "r5", "r5", "r2", "r1", "r3", "r1", 
      "r2", "r3", "r3", "r3", "r1", "r2", "r1", "r5", "r1", "r1", "r1", "r1", 
      "r3", "r2", "r2", "r2", "r1", "r2", "r1", "r3", "r2", "r1", "r1", "r2", 
      "r1", "r2", "r3", "r1", "r5", "r2", "r5", "r1", "r5", "r2", "r2", "r2", 
      "r1", "r1", "r2", "r1", "r1", "r1", "r2", "r2", "r3", "r1", "r2", "r1", 
      "r5", "r3", "r1", "r1", "r2", "r5", "r1", "r5", "r5", "r1", "r1", "r1", 
      "r3", "r3", "r5", "r5", "r2", "r1", "r3", "r1", "r2", "r5", "r3", "r2", 
      "r2", "r2", "r3", "r1", "r1", "r3", "r2", "r2", "r2", "r5", "r3", "r5", 
      "r2", "r1", "r1", "r2", "r2", "r1", "r2", "r5", "r2", "r1", "r2", "r2", 
      "r2", "r1", "r2", "r2", "r2", "r3", "r1", "r5", "r5", "r2", "r1", "r5", 
      "r1", "r1", "r2", "r1", "r2", "r1", "r5", "r2", "r1", "r2", "r3", "r2", 
      "r2", "r2", "r1", "r5", "r2", "r2", "r2", "r2", "r2", "r5", "r1", "r1", 
      "r2", "r5", "r1", "r1", "r2", "r1", "r2", "r1", "r2", "r2", "r2", "r2", 
      "r5", "r1", "r2", "r2", "r2", "r1", "r2", "r1", "r2", "r2", "r2", "r2", 
      "r2", "r2", "r1", "r2", "r5", "r2", "r2", "r1", "r2", "r3", "r1", "r1", 
      "r1", "r5", "r5", "r1", "r3", "r1", "r1", "r2", "r3", "r2", "r1", "r2", 
      "r1", "r1", "r1", "r1", "r3", "r2", "r2", "r2", "r1", "r1", "r2", "r2", 
      "r1", "r1", "r2", "r2", "r3", "r1", "r1", "r2", "r1", "r5", "r5", "r2", 
      "r1", "r2", "r1", "r2", "r1", "r2", "r2", "r1", "r5", "r2", "r1", "r1", 
      "r1", "r1", "r1", "r1", "r2", "r1", "r2", "r3", "r5", "r1", "r1", "r2", 
      "r5", "r1", "r5", "r2", "r1", "r1", "r2", "r1", "r3", "r1", "r5", "r3", 
      "r2", "r5", "r1", "r2", "r1", "r3", "r5", "r1", "r5", "r1", "r1", "r1", 
      "r1", "r1", "r3", "r1", "r1", "r1", "r1", "r1", "r1", "r3", "r1", "r1", 
      "r1", "r2", "r2", "r2", "r2", "r2", "r2", "r2", "r1", "r2", "r1", "r1", 
      "r3", "r5", "r5", "r1", "r2", "r3", "r1", "r5", "r1", "r2", "r5", "r1", 
      "r1", "r1", "r2", "r3", "r1", "r2", "r2", "r2", "r1", "r2", "r2", "r5", 
      "r3", "r1", "r1", "r3", "r1", "r5", "r3", "r1", "r5", "r1", "r2", "r1", 
      "r1", "r2", "r1", "r1", "r1", "r1", "r1", "r2", "r3", "r2", "r2", "r2", 
      "r1", "r1", "r1", "r2", "r1", "r1", "r1", "r2", "r1", "r2", "r2", "r1", 
      "r1", "r5", "r1", "r1", "r1", "r2", "r1", "r2", "r1", "r1", "r1", "r5", 
      "r1", "r2", "r2", "r3", "r2", "r3", "r2", "r1", "r1", "r2", "r2", "r1", 
      "r3", "r3", "r3", "r2", "r1", "r1", "r5", "r3", "r2", "r1", "r2", "r3", 
      "r2", "r3", "r1", "r1", "r1", "r1", "r1", "r1", "r3", "r1", "r1", "r1", 
      "r1", "r2", "r5", "r2", "r1", "r5", "r2", "r1", "r1", "r1", "r2", "r2", 
      "r3", "r1", "r1", "r1", "r3", "r3", "r1", "r2", "r2", "r2", "r2", "r2", 
      "r5", "r2", "r1", "r1", "r3", "r2", "r2", "r1", "r5", "r5", "r1", "r2", 
      "r1", "r2", "r1", "r1", "r2", "r1", "r5", "r5", "r1", "r3", "r3", "r1", 
      "r3", "r1", "r1", "r2", "r1", "r1", "r2", "r5", "r2", "r5", "r2", "r1", 
      "r1", "r3", "r5", "r2", "r2", "r3", "r3", "r2", "r2", "r5", "r5", "r2", 
      "r3", "r3", "r5", "r3", "r5", "r1", "r2", "r3", "r1", "r2", "r2", "r1", 
      "r1", "r1", "r1", "r3", "r2", "r1", "r2", "r1", "r2", "r1", "r1", "r5", 
      "r2", "r2", "r1", "r2", "r5", "r3", "r2", "r1", "r3", "r3", "r1", "r1", 
      "r5", "r1", "r1", "r2", "r1", "r1", "r2", "r2", "r1", "r2", "r1", "r1", 
      "r3", "r1", "r1", "r5", "r1", "r1", "r2", "r2", "r2", "r2", "r2", "r2", 
      "r3", "r1", "r2", "r2", "r2", "r3", "r3", "r2", "r3", "r2", "r3", "r3", 
      "r5", "r2", "r5", "r5", "r3", "r2", "r2", "r1", "r2", "r3", "r2", "r2", 
      "r2", "r1", "r5", "r1", "r1", "r1", "r1", "r2", "r1", "r1", "r2", "r1", 
      "r5", "r2", "r1", "r2", "r2", "r2", "r1", "r1", "r1", "r2", "r5", "r1", 
      "r2", "r2", "r2", "r2", "r1", "r1", "r1", "r2", "r1", "r3", "r1", "r2", 
      "r2", "r1", "r1", "r2", "r2", "r5", "r1", "r2", "r3", "r1", "r1", "r2", 
      "r2", "r2", "r1", "r2", "r1", "r1", "r2", "r1", "r1", "r3", "r1", "r1", 
      "r2", "r2", "r2", "r2", "r3", "r1", "r3", "r2", "r3", "r2", "r2", "r2", 
      "r5", "r1", "r2", "r2", "r1", "r1", "r1", "r3", "r2", "r2", "r1", "r5", 
      "r5", "r1", "r1", "r2", "r2", "r1", "r2", "r2", "r3", "r1", "r5", "r5", 
      "r1", "r2", "r5", "r2", "r2", "r2", "r2", "r1", "r1", "r2", "r3", "r1", 
      "r3", "r1", "r1", "r1", "r5", "r5", "r2", "r5", "r2", "r1", "r2", "r1", 
      "r5", "r3", "r5", "r1", "r2", "r1", "r2", "r2", "r1", "r1", "r1", "r1", 
      "r2", "r3", "r2", "r1", "r2", "r2", "r3", "r5", "r5", "r3", "r2", "r2", 
      "r3", "r1", "r3", "r1", "r1", "r2", "r1", "r5", "r2", "r1", "r2", "r5", 
      "r5", "r2", "r2", "r2", "r2", "r3", "r2", "r1", "r2", "r5", "r2", "r1", 
      "r2", "r5", "r1", "r5", "r3", "r3", "r5", "r3", "r2", "r1", "r2", "r2", 
      "r1", "r2", "r2", "r2", "r1", "r2", "r1", "r2", "r2", "r2", "r5", "r5", 
      "r1", "r1", "r2", "r1", "r1", "r2", "r2", "r2", "r1", "r2", "r5", "r1", 
      "r3", "r2", "r3", "r1", "r2", "r3", "r5", "r2", "r1", "r1", "r3", "r1", 
      "r2", "r1", "r2", "r3", "r2", "r1", "r2", "r2", "r3", "r1", "r1", "r2", 
      "r5", "r5", "r2", "r5", "r2", "r2", "r3", "r2", "r2", "r1", "r3", "r1", 
      "r2", "r2", "r2", "r1", "r1", "r5", "r5", "r2", "r2", "r3", "r2", "r2", 
      "r3", "r5", "r1", "r5", "r1", "r5", "r2", "r3", "r5", "r5", "r3", "r1", 
      "r2", "r2", "r2", "r2", "r2", "r1", "r1", "r1", "r1", "r1", "r5", "r1", 
      "r1", "r5", "r3", "r3", "r1", "r1", "r5", "r3", "r1", "r5", "r1", "r5", 
      "r2", "r2", "r1", "r1", "r2", "r2", "r1", "r3", "r1", "r1", "r1", "r2", 
      "r1", "r2", "r1", "r1", "r1", "r1", "r5", "r1", "r2", "r1", "r5", "r1", 
      "r2", "r2", "r2", "r2", "r1", "r1", "r2", "r2", "r2", "r3", "r2", "r2", 
      "r2", "r1", "r2", "r3", "r1", "r3", "r3", "r1", "r2", "r5", "r1", "r1", 
      "r3", "r3", "r2", "r2", "r5", "r5", "r1", "r1", "r2", "r5", "r3", "r5", 
      "r1", "r2", "r3", "r5", "r1", "r3", "r2", "r5", "r2", "r2", "r1", "r2", 
      "r1", "r2", "r1", "r1", "r5", "r2", "r1", "r3", "r5", "r2", "r1", "r5", 
      "r1", "r2", "r1", "r2", "r1", "r1", "r5", "r1", "r2", "r3", "r1", "r2", 
      "r2", "r1", "r1", "r3", "r2", "r1", "r1", "r1", "r2", "r2", "r1", "r3", 
      "r1", "r3", "r2", "r1", "r3", "r2", "r1", "r1", "r2", "r3", "r5", "r2", 
      "r2", "r2", "r2", "r2", "r1", "r2", "r1", "r5", "r2", "r2", "r2", "r1", 
      "r3", "r3", "r1", "r1", "r2", "r2", "r1", "r2", "r1", "r2", "r5", "r3", 
      "r2", "r1", "r3", "r3", "r1", "r1", "r3", "r1", "r2", "r3", "r2", "r1", 
      "r2", "r2", "r1", "r3", "r1", "r3", "r1", "r1", "r2", "r5", "r1", "r1", 
      "r1", "r1", "r2", "r5", "r1", "r3", "r2", "r1", "r5", "r3", "r2", "r1", 
      "r3", "r1", "r5", "r2", "r3", "r3", "r5", "r2", "r2", "r5", "r1", "r1", 
      "r2", "r1", "r3", "r5", "r1", "r1", "r2", "r2", "r1", "r2", "r2", "r2", 
      "r3", "r5", "r1", "r5", "r3", "r1", "r1", "r2", "r3", "r2", "r2", "r2", 
      "r1", "r2", "r2", "r2", "r5", "r2", "r3", "r1", "r3", "r3", "r1", "r5", 
      "r2", "r2", "r5", "r5", "r1", "r1", "r1", "r1", "r2", "r1", "r2", "r5", 
      "r1", "r1", "r2", "r1", "r3", "r5", "r3", "r3", "r1", "r3", "r2", "r5", 
      "r1", "r3", "r1", "r2", "r3", "r2", "r2", "r1", "r1", "r2", "r1", "r1", 
      "r1", "r1", "r2", "r3", "r2", "r2", "r1", "r2", "r2", "r3", "r2", "r2", 
      "r5", "r2", "r2", "r2", "r2", "r2", "r2", "r1", "r2", "r3", "r3", "r1", 
      "r3", "r1", "r3", "r2", "r2", "r1", "r1", "r2", "r3", "r1", "r2", "r3", 
      "r1", "r2", "r2", "r1", "r5", "r2", "r2", "r3", "r5", "r2", "r1", "r1", 
      "r1", "r1", "r2", "r5", "r1", "r1", "r2", "r1", "r5", "r3", "r1", "r1", 
      "r2", "r2", "r2", "r1", "r2", "r1", "r3", "r2", "r3", "r5", "r2", "r1", 
      "r3", "r2", "r1", "r2", "r5", "r3", "r1", "r2", "r1", "r5", "r1", "r2", 
      "r1", "r5", "r1", "r3", "r1", "r2", "r1", "r1", "r1", "r1", "r1", "r2", 
      "r1", "r5", "r1", "r1", "r1", "r1", "r1", "r1", "r1", "r2", "r2", "r1", 
      "r1", "r1", "r2", "r2", "r1", "r3", "r5", "r5", "r1", "r3", "r1", "r2", 
      "r5", "r2", "r3", "r2", "r3", "r1", "r2", "r2", "r3", "r2", "r1", "r1", 
      "r1", "r2", "r5", "r1", "r2", "r3", "r2", "r2", "r2", "r1", "r2", "r1", 
      "r2", "r5", "r2", "r2", "r2", "r2", "r2", "r2", "r5", "r1", "r2", "r2", 
      "r3", "r1", "r2", "r5", "r1", "r2", "r1", "r2", "r1", "r2", "r3", "r1", 
      "r1", "r1", "r2", "r1", "r1", "r1", "r1", "r1", "r1", "r2", "r2", "r1", 
      "r1", "r5", "r2", "r1", "r1", "r2", "r2", "r1", "r2", "r5", "r2", "r2", 
      "r2", "r3", "r5", "r2", "r1", "r1", "r1", "r3", "r2", "r3", "r3", "r1", 
      "r3", "r2", "r3", "r5", "r1", "r1", "r1", "r1", "r2", "r3", "r1", "r1", 
      "r1", "r1", "r3", "r2", "r2", "r1", "r1", "r1", "r1", "r3", "r2", "r1", 
      "r1", "r2", "r3", "r1", "r3", "r2", "r2", "r2", "r2", "r1", "r2", "r1", 
      "r1", "r1", "r1", "r2", "r2", "r5", "r1", "r2", "r2", "r1", "r1", "r5", 
      "r2", "r3", "r2", "r5", "r2", "r2", "r3", "r1", "r2", "r2", "r2", "r2", 
      "r3", "r1", "r1", "r2", "r1", "r3", "r3", "r2", "r2", "r1", "r5", "r2", 
      "r1", "r2", "r2", "r1", "r3", "r1", "r2", "r3", "r3", "r3", "r1", "r1", 
      "r5", "r1", "r2", "r2", "r1", "r2", "r5", "r5", "r2", "r2", "r1", "r2", 
      "r3", "r2", "r2", "r1", "r2", "r1", "r1", "r1", "r2", "r2", "r3", "r5", 
      "r2", "r1", "r3", "r2", "r2", "r2", "r1", "r1", "r3", "r2", "r5", "r1", 
      "r1", "r5", "r1", "r5", "r1", "r1", "r2", "r1", "r1", "r3", "r3", "r5", 
      "r3", "r2", "r1", "r2", "r2", "r2", "r1", "r2", "r1", "r2", "r1", "r2", 
      "r5", "r1", "r5", "r1", "r3", "r2", "r1", "r5", "r2", "r1", "r2", "r5", 
      "r1", "r1", "r1", "r1", "r2", "r2", "r2", "r5", "r2", "r1", "r5", "r1", 
      "r1", "r1", "r5", "r1", "r3", "r2", "r5", "r2", "r1", "r5", "r5", "r1", 
      "r2", "r3", "r2", "r2", "r5", "r1", "r5", "r2", "r2", "r1", "r5", "r1", 
      "r2", "r1", "r2", "r2", "r3", "r1", "r1", "r5", "r3", "r2", "r3", "r2", 
      "r3", "r3", "r1", "r3", "r2", "r2", "r2", "r1", "r2", "r3", "r2", "r2", 
      "r1", "r1", "r2", "r1", "r1", "r2", "r1", "r3", "r1", "r2", "r1", "r2", 
      "r5", "r2", "r2", "r2", "r3", "r1", "r1", "r2", "r5", "r5", "r5", "r2", 
      "r5", "r1", "r3", "r2", "r1", "r2", "r3", "r2", "r1", "r3", "r5", "r2", 
      "r1", "r2", "r2", "r2", "r1", "r2", "r1", "r1", "r2", "r3", "r1", "r1", 
      "r1", "r1", "r2", "r1", "r1", "r1", "r1", "r2", "r1", "r2", "r1", "r5", 
      "r1", "r1", "r1", "r5", "r1", "r2", "r2", "r2", "r2", "r3", "r3", "r2", 
      "r1", "r2", "r2", "r5", "r1", "r2", "r1", "r5", "r2", "r1", "r1", "r1", 
      "r1", "r3", "r3", "r3", "r1", "r2", "r2", "r2", "r1", "r1", "r1", "r5", 
      "r1", "r2", "r5", "r2", "r3", "r2", "r1", "r1", "r3", "r1", "r2", "r1", 
      "r2", "r1", "r2", "r2", "r2", "r1", "r2", "r1", "r1", "r1", "r2", "r1", 
      "r1", "r5", "r1", "r3", "r1", "r2", "r1", "r2", "r2", "r2", "r1", "r1", 
      "r2", "r3", "r2", "r1", "r1", "r2", "r2", "r5", "r5", "r1", "r5", "r3", 
      "r2", "r2", "r1", "r2", "r2", "r1", "r1", "r1", "r1", "r2", "r1", "r1", 
      "r1", "r1", "r3", "r5", "r1", "r1", "r5", "r1", "r1", "r1", "r2", "r1", 
      "r3", "r1", "r5", "r2", "r1", "r1", "r2", "r2", "r2", "r1", "r2", "r1", 
      "r2", "r2", "r3", "r1", "r3", "r5", "r3", "r2", "r5", "r3", "r2", "r3", 
      "r2", "r3", "r1", "r3", "r2", "r3", "r3", "r1", "r5", "r2", "r3", "r5", 
      "r2", "r2", "r2", "r2", "r3", "r2", "r5", "r3", "r5", "r3", "r1", "r2", 
      "r1", "r1", "r2", "r2", "r1", "r2", "r2", "r1", "r2", "r1", "r1", "r3", 
      "r1", "r1", "r5", "r5", "r1", "r1", "r3", "r2", "r2", "r2", "r1", "r5", 
      "r5", "r1", "r1", "r3", "r1", "r1", "r3", "r1", "r2", "r3", "r2", "r5", 
      "r5", "r5", "r1", "r2", "r5", "r1", "r5", "r1", "r2", "r5", "r5", "r2", 
      "r1", "r1", "r1", "r1", "r1", "r5", "r1", "r1", "r2", "r3", "r3", "r2", 
      "r1", "r3", "r3", "r2", "r2", "r1", "r2", "r3", "r5", "r5", "r2", "r2", 
      "r2", "r1", "r3", "r2", "r1", "r2", "r5", "r1", "r3", "r1", "r3", "r1", 
      "r3", "r5", "r1", "r3", "r2", "r1", "r3", "r5", "r3", "r3", "r2", "r5", 
      "r3", "r2", "r1", "r1", "r3", "r2", "r1", "r3", "r5", "r2", "r2", "r1", 
      "r1", "r2", "r1", "r2", "r1", "r5", "r3", "r2", "r2", "r2", "r3", "r2", 
      "r2", "r2", "r3", "r1", "r3", "r2", "r2", "r1", "r2", "r1", "r5", "r1", 
      "r5", "r1", "r1", "r2", "r1", "r1", "r5", "r5", "r1", "r5", "r1", "r2", 
      "r2", "r3", "r1", "r3", "r2", "r1", "r1", "r5", "r1", "r3", "r1", "r1", 
      "r1", "r1", "r1", "r2", "r3", "r1", "r1", "r2", "r1", "r1", "r5", "r2", 
      "r1", "r1", "r5", "r1", "r2", "r1", "r5", "r2", "r1", "r1", "r2", "r2", 
      "r5", "r1", "r2", "r1", "r2", "r2", "r1", "r2", "r2", "r1", "r3", "r1", 
      "r1", "r2", "r2", "r5", "r2", "r1", "r2", "r2", "r1", "r1", "r3", "r3", 
      "r2", "r1", "r1", "r2", "r2", "r3", "r1", "r2", "r5", "r1", "r5", "r1", 
      "r1", "r3", "r1", "r5", "r2", "r2", "r5", "r1", "r1", "r2", "r2", "r2", 
      "r3", "r2", "r2", "r2", "r5", "r5", "r2", "r2", "r2", "r2", "r1", "r2", 
      "r5", "r2", "r2", "r2", "r2", "r1", "r2", "r2", "r1", "r5", "r2", "r1", 
      "r1", "r1", "r1", "r2", "r1", "r1", "r5", "r3", "r3", "r1", "r2", "r5", 
      "r1", "r3", "r3", "r1", "r1", "r5", "r1", "r5", "r1", "r1", "r5", "r1", 
      "r2", "r1", "r1", "r5", "r2", "r2", "r1", "r1", "r1", "r2", "r2", "r1", 
      "r2", "r5", "r3", "r1", "r2", "r3", "r3", "r2", "r1", "r1", "r1", "r1", 
      "r2", "r1", "r5", "r2", "r1", "r2", "r1", "r3", "r1", "r5", "r1", "r1", 
      "r2", "r2", "r2", "r1", "r1", "r1", "r2", "r1", "r1", "r1", "r2", "r1", 
      "r1", "r2", "r1", "r2", "r1", "r5", "r3", "r2", "r2", "r2", "r2", "r2", 
      "r5", "r2", "r2", "r2", "r5", "r1", "r1", "r5", "r3", "r1", "r2", "r1", 
      "r5", "r5", "r2", "r2", "r1", "r2", "r3", "r3", "r1", "r1", "r5", "r5", 
      "r2", "r2", "r5", "r1", "r2", "r3", "r1", "r5", "r2", "r1", "r2", "r1", 
      "r2", "r1", "r2", "r1", "r2", "r2", "r2", "r1", "r2", "r2", "r2", "r2", 
      "r3", "r2", "r2", "r2", "r2", "r2", "r1", "r3", "r2", "r1", "r1", "r2", 
      "r5", "r2", "r2", "r2", "r2", "r5", "r5", "r1", "r2", "r2", "r2", "r2", 
      "r1", "r5", "r2", "r1", "r2", "r1", "r5", "r1", "r2", "r1", "r2", "r2", 
      "r1", "r2", "r2", "r3", "r3", "r2", "r1", "r2", "r3", "r2", "r2", "r2", 
      "r1", "r2", "r1", "r1", "r1", "r3", "r5", "r1", "r2", "r1", "r3", "r2", 
      "r2", "r5", "r5", "r3", "r1", "r2", "r1", "r3", "r1", "r1", "r2", "r2", 
      "r5", "r1", "r3", "r2", "r5", "r1", "r3", "r2", "r3", "r3", "r5", "r3", 
      "r1", "r1", "r2", "r2", "r1", "r2", "r2", "r1", "r2", "r2", "r2", "r2", 
      "r2", "r2", "r2", "r2", "r3", "r3", "r1", "r3", "r5", "r2", "r5", "r2", 
      "r3", "r1", "r1", "r5", "r1", "r2", "r5", "r3", "r1", "r2", "r2", "r1", 
      "r1", "r1", "r2", "r2", "r5", "r2", "r2", "r2", "r1", "r1", "r1", "r1", 
      "r5", "r1", "r2", "r1", "r2", "r5", "r1", "r2", "r2", "r5", "r1", "r5", 
      "r3", "r2", "r1", "r2", "r2", "r1", "r3", "r1", "r1", "r1", "r2", "r2", 
      "r5", "r3", "r3", "r1", "r5", "r1", "r1", "r1", "r1", "r1", "r3", "r1", 
      "r1", "r2", "r1", "r2", "r2", "r2", "r1", "r1", "r5", "r2", "r1", "r1", 
      "r2", "r1", "r1", "r1", "r2", "r2", "r1", "r2", "r2", "r3", "r2", "r5", 
      "r1", "r3", "r3", "r3", "r5", "r1", "r2", "r2", "r2", "r2", "r3", "r3", 
      "r1", "r2", "r1", "r5", "r5", "r2", "r2", "r5", "r2", "r1", "r3", "r2", 
      "r2", "r1", "r3", "r5", "r3", "r2", "r2", "r2", "r2", "r2", "r1", "r1", 
      "r1", "r1", "r2", "r1", "r2", "r5", "r2", "r1", "r2", "r1", "r1", "r1", 
      "r2", "r1", "r2", "r1", "r2", "r1", "r1", "r3", "r2", "r1", "r3", "r3", 
      "r1", "r3", "r1", "r1", "r2", "r1", "r2", "r2", "r5", "r1", "r3", "r1", 
      "r5", "r2", "r1", "r1", "r3", "r2", "r1", "r1", "r3", "r1", "r1", "r2", 
      "r5", "r2", "r5", "r3", "r5", "r3", "r5", "r3", "r5", "r3", "r2", "r1", 
      "r5", "r2", "r2", "r3", "r1", "r2", "r5", "r1", "r2", "r5", "r1", "r5", 
      "r2", "r3", "r1", "r1", "r2", "r3", "r1", "r3", "r2", "r2", "r1", "r2", 
      "r1", "r3", "r1", "r3", "r2", "r1", "r2", "r3", "r1", "r2", "r2", "r1", 
      "r2", "r3", "r1", "r5", "r1", "r2", "r1", "r2", "r2", "r2", "r2", "r1", 
      "r2", "r2", "r1", "r3", "r3", "r5", "r3", "r1", "r1", "r5", "r5", "r1", 
      "r2", "r5", "r2", "r3", "r2", "r3", "r2", "r1", "r1"}, 
    "LogProbabilities" -> CompressedData["
1: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
     "], 
    "CountMatrix" -> {{1018, 3, 0, 0, 0}, {2, 996, 6, 0, 0}, {0, 2, 382, 0, 
     0}, {0, 0, 0, 348, 0}}, "IndicesMatrix" -> {{CompressedData["
1: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
WcFqEljPRjaxjSR2sZs9HOEo/wPFAQZ1
       "], {532, 1394, 2247}, {}, {}, {}}, {{
       1140, 2713}, CompressedData["
1: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
       "], {962, 1416, 
       1458, 1645, 1934, 2408}, {}, {}}, {{}, {1470, 1832}, CompressedData["
1:eJwV0nlM13UYB/CvYpq0PIY6zSVT8PxJygxNEI95LKeYikuWgYo1bKlNcc2R
oDi8j6kjPDChrWLOKxBsc7WsBhLzJ9Oam04xD2wS85hTMw198cfr8/nz/Tzv
PX0zP5u9rE0QBHmerv4oetKbQSSQyBjGMYGpTCeFNDJZxMcsIZtc8vmSIkr4
mmN8z++EucgVGviLm/zNfzzjdXN1JoruRNOPGGKJ422SSGE26WSwiCw+pXXJ
bDawhxrCnOcSja0ltJVHF3oQzQASSGQSKcwklYWsZR2b2cJWdlJIEV9xlHIq
+Ilz1HOeBm5wkzs00cx9/qV9RBB0JJJe9GcIIeIYxnASSCSDT/icXNaQzzb2
UcYhTnKGOsLU08AdmmhuzW0XBK/RiSh68iYDCTGS0YxnIqnMIY2PyKOADWxk
OzvYQzEHOcIpTlNLHWEucJ0bNHOP+zzkMc9pIfIV89GV7vQgmsHEEU8SyYxl
FqnM4X0+IJ3FLCOHL8hlDevZyUHKOMRRfuQil7nGdRq5S5v2emMAQ3mLYcQz
gkTGMYVppJBJFivIJpe15LOOXRRTwrdUcIIqqrnKbR7xlGf8TwtBB3dEF3oR
w0CGMJIZvEcG81nAUpZTwF7KKOdnfuE3aqiljrOco54/uMQVGmjmIc95QdtX
g+ANetOHaGIJEc8IEniHJJIZywQm8y6pzGUe6axgJTnkU8JhjlDBKaq5RSNN
/ENER93QgW6EGM1EJjGDhWxiM9spophSvuEwxymngkqqqaGWMH/ygCe08KI1
M9L+9COGWEIMZRRJJJPGPD4kgyyWspxV5LCaPArYwW4K2c8BSvmOSqr4gdP8
ykvT4sKL
       "], {}, {}}, {{}, {}, {}, CompressedData["
1:eJwN02lozwEYB/DfZjNHbia3yRCKMfdsrnKW+btGilyRK3NfiZJrjrnLHDnG
MFnYckQjss0LsjJmKXL+YyvRhPJ58Xmel9/nqeeJm70stDQiCIIZSi29IbHE
0ZEe9GMQyQwjlYWks5qt7GQPeznDefLIp4BiSiinkh80ldmK1nRhMCkMZQJT
SGMaM5nFfNJZyUZ2sJMMDpLFGbLJo5BiSvhKmJ9ERAZBNDE0oDHNaUFf+pFE
CuMIMZl0NrKPs2Rzi0IeUMJTynjNWz7yiTDfCGrIph6tSaA3iaQwmonMZxv7
yeQ4WZwil6tc4yYFPKGIUsp4xTs+8pkwf/hLTJS9iaMDHelFbwaSRDJDGcZ4
QkxlOjNYxgp2kckBjnCMLE6TQy7XKOAFbwgTGe3mqEcTmtOS9nSlOwMYwnBG
MI4QaSxnD5kc4wSXyCOf2zzmJWVUEOYX/4iqKY8OdCaR6cxiLmvYxm4yyOIC
l7jCDQp5yBOeUspLynnLO97zhTCVVNMsJgja0JZ2xNGNEYxiEmksYBFbOcRh
jnKRy1znAY94TinlVFBJFdX8JsqDR1OT2tSlPg2IJZ5O9KAvSQxhNCHmMI9F
LGYpa9nObvZxmHPcpIC73KeIYp7zmvd85jtV/KCayNrmIZauJNCH/gwmmZGM
YiypLCGdFaxnM0c5ySlyyOU6RZTwjBdU8IGvfKeKf0TUCYJGtCeeniSQSBJj
mMdCVrGGdWxgE1vYzi4yuEg+t7nDPf4DFQy1Dg==
       "], {}}}, 
    "ExtendedClasses" -> {"r1", "r2", "r3", "r5"}, "Weights" -> 
    SparseArray[Automatic, {2757}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 1.7018498367791076`*^-6, "SingleEvaluationTime" -> 
    0.0016929166666666668`3., "Version" -> {11.3, 0}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.764676215347458*^9, 3.7646762507658978`*^9}, 
   3.7646763000517683`*^9, 3.7646774356299667`*^9, 3.7646778245587063`*^9},
 CellLabel->
  "Out[255]=",ExpressionUUID->"3419ad17-473e-46c0-a9d5-e7e22e14aae0"],

Cell[BoxData["0.995284729778745`"], "Output",
 CellChangeTimes->{{3.764676215347458*^9, 3.7646762507658978`*^9}, 
   3.7646763000517683`*^9, 3.7646774356299667`*^9, 3.764677824563717*^9},
 CellLabel->
  "Out[256]=",ExpressionUUID->"03e018da-4d8d-4a83-b978-95f38b1ec4f6"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2FNKb0hbfmvnjDf2/+PPZtb3PbNn+7Eyy/jK
JZzqm1PELZRD3tk/39Gwsrnyrf3X1ovp71a9tK88kbfjleob+5x/eb45M57Y
3/h6oP2L1TGSzXm1ufZ479N39hr7vT7nCt21l5j43femfIy9yvLvc/S3v7U/
o/DJOV/jtf2fhZYr3Jc8Jui/h1Ui69wf3rKHhdhsFrX1hmzv7F+670r6E/TG
PuaaWfK1Nc9IDjcAW6uABg==
   "], {{0, 0}, {4, 4}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1018", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1018", "\" examples of \"", "\"r1\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.9980392156862745`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.9970617042115573`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.9975502204801567`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1018, " examples of ", "r1", " correctly classified"}], 
         Row[{"Precision = ", 0.9980392156862745}], 
         Row[{"Recall = ", 0.9970617042115573}], 
         Row[{"FScore = ", 0.9975502204801567}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["2", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "2", "\" examples of \"", "\"r2\"", "\" misclassified as \"", 
             "\"r1\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.00196078431372549`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.00199203187250996`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{2, " examples of ", "r2", " misclassified as ", "r1"}], 
         Row[{"Column fraction = ", 0.00196078431372549}], 
         Row[{"Row fraction = ", 0.00199203187250996}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"r3\"", "\" misclassified as \"", 
             "\"r1\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "r3", " misclassified as ", "r1"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           TemplateBox[{
            "0", "\" example of \"", "\"r5\"", "\" misclassified as \"", 
             "\"r1\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "r5", " misclassified as ", "r1"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["3", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "3", "\" examples of \"", "\"r1\"", "\" misclassified as \"", 
             "\"r2\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.002997002997002997`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.002938295788442703`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{3, " examples of ", "r1", " misclassified as ", "r2"}], 
         Row[{"Column fraction = ", 0.002997002997002997}], 
         Row[{"Row fraction = ", 0.002938295788442703}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["996", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "996", "\" examples of \"", "\"r2\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.995004995004995`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.9920318725099602`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.9935162094763093`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{996, " examples of ", "r2", " correctly classified"}], 
         Row[{"Precision = ", 0.995004995004995}], 
         Row[{"Recall = ", 0.9920318725099602}], 
         Row[{"FScore = ", 0.9935162094763093}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["2", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "2", "\" examples of \"", "\"r3\"", "\" misclassified as \"", 
             "\"r2\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.001998001998001998`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.005208333333333333`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{2, " examples of ", "r3", " misclassified as ", "r2"}], 
         Row[{"Column fraction = ", 0.001998001998001998}], 
         Row[{"Row fraction = ", 0.005208333333333333}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"r5\"", "\" misclassified as \"", 
             "\"r2\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "r5", " misclassified as ", "r2"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"r1\"", "\" misclassified as \"", 
             "\"r3\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "r1", " misclassified as ", "r3"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["6", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "6", "\" examples of \"", "\"r2\"", "\" misclassified as \"", 
             "\"r3\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.015463917525773196`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.00597609561752988`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{6, " examples of ", "r2", " misclassified as ", "r3"}], 
         Row[{"Column fraction = ", 0.015463917525773196`}], 
         Row[{"Row fraction = ", 0.00597609561752988}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["382", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "382", "\" examples of \"", "\"r3\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.9845360824742269`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.9947916666666666`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.9896373056994819`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{382, " examples of ", "r3", " correctly classified"}], 
         Row[{"Precision = ", 0.9845360824742269}], 
         Row[{"Recall = ", 0.9947916666666666}], 
         Row[{"FScore = ", 0.9896373056994819}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"r5\"", "\" misclassified as \"", 
             "\"r3\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "r5", " misclassified as ", "r3"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"r1\"", "\" misclassified as \"", 
             "\"r5\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "r1", " misclassified as ", "r5"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"r2\"", "\" misclassified as \"", 
             "\"r5\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "r2", " misclassified as ", "r5"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"r3\"", "\" misclassified as \"", 
             "\"r5\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "r3", " misclassified as ", "r5"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["348", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "348", "\" examples of \"", "\"r5\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{348, " examples of ", "r5", " correctly classified"}], 
         Row[{"Precision = ", 1.}], 
         Row[{"Recall = ", 1.}], 
         Row[{"FScore = ", 1.}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1021", "\" example\"", "\"s\"", "\" of class \"", "\"r1\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.9970617042115573`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1021, " example", "s", " of class ", "r1"}], 
        Row[{"Recall = ", 0.9970617042115573}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1004", "\" example\"", "\"s\"", "\" of class \"", "\"r2\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.9920318725099602`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1004, " example", "s", " of class ", "r2"}], 
        Row[{"Recall = ", 0.9920318725099602}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "384", "\" example\"", "\"s\"", "\" of class \"", "\"r3\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.9947916666666666`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{384, " example", "s", " of class ", "r3"}], 
        Row[{"Recall = ", 0.9947916666666666}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "348", "\" example\"", "\"s\"", "\" of class \"", "\"r5\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{348, " example", "s", " of class ", "r5"}], 
        Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1020", "\" example\"", "\"s\"", "\" classified as \"", "\"r1\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.9980392156862745`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1020, " example", "s", " classified as ", "r1"}], 
        Row[{"Precision = ", 0.9980392156862745}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1001", "\" example\"", "\"s\"", "\" classified as \"", "\"r2\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.995004995004995`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1001, " example", "s", " classified as ", "r2"}], 
        Row[{"Precision = ", 0.995004995004995}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "388", "\" example\"", "\"s\"", "\" classified as \"", "\"r3\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.9845360824742269`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{388, " example", "s", " classified as ", "r3"}], 
        Row[{"Precision = ", 0.9845360824742269}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "348", "\" example\"", "\"s\"", "\" classified as \"", "\"r5\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{348, " example", "s", " classified as ", "r5"}], 
        Row[{"Precision = ", 1.}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{3.5, 
       FormBox[
        RotationBox["\"r1\"", BoxRotation -> 0.], TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["\"r2\"", BoxRotation -> 0.], TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"r3\"", BoxRotation -> 0.], TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["\"r5\"", BoxRotation -> 0.], TraditionalForm]}}, {{3.5, 
       FormBox["1021", TraditionalForm]}, {2.5, 
       FormBox["1004", TraditionalForm]}, {1.5, 
       FormBox["384", TraditionalForm]}, {0.5, 
       FormBox["348", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["1020", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["1001", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["388", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["348", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"r1\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"r2\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["\"r3\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["\"r5\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{{3.764676215347458*^9, 3.7646762507658978`*^9}, 
   3.7646763000517683`*^9, 3.7646774356299667`*^9, 3.764677824656209*^9},
 CellLabel->
  "Out[257]=",ExpressionUUID->"91dc5ef5-c67f-4e9b-b6f3-18d2ab957d99"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Decision Tree", "Subsubsection",
 CellChangeTimes->{{3.76467631573661*^9, 3.7646763172203617`*^9}, 
   3.764676371578775*^9},ExpressionUUID->"739e36c1-1522-4ed5-9a15-\
99dfca25edb2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cThermo1", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"training", ",", 
    RowBox[{"Method", "\[Rule]", "\"\<DecisionTree\>\""}], ",", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.764676323855932*^9, 3.764676329923699*^9}},
 CellLabel->
  "In[258]:=",ExpressionUUID->"65f70c7b-245e-45f0-a760-90635b2e983c"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"r1\"", "\"r2\"", "\"r3\"", "\"r5\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"r1\"", "\"r2\"", "\"r3\"", "\"r5\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"DecisionTree\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["6433", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 6433, "ClassNumber" -> 4, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical"], "f2" -> 
           Association["Type" -> "Numerical"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 2]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical", "Numerical"}, 
                "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> Automatic, 
                "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
         Association[
          "(f1f2)" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 2]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Version" -> {11.3, 0}, "ID" -> 5999172908886121309]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 6433, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {536.2599098398881, 5.532117796154375}, "Method" -> 
                   "Naive", "VectorLength" -> 2, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {536.2599098398881, 5.532117796154375}, 
                   "StandardDeviation" -> {418.52899360450834`, 
                    1.4147743899911247`}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 2, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                   True, "Invertibility" -> "Perfect", "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["LogTransformNumericalVector", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Indices" -> {2}, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                "Padder" -> MachineLearning`MLProcessor["Identity"], 
                "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                "Model" -> 
                Association[
                 "Matrix" -> {{-0.7071067811864277, -0.7071067811866675}, {
                   0.7071067811866675, -0.7071067811864277}}, "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {536.2599098398881, 5.532117796154375}, 
                    "StandardDeviation" -> {418.52899360450834`, 
                    1.4147743899911247`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 2, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.009472, "MaxTrainingMemory" -> 366736, 
                  "DataMemory" -> 103080, "FunctionMemory" -> 24312, 
                  "LanguageVersion" -> {11.3, 0}, "Date" -> 
                  DateObject[{
                    2019, 4, 19, 11, 50, 28.313642`8.204570718029307}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 2, "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Type" -> "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
             3183744061192450103]], 
           MachineLearning`MLProcessor["LogTransformNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Indices" -> {2}, "Version" -> {11.3, 0}, "ID" -> 
             8662679617415285566, "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]]]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Mean" -> {536.2599098398881, 5.532117796154375}, 
             "StandardDeviation" -> {418.52899360450834`, 
              1.4147743899911247`}, "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Version" -> {11.3, 0}, "ID" -> 2821404797631399570]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 6575292539387000017]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association["r1" -> 1, "r2" -> 2, "r3" -> 3, "r5" -> 4]}, 
             "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
             7125443539825747892, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 987800726533092851]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 4], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[
       "r1" -> 0.3647661954326549, "r2" -> 0.3798353270156905, "r3" -> 
        0.12443684946403603`, "r5" -> 0.13096162808761844`]], "Prior" -> 
    Automatic, "Utility" -> 
    SparseArray[
     Automatic, {4, 5}, 0., {
      1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    "Quality", "BatchProcessing" -> Automatic, "Model" -> 
    Association["Tree" -> MachineLearning`DecisionTree[
        Association[
        "FeatureIndices" -> 
         RawArray["Integer16",{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 
           2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
           2, 2}], "NumericalThresholds" -> 
         RawArray[
           "Real32",{-1.0423648357391357`, -0.8512191772460938, \
-0.7556463479995728, -0.7317531704902649, -0.6600735187530518, \
-0.6122871041297913, -0.5645006895065308, -0.5406075119972229, \
-0.46892786026000977`, -0.4450346529483795, -0.42114144563674927`, \
-0.32556861639022827`, -0.301675409078598, -0.22999580204486847`, \
-0.18220938742160797`, -0.18220938742160797`, -0.15831618010997772`, \
-0.11052975803613663`, -0.06274334341287613, -0.06274334341287613, \
-0.03885013982653618, -0.03885013982653618, -0.01495693251490593, 
           0.03282948210835457, 0.03282948210835457, 0.03282948210835457, 
           0.05672268941998482, 0.08061590045690536, 0.12840230762958527`, 
           0.6301596760749817, 
           0.6540528535842896, -2.2153515815734863`, -1.2853962182998657`, \
-1.004572868347168, -0.8972723484039307, -0.5204555988311768, \
-0.464328795671463, -0.3185761868953705, -0.27598339319229126`, \
-0.27598339319229126`, -0.16173100471496582`, -0.09468300640583038, \
-0.004710897337645292, 0.09980776906013489, 0.2521675229072571, 
           0.271480917930603, 0.308593213558197, 0.377438485622406, 
           0.4401693344116211, 0.48381444811820984`, 0.5381080508232117, 
           0.5510539412498474, 0.6124489903450012, 0.6468791365623474, 
           0.679709792137146, 0.7411226630210876, 0.7885148525238037, 
           0.7976235151290894, 0.8329280614852905, 0.8827837705612183, 
           0.9293533563613892, 0.9587780833244324}], "NominalSplits" -> {}, 
         "Children" -> 
         RawArray["Integer16",{{-7, 2}, {-17, -18}, {-19, -20}, {3, 33}, {32, 
           34}, {-8, -9}, {-10, -11}, {7, 36}, {-14, 38}, {35, 39}, {10, 
           31}, {42, -15}, {-41, -42}, {44, 16}, {-44, 48}, {46, -27}, {
           15, -28}, {49, 53}, {-62, -63}, {-59, -60}, {20, -47}, {54, -48}, {
           47, 28}, {-51, -52}, {-49, -50}, {-33, -34}, {59, 60}, {58, 30}, {
           62, -16}, {29, -6}, {23, -1}, {1, 4}, {-21, -22}, {-4, 6}, {5, 
           37}, {-12, -13}, {8, 40}, {-23, -24}, {-2, -3}, {
           9, -5}, {-39, -40}, {41, -25}, {12, 14}, {13, -26}, {-55, -56}, {
           45, -43}, {43, 18}, {-57, -58}, {17, 50}, {-29, -30}, {-45, -46}, {
           51, 21}, {52, 55}, {19, -61}, {22, -31}, {-32, 25}, {56, 26}, {57, 
           27}, {24, -35}, {-36, -37}, {-53, -54}, {61, -38}}], 
         "LeafValues" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBgkBOaF5xZnpeaopnXklqemqRoVkG
SJ09ELMAMSMYujIzMvBB2YwM1mDSCEy+ZGdkQEB2Bh4GJjCLGS7GBiZL4OIQ
mgmoElldFFz9Dyh9hRWimx3K5wWToVD9bHDzIPKscP0sUPNhfJgKJgZTMO0F
FeeG0kwMklDWYkYIHQ0mLyKZgGqiNpjkhPM54SaBSFsozQLXJwCmeeA+h5kE
cY8u3BaYPmRbQT5lRrOPHUVdNZp+frhr0GMC5h42tBBjg9KsSOYCAIpHFwE=

          "], "RootIndex" -> 11, "NominalDimension" -> 0]], "Processor" -> 
      MachineLearning`MLProcessor["Values", 
        Association[
        "Info" -> Association[
          "(f1f2)" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 2]], 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], "Method" -> 
      "DecisionTree", "Options" -> 
      Association[
       "DistributionSmoothing" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "FeatureFraction" -> 
        Association["Value" -> 1, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.045315354063797775`, 0.0044266331205234394`], "Accuracy" -> 
         PlusMinus[0.9857406403127197, 0.0016657385942970672`], 
         "EvaluationTime" -> 7.814395493395491*^-6, "TestSize" -> 8335, 
         "TrainingSize" -> 5146, "TrainingTime" -> 0.037324875, 
         "TrainingMemory" -> 845523., "ModelMemory" -> 6504., 
         "ExperimentCount" -> 7, "ModelUtility" -> 202.36256029504057`, 
         "MeanCrossEntropyHistory" -> {
           PlusMinus[0.04129617164953286, 0.004771031766582238], 
           PlusMinus[0.05153497552012166, 0.007020147905088797], 
           PlusMinus[0.05972812494176729, 0.007828504559462447], 
           PlusMinus[0.051249520723650424`, 0.00817635148767101], 
           PlusMinus[0.054309197469763815`, 0.009416479433500774], 
           PlusMinus[0.05364166948247408, 0.006522967155099705], 
           PlusMinus[0.03059015319481833, 0.005079603436234626]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.9892666061287273, 0.00426108800447323], 
           PlusMinus[0.9870348917293706, 0.0036144903943852377`], 
           PlusMinus[0.9859497213431876, 0.0037131840957427384`], 
           PlusMinus[0.985343175407761, 0.003789338124901469], 
           PlusMinus[0.9854646940116231, 0.004510786491594535], 
           PlusMinus[0.9836223373482126, 0.003971782002529977], 
           PlusMinus[0.9836555269422675, 0.00396096651423194]}, 
         "Configuration" -> {
          "DecisionTree", "DistributionSmoothing" -> 1, "FeatureFraction" -> 
           1}, "FinalTrainingSize" -> 6433], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 7], 
          TypeSystem`Vector[TypeSystem`AnyType, 7], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 205479992515462]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.9141125537591906, 0.048484011674645715`], 
              "Accuracy" -> 
              PlusMinus[0.7259194106480941, 0.04409960138051838], 
              "EvaluationTime" -> 8.384469696969694*^-6, "TestSize" -> 3500, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.0050272727272727274`, 
              "TrainingMemory" -> 63536., "ModelMemory" -> 5480., 
              "ExperimentCount" -> 10, "ModelUtility" -> 0.5061301560852678, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.9347843080928538, 0.0449046861556598], 
                PlusMinus[0.8789178102857939, 0.03892639718728712], 
                PlusMinus[1.0449369851825714`, 0.04431189975105496], 
                PlusMinus[0.7679500440658165, 0.02414523823178481], 
                PlusMinus[0.8395322698525043, 0.03841910399598907], 
                PlusMinus[1.0230689411453153`, 0.028774742555510175`], 
                PlusMinus[0.8672247182963868, 0.030401522294294284`], 
                PlusMinus[0.8787698947757818, 0.02008117692131183], 
                PlusMinus[0.8431837715157386, 0.017247371916651894`], 
                PlusMinus[1.2938122335683593`, 0.027757562997190923`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7319002958223656, 0.031530873859955795`], 
                PlusMinus[0.7563144820451108, 0.03061819365303892], 
                PlusMinus[0.6720283179100526, 0.03333135062051014], 
                PlusMinus[0.8709227768135692, 0.01981661471767575], 
                PlusMinus[0.8174842204320667, 0.022584368221359785`], 
                PlusMinus[0.6595517130359045, 0.02377718597070395], 
                PlusMinus[0.7516914186829006, 0.021614847965270006`], 
                PlusMinus[0.7461318433178887, 0.019583144437982272`], 
                PlusMinus[0.8034786586345192, 0.017883082941498027`], 
                PlusMinus[0.3706399350486654, 0.021456646710073808`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.472396112026646, 0.02418253152873185], "Accuracy" -> 
              PlusMinus[0.8843522811901708, 0.01431373118518335], 
              "EvaluationTime" -> 8.162520833333334*^-6, "TestSize" -> 3000, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.006162249999999999, 
              "TrainingMemory" -> 72386., "ModelMemory" -> 5480., 
              "ExperimentCount" -> 7, "ModelUtility" -> 1.8965604412366253`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.5580531939188664, 0.053799985446244536`], 
                PlusMinus[0.46878211750641413`, 0.039819266579350726`], 
                PlusMinus[0.42667407754518133`, 0.031248825997169962`], 
                PlusMinus[0.5076172205649628, 0.027886907434869667`], 
                PlusMinus[0.40744726325768765`, 0.026440774361978222`], 
                PlusMinus[0.47655799690082706`, 0.027681505403190854`], 
                PlusMinus[0.5391475462592662, 0.03289481866010056]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8245860422868198, 0.0272139810431191], 
                PlusMinus[0.86276338581745, 0.02471799947552772], 
                PlusMinus[0.8787538309320073, 0.016716003284144666`], 
                PlusMinus[0.8597248866819988, 0.01580016019995197], 
                PlusMinus[0.9386251130099165, 0.011287404238607591`], 
                PlusMinus[0.8707139082240495, 0.013928063827891258`], 
                PlusMinus[0.8590612885434141, 0.014459730950289008`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.19519074370600448`, 0.01155506320837577], 
              "Accuracy" -> 
              PlusMinus[0.9592678636716349, 0.004380374485266233], 
              "EvaluationTime" -> 8.118689393939393*^-6, "TestSize" -> 5900, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.008553181818181817, 
              "TrainingMemory" -> 97877.81818181819, "ModelMemory" -> 
              5549.818181818182, "ExperimentCount" -> 10, "ModelUtility" -> 
              11.073502341729585`, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.2150493190400629, 0.040408300179073035`], 
                PlusMinus[0.15437332604410425`, 0.020439538430326785`], 
                PlusMinus[0.23546670493747432`, 0.02747844308923068], 
                PlusMinus[0.16924445910892663`, 0.014393463667397459`], 
                PlusMinus[0.21794982683784542`, 0.017668730648285915`], 
                PlusMinus[0.248327296100448, 0.021576122857186922`], 
                PlusMinus[0.2216837849617732, 0.021963153229332143`], 
                PlusMinus[0.16807425223353498`, 0.013926065727149665`], 
                PlusMinus[0.2025731457246471, 0.02285403582512362], 
                PlusMinus[0.21081301602305683`, 0.01948183617084905]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.958026892998748, 0.012532557621660822`], 
                PlusMinus[0.9572286851966281, 0.01246954865509191], 
                PlusMinus[0.9539917593554532, 0.010075661213316583`], 
                PlusMinus[0.9694746969525169, 0.007818370052368585], 
                PlusMinus[0.9560916266400703, 0.008999609760146451], 
                PlusMinus[0.9351152262429678, 0.00976702773076512], 
                PlusMinus[0.9515470105216031, 0.008672066535354643], 
                PlusMinus[0.9739261975055106, 0.006787489491973901], 
                PlusMinus[0.9642297258213454, 0.0076978743916803], 
                PlusMinus[0.9528102446573622, 0.008002658313381553]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.08072539505594552, 0.007654688427175289], 
              "Accuracy" -> 
              PlusMinus[0.9780058002694332, 0.002856105237060302], 
              "EvaluationTime" -> 8.148595238095239*^-6, "TestSize" -> 4000, 
              "TrainingSize" -> 1000, "TrainingTime" -> 0.021233571428571425`,
               "TrainingMemory" -> 192957.71428571426`, "ModelMemory" -> 
              5955.428571428571, "ExperimentCount" -> 6, "ModelUtility" -> 
              63.83931731588366, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.0657032673323323, 0.008627735984893506], 
                PlusMinus[0.06581743610325552, 0.009242557752069598], 
                PlusMinus[0.07775735457593559, 0.008935596490011525], 
                PlusMinus[0.08603510712800923, 0.011292330983665284`], 
                PlusMinus[0.0975642122925478, 0.010361280668389131`], 
                PlusMinus[0.10412102213821602`, 0.010431379020823644`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9824623342365758, 0.007836786915662586], 
                PlusMinus[0.9779943413395098, 0.0075728658768939765`], 
                PlusMinus[0.9798096822466628, 0.00668885472725348], 
                PlusMinus[0.9778070188440171, 0.006427207935723031], 
                PlusMinus[0.9771030202829487, 0.00607811731391871], 
                PlusMinus[0.9754089319704133, 0.005578966770419074]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.045315354063797775`, 0.0044266331205234394`], 
              "Accuracy" -> 
              PlusMinus[0.9857406403127197, 0.0016657385942970672`], 
              "EvaluationTime" -> 7.814395493395491*^-6, "TestSize" -> 8335, 
              "TrainingSize" -> 5146, "TrainingTime" -> 0.037324875, 
              "TrainingMemory" -> 845523., "ModelMemory" -> 6504., 
              "ExperimentCount" -> 7, "ModelUtility" -> 202.36256029504057`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.04129617164953286, 0.004771031766582238], 
                PlusMinus[0.05153497552012166, 0.007020147905088797], 
                PlusMinus[0.05972812494176729, 0.007828504559462447], 
                PlusMinus[0.051249520723650424`, 0.00817635148767101], 
                PlusMinus[0.054309197469763815`, 0.009416479433500774], 
                PlusMinus[0.05364166948247408, 0.006522967155099705], 
                PlusMinus[0.03059015319481833, 0.005079603436234626]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9892666061287273, 0.00426108800447323], 
                PlusMinus[0.9870348917293706, 0.0036144903943852377`], 
                PlusMinus[0.9859497213431876, 0.0037131840957427384`], 
                PlusMinus[0.985343175407761, 0.003789338124901469], 
                PlusMinus[0.9854646940116231, 0.004510786491594535], 
                PlusMinus[0.9836223373482126, 0.003971782002529977], 
                PlusMinus[0.9836555269422675, 0.00396096651423194]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 7.814395493395491*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.045315354063797775`, 0.0044266331205234394`], 
             "ModelMemory" -> 6504., "TrainingMemory" -> 845523., 
             "TrainingTime" -> 0.05168699306831431], "Index" -> 1]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"Value"}, {
              TypeSystem`Atom[Integer]}], 2]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            5], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 1], 
        Association["ID" -> 205475697548166]], "MaxTrainingSize" -> 6433, 
      "LastReportingTime" -> 3.764663429804699`16.328301144434413*^9, 
      "PreprocessorEvaluationTime" -> 4.33935546875`3.*^-6, 
      "PreprocessorMemory" -> 48112, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.20480000000000007`, 
          "ElapsedTimes" -> 0.214596, "ExperimentCounts" -> 10], 
         Association[
         "TrainingSizes" -> 50, "TimeBudgets" -> 0.25600000000000006`, 
          "ElapsedTimes" -> 0.260284, "ExperimentCounts" -> 7], 
         Association[
         "TrainingSizes" -> 250, "TimeBudgets" -> 0.32000000000000006`, 
          "ElapsedTimes" -> 0.307622, "ExperimentCounts" -> 10], 
         Association[
         "TrainingSizes" -> 1000, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.418789, "ExperimentCounts" -> 6], 
         Association[
         "TrainingSizes" -> 5146, "TimeBudgets" -> 0.5, "ElapsedTimes" -> 
          0.47743499999999994`, "ExperimentCounts" -> 7]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 5], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[205484287482758]], "ID" -> 
         205488582450054]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {330}, "ID" -> 
           8102574889493170096], "f2" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {731}, "ID" -> 
           6701357641463675607]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 2.066456, "MaxTrainingMemory" -> 4826120, 
      "DataMemory" -> 1185464, "FunctionMemory" -> 136376, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2019, 4, 19, 11, 50, 30.346042`8.234677035543367}, 
        "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Unix", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.764676333400185*^9, 3.764677443029532*^9, 
  3.764677830364388*^9},
 CellLabel->
  "Out[258]=",ExpressionUUID->"393b417d-101b-4aa1-87f5-78add7c18088"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierInformation", "[", "cThermo1", "]"}]], "Input",
 CellChangeTimes->{{3.764676454100181*^9, 3.7646764617470417`*^9}},
 CellLabel->
  "In[236]:=",ExpressionUUID->"759fe071-9565-4cae-9763-6965d006e3f4"],

Cell[BoxData[
 TagBox[
  StyleBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        FrameBox[
         StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold],
         FrameMargins->{{10, 5}, {-5, 5}},
         FrameStyle->None,
         StripOnInput->False],
        Alignment->{Left, Bottom},
        Background->RGBColor[0.93119, 0.93119, 0.93119],
        Frame->{{False, False}, {True, False}},
        FrameStyle->Opacity[0.1],
        ItemSize->{Automatic, 1},
        StripOnInput->False]},
      {
       ItemBox[
        TagBox[
         FrameBox[
          TagBox[GridBox[{
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Input type\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              RowBox[{"{", 
               RowBox[{"\<\"Numerical\"\>", ",", "\<\"Numerical\"\>"}], "}"}]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"Classes\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{",","\",\"","\"r1\"","\"r2\"","\"r3\"","\"r5\""},
               "RowWithSeparators"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Method\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox["\<\"DecisionTree\"\>",
                TemplateBox[{
                  TagBox[
                   
                   DynamicModuleBox[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
                    Data`UnorderedAssociation[
                    "RowCount" -> 2, "Length" -> 2, "InitialType" -> 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[
                    TypeSystem`Enumeration[
                    "DistributionSmoothing", "FeatureFraction"]], 
                    TypeSystem`Atom[Integer], 2], "Shape" -> 
                    TypeSystem`PackageScope`Limited[
                    TypeSystem`PackageScope`ColumnShape[
                    TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`AtomShape[189.], 
                    TypeSystem`PackageScope`AtomShape[34]]], 2, {}], 
                    "InitialData" -> 
                    TypeSystem`PackageScope`CacheHandle[301981281], "Type" -> 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[
                    TypeSystem`Enumeration[
                    "DistributionSmoothing", "FeatureFraction"]], 
                    TypeSystem`Atom[Integer], 2], "HandleQ" -> True, 
                    "RowTarget" -> 20, "Data" -> 
                    TypeSystem`PackageScope`CacheHandle[301981281]], 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
                    DynamicModule[{
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
                    Style[
                    Grid[{{
                    Item[
                    Pane[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["DistributionSmoothing", 
                    Style[
                    "DistributionSmoothing", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 57134263][{
                    Key["DistributionSmoothing"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    57134263][
                    GeneralUtilities`Slice[
                    Key["DistributionSmoothing"]]], "Mouse"], 
                    ImageSize -> {{189., Full}, Automatic}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["1"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    57134263][
                    GeneralUtilities`Slice[
                    Key["DistributionSmoothing"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Pane[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["FeatureFraction", 
                    Style[
                    "FeatureFraction", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 57134263][{
                    Key["FeatureFraction"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    57134263][
                    GeneralUtilities`Slice[
                    Key["FeatureFraction"]]], "Mouse"], 
                    ImageSize -> {{189., Full}, Automatic}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["1"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    57134263][
                    GeneralUtilities`Slice[
                    Key["FeatureFraction"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}}, 
                    BaseStyle -> {ContextMenu -> {
                    MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                    FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
                    Dividers -> All, FrameStyle -> GrayLevel[0.85], 
                    BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
                    LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
                    False, ShowAutoStyles -> False]], 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
                    TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
                    Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
                    Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
                    
                    Module[{
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                    TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                    If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                    TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 57134263][
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                    Not[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
                    TypeSystem`SparseGrid[
                    TypeSystem`H["(data no longer present)"]], 
                    If[GeneralUtilities`$DebugMode, 
                    
                    Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    "  ", 
                    TypeSystem`NestedGrid`PackagePrivate`formatState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
                    DynamicModuleValues :> {}], 
                    TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
                    TypeSystem`PackageScope`Pathbar[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    57134263]]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
                    Dynamic[
                    Replace[
                    MouseAnnotation[Null], {
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    57134263][Null] -> "", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    57134263][
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                    Blank[]]] :> (
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
                    TypeSystem`NestedGrid`PackagePrivate`path; 
                    TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
                    TypeSystem`NestedGrid`PackagePrivate`path, 
                    TypeSystem`NestedGrid`PackagePrivate`makePathElements]), 
                    Null :> Spacer[10], Blank[] :> Spacer[10]}], 
                    TrackedSymbols :> {}], FrameStyle -> None, ImageMargins -> 
                    0, FrameMargins -> 0, Alignment -> Top, 
                    ImageSize -> {Automatic, 14}]}, 
                    DynamicBox[
                    ToBoxes[
                    Column[
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], 
                    Spacings -> 
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
                    0, {{}, {0, 0.05, 0}}]], StandardForm], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
                    Initialization :> Block[{$ContextPath = $ContextPath}, 
                    Needs["TypeSystem`"]], DynamicModuleValues :> {}, 
                    BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
                    TypeSystem`NestedGrid`PackagePrivate`deleteState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
                   DefaultBaseStyle -> "Deploy"]}, "CopyTag", 
                 DisplayFunction -> (#& ), 
                 InterpretationFunction -> ("Dataset[<>]"& )]],
               Annotation[#, 
                Dataset[
                 Association[
                 "DistributionSmoothing" -> 1, "FeatureFraction" -> 1], 
                 TypeSystem`Assoc[
                  TypeSystem`Atom[
                   TypeSystem`Enumeration[
                   "DistributionSmoothing", "FeatureFraction"]], 
                  TypeSystem`Atom[Integer], 2], 
                 Association["ID" -> 124863456369158]], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Accuracy\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                
                TemplateBox[{
                 TemplateBox[{
                   "98.3794120677283387977`3.", "\"%\"", "percent", 
                    "\"Percent\""}, "QuantityPostfix", SyntaxForm -> Mod],
                  StyleBox[
                   TemplateBox[{"\" \[PlusMinus] \"", 
                    
                    TemplateBox[{
                    "0.3600269022030609389`2.", "\"%\"", "percent", 
                    "\"Percent\""}, "QuantityPostfix", SyntaxForm -> Mod]}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.976593582633222268`3.", 
                  "\", \"", "0.9909946587213446234`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.976593582633222268`3., 
                  ", ", 0.9909946587213446234`3., "]"}], "Tooltip"]& ]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox[
                 TagBox[
                  TooltipBox[
                  "\"Loss\"", "\"Mean cross entropy\"", LabelStyle -> 
                   "TextStyling"], 
                  Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"0.0566865562911755549`3.",StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0075005923036673191`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.0416853716838409133`3.",
                   "\", \"", "0.0716877408985101966`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.0416853716838409133`3., 
                  ", ", 0.0716877408985101966`3., "]"}], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Single evaluation time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "1.3`",RowBox[{
                 "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
                  "\"example\""}],"milliseconds per example",FractionBox[
                "\"Milliseconds\"", "\"Examples\""]},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Batch evaluation speed\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "309.`",
                RowBox[{
                 "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                  "\[InvisibleSpace]", "\"ms\""}],"examples per millisecond",
                FractionBox["\"Examples\"", "\"Milliseconds\""]},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Classifier memory\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"130.`","\"kB\"","kilobytes","\"Kilobytes\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Training examples used\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"6433","\"examples\"","examples","\"Examples\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Training time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"1.98`","\"s\"","seconds","\"Seconds\""},
               "Quantity"]},
             {
              ItemBox[
               
               DynamicModuleBox[{
                MachineLearning`file4Automation`PackagePrivate`pos$$ = 1}, 
                DynamicBox[ToBoxes[
                  Show[
                   Part[{
                    Graphics[{{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.033831459291300624`}, {
                    3.912023005428146, -0.7660017664154111}, {
                    5.521460917862246, -1.5149009335616197`}, {
                    6.907755278982137, -2.2042310770549047`}, {
                    8.545974992841689, -2.870218198810063}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, -0.21615301608525528`}, {
                    2.302585092994046, -2.6878966420161086`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, -0.033831459291300624`}}, {{
                    3.912023005428146, -0.7660017664154111}}, {{
                    5.521460917862246, -1.5149009335616197`}}, {{
                    6.907755278982137, -2.2042310770549047`}}, {{
                    8.545974992841689, -2.870218198810063}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, -0.21615301608525528`}}, {{
                    2.302585092994046, -2.6878966420161086`}}}]}, {}}}, {}, \
{}, {}, {}}}, {{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    Line[{{2.302585092994046, -0.11726669293026075`}, {
                    2.302585092994046, 0.04317525987671888}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.912023005428146, -0.8167270361499213}, {
                    3.912023005428146, -0.7177258074831341}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.521460917862246, -1.5729079149918286`}, {
                    5.521460917862246, -1.4600750774856068`}}]}, {
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{6.907755278982137, -2.3202300983682154`}, {
                    6.907755278982137, -2.100300067969642}}]}, {
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{8.545974992841689, -3.0121469809920693`}, {
                    8.545974992841689, -2.7459522659748643`}}]}}}, {}, {}, \
{}, {}}}}, {DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.0696147194275873`, -3.0760849782912643`},
                     PlotRange -> {{2.170613436291659, 
                    Log[
                    6433]}, {-3.0277952398944388`, -0.033831459291300624`}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.0696147194275873`, -3.0760849782912643`},
                     DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.170613436291659, 
                    Log[
                    6433]}, {-3.0277952398944388`, -0.033831459291300624`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.6650934608506565}, {
                    3.912023005428146, 0.8978310535369386}, {
                    5.521460917862246, 0.9431667888453995}, {
                    6.907755278982137, 0.9715631172667075}, {
                    8.545974992841689, 0.9837941206772833}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, 0.8198284338977362}, {
                    2.302585092994046, 0.7981121530207878}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.6650934608506565}}, {{
                    3.912023005428146, 0.8978310535369386}}, {{
                    5.521460917862246, 0.9431667888453995}}, {{
                    6.907755278982137, 0.9715631172667075}}, {{
                    8.545974992841689, 0.9837941206772833}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.8198284338977362}}, {{
                    2.302585092994046, 
                    0.7981121530207878}}}]}, {}}}, {}, {}, {}, {}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, 
                    AxesOrigin -> {2.0696147194275873`, 0.6492294668909507}, 
                    PlotRange -> {{2.170613436291659, 
                    Log[6433]}, {0.6650934608506565, 1}}, PlotRangeClipping -> 
                    True, ImagePadding -> {{30, 10}, {37, 0}}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.0696147194275873`, 0.6492294668909507}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.170613436291659, 
                    Log[6433]}, {0.6650934608506565, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
                    Graphics[{{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.033831459291300624`}, {
                    3.912023005428146, -0.7660017664154111}, {
                    5.521460917862246, -1.5149009335616197`}, {
                    6.907755278982137, -2.2042310770549047`}, {
                    8.545974992841689, -2.870218198810063}}]}, 
                    "DecisionTree"]}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.0696147194275873`, -3.0760849782912643`},
                     PlotRange -> {{2.170613436291659, 
                    Log[
                    6433]}, {-3.0277952398944388`, -0.033831459291300624`}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.0696147194275873`, -3.0760849782912643`},
                     DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.170613436291659, 
                    Log[
                    6433]}, {-3.0277952398944388`, -0.033831459291300624`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}]}, 
                    MachineLearning`file4Automation`PackagePrivate`pos$$], 
                   PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file4Automation`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file4Automation`PackagePrivate`pos$$ - 
                    1, 1], Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file4Automation`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file4Automation`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file4Automation`PackagePrivate`pos$$ + 
                    1, 
                    Length[{
                    Graphics[{{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.033831459291300624`}, {
                    3.912023005428146, -0.7660017664154111}, {
                    5.521460917862246, -1.5149009335616197`}, {
                    6.907755278982137, -2.2042310770549047`}, {
                    8.545974992841689, -2.870218198810063}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, -0.21615301608525528`}, {
                    2.302585092994046, -2.6878966420161086`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, -0.033831459291300624`}}, {{
                    3.912023005428146, -0.7660017664154111}}, {{
                    5.521460917862246, -1.5149009335616197`}}, {{
                    6.907755278982137, -2.2042310770549047`}}, {{
                    8.545974992841689, -2.870218198810063}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, -0.21615301608525528`}}, {{
                    2.302585092994046, -2.6878966420161086`}}}]}, {}}}, {}, \
{}, {}, {}}}, {{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, -0.11726669293026075`}, {
                    2.302585092994046, 0.04317525987671888}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.912023005428146, -0.8167270361499213}, {
                    3.912023005428146, -0.7177258074831341}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.521460917862246, -1.5729079149918286`}, {
                    5.521460917862246, -1.4600750774856068`}}]}, {
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{6.907755278982137, -2.3202300983682154`}, {
                    6.907755278982137, -2.100300067969642}}]}, {
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{8.545974992841689, -3.0121469809920693`}, {
                    8.545974992841689, -2.7459522659748643`}}]}}}, {}, {}, \
{}, {}}}}, {DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.0696147194275873`, -3.0760849782912643`},
                     PlotRange -> {{2.170613436291659, 
                    Log[
                    6433]}, {-3.0277952398944388`, -0.033831459291300624`}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.0696147194275873`, -3.0760849782912643`},
                     DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {"CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.170613436291659, 
                    Log[
                    6433]}, {-3.0277952398944388`, -0.033831459291300624`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.6650934608506565}, {
                    3.912023005428146, 0.8978310535369386}, {
                    5.521460917862246, 0.9431667888453995}, {
                    6.907755278982137, 0.9715631172667075}, {
                    8.545974992841689, 0.9837941206772833}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, 0.8198284338977362}, {
                    2.302585092994046, 0.7981121530207878}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.6650934608506565}}, {{
                    3.912023005428146, 0.8978310535369386}}, {{
                    5.521460917862246, 0.9431667888453995}}, {{
                    6.907755278982137, 0.9715631172667075}}, {{
                    8.545974992841689, 0.9837941206772833}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.8198284338977362}}, {{
                    2.302585092994046, 
                    0.7981121530207878}}}]}, {}}}, {}, {}, {}, {}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, 
                    AxesOrigin -> {2.0696147194275873`, 0.6492294668909507}, 
                    PlotRange -> {{2.170613436291659, 
                    Log[6433]}, {0.6650934608506565, 1}}, PlotRangeClipping -> 
                    True, ImagePadding -> {{30, 10}, {37, 0}}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.0696147194275873`, 0.6492294668909507}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {"CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.170613436291659, 
                    Log[6433]}, {0.6650934608506565, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
                    Graphics[{{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.033831459291300624`}, {
                    3.912023005428146, -0.7660017664154111}, {
                    5.521460917862246, -1.5149009335616197`}, {
                    6.907755278982137, -2.2042310770549047`}, {
                    8.545974992841689, -2.870218198810063}}]}, 
                    "DecisionTree"]}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.0696147194275873`, -3.0760849782912643`},
                     PlotRange -> {{2.170613436291659, 
                    Log[
                    6433]}, {-3.0277952398944388`, -0.033831459291300624`}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.0696147194275873`, -3.0760849782912643`},
                     DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {"CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.170613436291659, 
                    Log[
                    6433]}, {-3.0277952398944388`, -0.033831459291300624`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}]}]], Appearance -> 
                    "Frameless"]}}, Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                 ImageSizeCache->{413., {148., 154.}}],
                DynamicModuleValues:>{}],
               Alignment->Center,
               StripOnInput->False], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            ColumnsEqual->False,
            
            GridBoxAlignment->{
             "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
              "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
            GridBoxDividers->{"Columns" -> {False, {
                 Opacity[0.15]}, False}},
            
            GridBoxItemSize->{
             "Columns" -> {Automatic, {Automatic}}, "ColumnsIndexed" -> {}, 
              "Rows" -> {{1.}}, "RowsIndexed" -> {}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], 
                Offset[1.1199999999999999`], {
                 Offset[1.75]}, 
                Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.8]}, 
                Offset[0.2]}, "RowsIndexed" -> {}}],
           "Grid"],
          FrameMargins->{{10, 10}, {10, 5}},
          FrameStyle->None,
          StripOnInput->False],
         Deploy,
         DefaultBaseStyle->"Deploy"],
        Alignment->Center,
        BaseStyle->{
         FontWeight -> "Light", FontSize -> 12, FontFamily -> "DejaVu Sans", 
          NumberMarks -> False, Deployed -> False},
        StripOnInput->False]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Background->RGBColor[0.9802, 0.9802, 0.9802],
    FrameMargins->{{0, 0}, {0, 0}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   StripOnInput->False,
   LineBreakWithin->False],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{3.764676463267325*^9, 3.764677446163966*^9},
 CellLabel->
  "Out[236]=",ExpressionUUID->"95f4ec96-3cd0-47cc-b1d7-5f0d37f290bb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"cm1", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"cThermo1", ",", "validation"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"cm1", "[", "\"\<Accuracy\>\"", "]"}], "\[IndentingNewLine]", 
 RowBox[{"cm1", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.764676341285375*^9, 3.7646763466938*^9}},
 CellLabel->
  "In[259]:=",ExpressionUUID->"b5d3c949-2f55-4628-90b5-93c471daa97e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierMeasurementsObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"DecisionTree\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2757", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"DecisionTree\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2757", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["4", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  RowBox[{
                   "0.9891186071817192893`7.215647816658381", "\[PlusMinus]", 
                    "0.0019761814739367536`2."}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierMeasurementsObject[
   Association["Model" -> ClassifierFunction[
      Association[
      "ExampleNumber" -> 6433, "ClassNumber" -> 4, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Numerical"], "f2" -> 
              Association["Type" -> "Numerical"]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["Transpose", 
                  Association["FeatureNumber" -> 2]], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Numerical", "Numerical"}, 
                   "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> 
                   Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
            Association[
             "(f1f2)" -> 
              Association["Type" -> "NumericalVector", "Weight" -> 2]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f2" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "(f1f2)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2]], 
                "Version" -> {11.3, 0}, "ID" -> 5999172908886121309]], 
              MachineLearning`MLProcessor["ImputeMissing", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                Association[
                 "(f1f2)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2]], 
                "Imputer" -> (DimensionReducerFunction[
                  Association[
                  "ExampleNumber" -> 6433, "Imputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {536.2599098398881, 5.532117796154375}, 
                    "Method" -> "Naive", "VectorLength" -> 2, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {536.2599098398881, 5.532117796154375}, 
                    "StandardDeviation" -> {418.52899360450834`, 
                    1.4147743899911247`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 2, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                   MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                    True, "Invertibility" -> "Perfect", "Missing" -> 
                    "Allowed"]], "Processor" -> 
                   MachineLearning`MLProcessor[
                    "LogTransformNumericalVector", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Indices" -> {2}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], "Padder" -> 
                   MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                   MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                   "Model" -> 
                   Association[
                    "Matrix" -> {{-0.7071067811864277, -0.7071067811866675}, {
                    0.7071067811866675, -0.7071067811864277}}, "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {536.2599098398881, 5.532117796154375}, 
                    "StandardDeviation" -> {418.52899360450834`, 
                    1.4147743899911247`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 2, "Method" -> "Linear"], 
                   "PerformanceGoal" -> Automatic, "Invertibility" -> 
                   "Approximate", "Log" -> 
                   Association[
                    "TrainingTime" -> 0.009472, "MaxTrainingMemory" -> 366736,
                     "DataMemory" -> 103080, "FunctionMemory" -> 24312, 
                    "LanguageVersion" -> {11.3, 0}, "Date" -> 
                    DateObject[{
                    2019, 4, 19, 11, 50, 28.313642`8.204570718029307}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                    "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
                  "ImputedVectors", PerformanceGoal -> "Quality"]& ), 
                "Method" -> "DimensionReduction", "VectorLength" -> 2, 
                "Output" -> 
                Association[
                 "(f1f2)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2]], 
                "Type" -> "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
                3183744061192450103]], 
              MachineLearning`MLProcessor["LogTransformNumericalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "(f1f2)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2]], 
                "Indices" -> {2}, "Version" -> {11.3, 0}, "ID" -> 
                8662679617415285566, "Output" -> 
                Association[
                 "(f1f2)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2]]]], 
              
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "(f1f2)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2]], 
                "Mean" -> {536.2599098398881, 5.532117796154375}, 
                "StandardDeviation" -> {418.52899360450834`, 
                 1.4147743899911247`}, "Output" -> 
                Association[
                 "(f1f2)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2]], 
                "Version" -> {11.3, 0}, "ID" -> 2821404797631399570]]}, 
            "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            True, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 6575292539387000017]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association["r1" -> 1, "r2" -> 2, "r3" -> 3, "r5" -> 4]}, 
                "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
                7125443539825747892, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 987800726533092851]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 4], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]},
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
         "Marginal" -> 
         Association[
          "r1" -> 0.3647661954326549, "r2" -> 0.3798353270156905, "r3" -> 
           0.12443684946403603`, "r5" -> 0.13096162808761844`]], "Prior" -> 
       Automatic, "Utility" -> 
       SparseArray[
        Automatic, {4, 5}, 0., {
         1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       "Quality", "BatchProcessing" -> Automatic, "Model" -> 
       Association["Tree" -> MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> 
            RawArray["Integer16",{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 
              2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
              2, 2, 2, 2, 2}], "NumericalThresholds" -> 
            RawArray[
              "Real32",{-1.0423648357391357`, -0.8512191772460938, \
-0.7556463479995728, -0.7317531704902649, -0.6600735187530518, \
-0.6122871041297913, -0.5645006895065308, -0.5406075119972229, \
-0.46892786026000977`, -0.4450346529483795, -0.42114144563674927`, \
-0.32556861639022827`, -0.301675409078598, -0.22999580204486847`, \
-0.18220938742160797`, -0.18220938742160797`, -0.15831618010997772`, \
-0.11052975803613663`, -0.06274334341287613, -0.06274334341287613, \
-0.03885013982653618, -0.03885013982653618, -0.01495693251490593, 
              0.03282948210835457, 0.03282948210835457, 0.03282948210835457, 
              0.05672268941998482, 0.08061590045690536, 0.12840230762958527`, 
              0.6301596760749817, 
              0.6540528535842896, -2.2153515815734863`, -1.2853962182998657`, \
-1.004572868347168, -0.8972723484039307, -0.5204555988311768, \
-0.464328795671463, -0.3185761868953705, -0.27598339319229126`, \
-0.27598339319229126`, -0.16173100471496582`, -0.09468300640583038, \
-0.004710897337645292, 0.09980776906013489, 0.2521675229072571, 
              0.271480917930603, 0.308593213558197, 0.377438485622406, 
              0.4401693344116211, 0.48381444811820984`, 0.5381080508232117, 
              0.5510539412498474, 0.6124489903450012, 0.6468791365623474, 
              0.679709792137146, 0.7411226630210876, 0.7885148525238037, 
              0.7976235151290894, 0.8329280614852905, 0.8827837705612183, 
              0.9293533563613892, 0.9587780833244324}], "NominalSplits" -> {},
             "Children" -> 
            RawArray["Integer16",{{-7, 2}, {-17, -18}, {-19, -20}, {3, 33}, {
              32, 34}, {-8, -9}, {-10, -11}, {7, 36}, {-14, 38}, {35, 39}, {
              10, 31}, {42, -15}, {-41, -42}, {44, 16}, {-44, 48}, {
              46, -27}, {15, -28}, {49, 53}, {-62, -63}, {-59, -60}, {
              20, -47}, {54, -48}, {47, 
              28}, {-51, -52}, {-49, -50}, {-33, -34}, {59, 60}, {58, 30}, {
              62, -16}, {29, -6}, {23, -1}, {1, 4}, {-21, -22}, {-4, 6}, {5, 
              37}, {-12, -13}, {8, 40}, {-23, -24}, {-2, -3}, {
              9, -5}, {-39, -40}, {41, -25}, {12, 14}, {
              13, -26}, {-55, -56}, {45, -43}, {43, 18}, {-57, -58}, {17, 
              50}, {-29, -30}, {-45, -46}, {51, 21}, {52, 55}, {19, -61}, {
              22, -31}, {-32, 25}, {56, 26}, {57, 27}, {
              24, -35}, {-36, -37}, {-53, -54}, {61, -38}}], 
            "LeafValues" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBgkBOaF5xZnpeaopnXklqemqRoVkG
SJ09ELMAMSMYujIzMvBB2YwM1mDSCEy+ZGdkQEB2Bh4GJjCLGS7GBiZL4OIQ
mgmoElldFFz9Dyh9hRWimx3K5wWToVD9bHDzIPKscP0sUPNhfJgKJgZTMO0F
FeeG0kwMklDWYkYIHQ0mLyKZgGqiNpjkhPM54SaBSFsozQLXJwCmeeA+h5kE
cY8u3BaYPmRbQT5lRrOPHUVdNZp+frhr0GMC5h42tBBjg9KsSOYCAIpHFwE=

             "], "RootIndex" -> 11, "NominalDimension" -> 0]], "Processor" -> 
         MachineLearning`MLProcessor["Values", 
           Association[
           "Info" -> Association[
             "(f1f2)" -> 
              Association["Type" -> "NumericalVector", "Weight" -> 2]], 
            "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], "Method" -> 
         "DecisionTree", "Options" -> 
         Association[
          "DistributionSmoothing" -> 
           Association["Value" -> 1, "Options" -> Association[]], 
           "FeatureFraction" -> 
           Association["Value" -> 1, "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            PlusMinus[0.045315354063797775`, 0.0044266331205234394`], 
            "Accuracy" -> 
            PlusMinus[0.9857406403127197, 0.0016657385942970672`], 
            "EvaluationTime" -> 7.814395493395491*^-6, "TestSize" -> 8335, 
            "TrainingSize" -> 5146, "TrainingTime" -> 0.037324875, 
            "TrainingMemory" -> 845523., "ModelMemory" -> 6504., 
            "ExperimentCount" -> 7, "ModelUtility" -> 202.36256029504057`, 
            "MeanCrossEntropyHistory" -> {
              PlusMinus[0.04129617164953286, 0.004771031766582238], 
              PlusMinus[0.05153497552012166, 0.007020147905088797], 
              PlusMinus[0.05972812494176729, 0.007828504559462447], 
              PlusMinus[0.051249520723650424`, 0.00817635148767101], 
              PlusMinus[0.054309197469763815`, 0.009416479433500774], 
              PlusMinus[0.05364166948247408, 0.006522967155099705], 
              PlusMinus[0.03059015319481833, 0.005079603436234626]}, 
            "AccuracyHistory" -> {
              PlusMinus[0.9892666061287273, 0.00426108800447323], 
              PlusMinus[0.9870348917293706, 0.0036144903943852377`], 
              PlusMinus[0.9859497213431876, 0.0037131840957427384`], 
              PlusMinus[0.985343175407761, 0.003789338124901469], 
              PlusMinus[0.9854646940116231, 0.004510786491594535], 
              PlusMinus[0.9836223373482126, 0.003971782002529977], 
              PlusMinus[0.9836555269422675, 0.00396096651423194]}, 
            "Configuration" -> {
             "DecisionTree", "DistributionSmoothing" -> 1, "FeatureFraction" -> 
              1}, "FinalTrainingSize" -> 6433], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
             "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Vector[TypeSystem`AnyType, 7], 
             TypeSystem`Vector[TypeSystem`AnyType, 7], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], 
           Association["ID" -> 205479992515462]], "Configurations" -> 
         Dataset[
           Association[
           Association[
             "Value" -> "DecisionTree", "Options" -> 
              Association[
               "DistributionSmoothing" -> Association["Value" -> 1], 
                "FeatureFraction" -> Association["Value" -> 1]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.9141125537591906, 0.048484011674645715`], 
                 "Accuracy" -> 
                 PlusMinus[0.7259194106480941, 0.04409960138051838], 
                 "EvaluationTime" -> 8.384469696969694*^-6, "TestSize" -> 
                 3500, "TrainingSize" -> 10, "TrainingTime" -> 
                 0.0050272727272727274`, "TrainingMemory" -> 63536., 
                 "ModelMemory" -> 5480., "ExperimentCount" -> 10, 
                 "ModelUtility" -> 0.5061301560852678, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.9347843080928538, 0.0449046861556598], 
                   PlusMinus[0.8789178102857939, 0.03892639718728712], 
                   PlusMinus[1.0449369851825714`, 0.04431189975105496], 
                   PlusMinus[0.7679500440658165, 0.02414523823178481], 
                   PlusMinus[0.8395322698525043, 0.03841910399598907], 
                   PlusMinus[1.0230689411453153`, 0.028774742555510175`], 
                   PlusMinus[0.8672247182963868, 0.030401522294294284`], 
                   PlusMinus[0.8787698947757818, 0.02008117692131183], 
                   PlusMinus[0.8431837715157386, 0.017247371916651894`], 
                   PlusMinus[1.2938122335683593`, 0.027757562997190923`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7319002958223656, 0.031530873859955795`], 
                   PlusMinus[0.7563144820451108, 0.03061819365303892], 
                   PlusMinus[0.6720283179100526, 0.03333135062051014], 
                   PlusMinus[0.8709227768135692, 0.01981661471767575], 
                   PlusMinus[0.8174842204320667, 0.022584368221359785`], 
                   PlusMinus[0.6595517130359045, 0.02377718597070395], 
                   PlusMinus[0.7516914186829006, 0.021614847965270006`], 
                   PlusMinus[0.7461318433178887, 0.019583144437982272`], 
                   PlusMinus[0.8034786586345192, 0.017883082941498027`], 
                   PlusMinus[0.3706399350486654, 0.021456646710073808`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.472396112026646, 0.02418253152873185], 
                 "Accuracy" -> 
                 PlusMinus[0.8843522811901708, 0.01431373118518335], 
                 "EvaluationTime" -> 8.162520833333334*^-6, "TestSize" -> 
                 3000, "TrainingSize" -> 50, "TrainingTime" -> 
                 0.006162249999999999, "TrainingMemory" -> 72386., 
                 "ModelMemory" -> 5480., "ExperimentCount" -> 7, 
                 "ModelUtility" -> 1.8965604412366253`, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.5580531939188664, 0.053799985446244536`], 
                   PlusMinus[0.46878211750641413`, 0.039819266579350726`], 
                   PlusMinus[0.42667407754518133`, 0.031248825997169962`], 
                   PlusMinus[0.5076172205649628, 0.027886907434869667`], 
                   PlusMinus[0.40744726325768765`, 0.026440774361978222`], 
                   PlusMinus[0.47655799690082706`, 0.027681505403190854`], 
                   PlusMinus[0.5391475462592662, 0.03289481866010056]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.8245860422868198, 0.0272139810431191], 
                   PlusMinus[0.86276338581745, 0.02471799947552772], 
                   PlusMinus[0.8787538309320073, 0.016716003284144666`], 
                   PlusMinus[0.8597248866819988, 0.01580016019995197], 
                   PlusMinus[0.9386251130099165, 0.011287404238607591`], 
                   PlusMinus[0.8707139082240495, 0.013928063827891258`], 
                   PlusMinus[0.8590612885434141, 0.014459730950289008`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.19519074370600448`, 0.01155506320837577], 
                 "Accuracy" -> 
                 PlusMinus[0.9592678636716349, 0.004380374485266233], 
                 "EvaluationTime" -> 8.118689393939393*^-6, "TestSize" -> 
                 5900, "TrainingSize" -> 250, "TrainingTime" -> 
                 0.008553181818181817, "TrainingMemory" -> 97877.81818181819, 
                 "ModelMemory" -> 5549.818181818182, "ExperimentCount" -> 10, 
                 "ModelUtility" -> 11.073502341729585`, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.2150493190400629, 0.040408300179073035`], 
                   PlusMinus[0.15437332604410425`, 0.020439538430326785`], 
                   PlusMinus[0.23546670493747432`, 0.02747844308923068], 
                   PlusMinus[0.16924445910892663`, 0.014393463667397459`], 
                   PlusMinus[0.21794982683784542`, 0.017668730648285915`], 
                   PlusMinus[0.248327296100448, 0.021576122857186922`], 
                   PlusMinus[0.2216837849617732, 0.021963153229332143`], 
                   PlusMinus[0.16807425223353498`, 0.013926065727149665`], 
                   PlusMinus[0.2025731457246471, 0.02285403582512362], 
                   PlusMinus[0.21081301602305683`, 0.01948183617084905]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.958026892998748, 0.012532557621660822`], 
                   PlusMinus[0.9572286851966281, 0.01246954865509191], 
                   PlusMinus[0.9539917593554532, 0.010075661213316583`], 
                   PlusMinus[0.9694746969525169, 0.007818370052368585], 
                   PlusMinus[0.9560916266400703, 0.008999609760146451], 
                   PlusMinus[0.9351152262429678, 0.00976702773076512], 
                   PlusMinus[0.9515470105216031, 0.008672066535354643], 
                   PlusMinus[0.9739261975055106, 0.006787489491973901], 
                   PlusMinus[0.9642297258213454, 0.0076978743916803], 
                   PlusMinus[0.9528102446573622, 0.008002658313381553]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.08072539505594552, 0.007654688427175289], 
                 "Accuracy" -> 
                 PlusMinus[0.9780058002694332, 0.002856105237060302], 
                 "EvaluationTime" -> 8.148595238095239*^-6, "TestSize" -> 
                 4000, "TrainingSize" -> 1000, "TrainingTime" -> 
                 0.021233571428571425`, "TrainingMemory" -> 
                 192957.71428571426`, "ModelMemory" -> 5955.428571428571, 
                 "ExperimentCount" -> 6, "ModelUtility" -> 63.83931731588366, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.0657032673323323, 0.008627735984893506], 
                   PlusMinus[0.06581743610325552, 0.009242557752069598], 
                   PlusMinus[0.07775735457593559, 0.008935596490011525], 
                   PlusMinus[0.08603510712800923, 0.011292330983665284`], 
                   PlusMinus[0.0975642122925478, 0.010361280668389131`], 
                   PlusMinus[0.10412102213821602`, 0.010431379020823644`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9824623342365758, 0.007836786915662586], 
                   PlusMinus[0.9779943413395098, 0.0075728658768939765`], 
                   PlusMinus[0.9798096822466628, 0.00668885472725348], 
                   PlusMinus[0.9778070188440171, 0.006427207935723031], 
                   PlusMinus[0.9771030202829487, 0.00607811731391871], 
                   PlusMinus[0.9754089319704133, 0.005578966770419074]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.045315354063797775`, 0.0044266331205234394`], 
                 "Accuracy" -> 
                 PlusMinus[0.9857406403127197, 0.0016657385942970672`], 
                 "EvaluationTime" -> 7.814395493395491*^-6, "TestSize" -> 
                 8335, "TrainingSize" -> 5146, "TrainingTime" -> 0.037324875, 
                 "TrainingMemory" -> 845523., "ModelMemory" -> 6504., 
                 "ExperimentCount" -> 7, "ModelUtility" -> 
                 202.36256029504057`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.04129617164953286, 0.004771031766582238], 
                   PlusMinus[0.05153497552012166, 0.007020147905088797], 
                   PlusMinus[0.05972812494176729, 0.007828504559462447], 
                   PlusMinus[0.051249520723650424`, 0.00817635148767101], 
                   PlusMinus[0.054309197469763815`, 0.009416479433500774], 
                   PlusMinus[0.05364166948247408, 0.006522967155099705], 
                   PlusMinus[0.03059015319481833, 0.005079603436234626]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9892666061287273, 0.00426108800447323], 
                   PlusMinus[0.9870348917293706, 0.0036144903943852377`], 
                   PlusMinus[0.9859497213431876, 0.0037131840957427384`], 
                   PlusMinus[0.985343175407761, 0.003789338124901469], 
                   PlusMinus[0.9854646940116231, 0.004510786491594535], 
                   PlusMinus[0.9836223373482126, 0.003971782002529977], 
                   PlusMinus[0.9836555269422675, 0.00396096651423194]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 7.814395493395491*^-6, "MeanCrossEntropy" -> 
                PlusMinus[0.045315354063797775`, 0.0044266331205234394`], 
                "ModelMemory" -> 6504., "TrainingMemory" -> 845523., 
                "TrainingTime" -> 0.05168699306831431], "Index" -> 1]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               TypeSystem`Struct[{"Value"}, {
                 TypeSystem`Atom[Integer]}], 2]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "TrainingSize", "TrainingTime", "TrainingMemory", 
                 "ModelMemory", "ExperimentCount", "ModelUtility", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 
                 TypeSystem`Vector[
                 TypeSystem`AnyType, TypeSystem`AnyLength]}], 5], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 1], 
           Association["ID" -> 205475697548166]], "MaxTrainingSize" -> 6433, 
         "LastReportingTime" -> 3.764663429804699`16.328301144434413*^9, 
         "PreprocessorEvaluationTime" -> 4.33935546875`3.*^-6, 
         "PreprocessorMemory" -> 48112, "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 10, "TimeBudgets" -> 0.20480000000000007`, 
             "ElapsedTimes" -> 0.214596, "ExperimentCounts" -> 10], 
            Association[
            "TrainingSizes" -> 50, "TimeBudgets" -> 0.25600000000000006`, 
             "ElapsedTimes" -> 0.260284, "ExperimentCounts" -> 7], 
            Association[
            "TrainingSizes" -> 250, "TimeBudgets" -> 0.32000000000000006`, 
             "ElapsedTimes" -> 0.307622, "ExperimentCounts" -> 10], 
            Association[
            "TrainingSizes" -> 1000, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
             0.418789, "ExperimentCounts" -> 6], 
            Association[
            "TrainingSizes" -> 5146, "TimeBudgets" -> 0.5, "ElapsedTimes" -> 
             0.47743499999999994`, "ExperimentCounts" -> 7]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 5], 
           Association[
           "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
              Dataset`DatasetHandle[205484287482758]], "ID" -> 
            205488582450054]]], "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {330}, "ID" -> 
              8102574889493170096], "f2" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {731}, "ID" -> 
              6701357641463675607]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> 
            False]], "TrainingTime" -> 2.066456, "MaxTrainingMemory" -> 
         4826120, "DataMemory" -> 1185464, "FunctionMemory" -> 136376, 
         "LanguageVersion" -> {11.3, 0}, "Date" -> 
         DateObject[{2019, 4, 19, 11, 50, 30.346042`8.234677035543367}, 
           "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association["Input" -> CompressedData["
1:eJxNnHuMVuWdx9/bvDPCQokFHRPEggZGgQZ1GZsBCt3AWNBwKbhBKGi4FDEC
HdyMsGDDZcUGsY6GS5EGhmVoEIoYLoUahB3oclnAAC7QIAg0XDbQABpoFBrY
85nzefLwx3B43/ec5/ldvt/v7/c857xv+zFTfjY5l8lk/rtZJsNxe/LPF8lx
bfL3bvK3IPm7kLy3MPnblPzl8pnMs8l7A5P/d81mMg/4uk8xk2mTHCuT99on
7z2V/P908leR/L2QTV9vSI53kr/bXv90cuyQvH4z+TtVksmMTF63Td4/k1x/
Pjm+lRznOR7jHknem5yck09eDyxN59uYvPdwLr2uMXn/aPLeouT/s5K/95LX
3ZLj1uR4K5PaOyKTznc2m16Pfb2Sv5O51N4/5lM7GHdnJrWXOPxGP4nDo8l7
Ddn08/uT1yuT48fJ6xPJX8fk9d3keDg5zkiuqU4++17yujZ5/brzM/6Y5PUj
yfFyMR13QDb1u13y/z8l/z+Y/GWNz/5MOl6nXBoP/O2b/L2Y/H1SyGQeTz7/
J+2bmny+JZPa910u9aeX9tUYz3XJ60IxHb/OecnP0OR4PHndI5f62zx5b1g2
jdvwXDo+8W+RT+17Jpva+3Y2jfOh5Dgzm+YbnGA3+DiW/G1L3rsvl173ZC6N
w5e5FF9TwFmS/yHJcXEmjStx3pv8fWu89yXvdc6nccR+5n0nl8bl+7nUb15P
y6Tjg99V4uERzyceP8inn5Mn7FyTS/3kc+LRMpvO2yAuX0n+vhYHP8mm8bmS
Te0r8frpxh+7r5ek8e6ZSeNB3Bj3w2yKQ+a5pt/N5cFpcTQ3OZYlx3PJuT/L
p9eRN/CAX2+Yd/D0X+J0s+PNl7fE/WY2zRN4Yf6Hsmk8njXf+A0/yPfobDoO
OAVH+Is9T4inWu0r1294wXmXk/+/L55759PxJyTH7aUprxd6HXHZKp+xe2Fp
6venhZR/e3Jp3s7fw5t14gCeT1Y/lifvX8qkvIVX98vrOerKefOITjyXTeN7
0zzt1I8t8ho+nxJ32/SL8cE1fh1Ijv8ub/B7qfoDjv9hXubIA+ycK59fyqb+
gq/N4pP4TEqOV/UL/HAePOT9bcb/FfPSsTQdn3yjk/WZdF54+JZ6hv0VJSmu
WxVS3mA/eMdveEZ8GH+HPCA/g3KpP+C42rgR3wfzKY7xs4s6Bs52Z1Ndva0+
Pa6fJ9SzFvJxdTaNB/h8xfgvL03x82+F1M7F2gGPPsulOoHft3x/tDpfJZ8X
iEf4yjx9xd1wcUWeqEfkZYn6PdY6FfIOvp53fuIBTsnP4+Yd/9AXcHbD+kK8
uievx2XSeMPb2bk0D2Pl305x2Eu97afuTMymeSaulepstfhAV5gfv+EH86CP
f7snf7uNI59flNfPF2KdelY84ne1nzPvauvrI/L/kPUtb7zJ7ynnW6AuTRO/
6DN2FdQZ9Gmp75823tS31plU78DDR+KbOsG42N/N+F62Ls6Xr9iDfq4Rn9vM
M7rHkfihd/Xic4117qj43+Xn4P1p9Qsdr7I+gGt07LB2HjTuzDse3S2mcWnt
9eTvivrwpDh8zrhP11/yj+6CQ+Ynn1OtX9Rj6tYt9Zu4gBv0eIh5ol5WiBfs
Az/Ed5H174J1HB63tb7Rd8HzZvIB3L9hnHdbh46okxecH3yCh/75FMc35XVe
vZ0rPuk7LjrOL9S1b53vz+KPeGBPg/HaLq/JB33Da+rtZHHHcYnx/Eh7eun/
JXHPfPAanT2vzlPfHrTfGJVPecs88AP7hxVTe8jLilyqe/vVifX5VH+I668L
aT6xg7rzgX3Q3+XL4Eysm49apxrtf14ynuC/lfowoBj7KOI7Wt6At0Z1Ff+u
2jf8r3UAfNSYrxXi8j51cLo6wWviP8N6Qd74/IzXbVFXhxgn8NvSPEw17+Sp
uTwDny3FITxBj7EDvuxR96/Lb3CMbvwhn8YFXjaaR+LCvNQ76iJ8gL/oQ7n+
39H+4epyX3k7U118Sl1Ap4jPN/IA/sHnLvL3h+KM83eqY53V9bx6C54WilvO
C/1r1jpAv4HegOc+2ZTfDdYr8rZbf+h30PNL4oB++bf5NJ7MB17II9fPEk8P
2K+Cc/q+n+cjvpqL6y3mk3j+i7gZJ2/A+5vqfwv7fvRzo/iukJfYib7Cg7B+
2mr8mX+HfTB5BU+cj84dVj/hLfWGfhh92Kg/c6wDjBvWKY/L45Xq7yDHqZFH
6DX6siyb4gpejyhJr6c/DvPD382OTx5Wi7fu9iXEfZh5wG7w8YuAt9LUH3Tt
cfN1zvy9KT976MdpeU/et6uL5O9FP4f/nE+cOqgrfeQx/TZ1A7zjJ/i7q64e
sm7ddd516jb+3fE19eg749pov4Ren1SvyNMz+n3IejvX+cHPcuMM79CxetcB
rxTTPgc7TogD/Nkj79Al6lFH/W0prtfIM/z4TJ7hX6XrRfLQXh4zzxz5Q/wZ
d7D+HZXn8JBjrXinP4EX4B18l4kvcD9S/r2gPeAbXWP83xVSPtabzyr71bbi
C90ER/SL1IW2XrdWPb5h/Vtg3ivVe/qspdYD4oie4+doz8eerLpxRl2mj/1E
vccedP0f1jfyy7gFdZg8oR/oL3nkc3SNefPq8ibzP0o+kZfJ4r6nnzMe+vKh
OK52nGGOUy/+X5Nn4HaG/eVE+fO1er9OfUDPZomHLuo4ecc/8PSF/jDvPHlW
K6+2iYd96hM6Tf7myYt22vOq9XGYdpxS1x7zffxjv4S+tMZ+cbp6yOcHzetT
6l3Oekd+v6df4GuBur3HvOMf4+4rievZ99RHcH5K/SE+x8QtvP65eayz/vUR
T8eLcV/itnHE/1vaVSleH7COE7cHjcND5h97wWPo89Hx5erhcfUDPXhYHA+R
j0O0Fxy1EycD5NVy84hdjY5LvOA7+o1e4Q/XkT9wTt2k3hKXBfKjUnz9VfwT
J3jZWt2o9jjG+kFfQR8w3zgwTyfjxXjNxEV5MY4HLlgPUd/ox78WL/SR6NsS
445/4OmMOh/6uvesH8TxoNcP8EhfQ10ijtSpbfIaHGXVx1Xmn7izj/eIdqyw
v4DH4PCCeWijPoDLbs57IxtxOlE9rrGvpI9pabzRvwnWje7y8Jr5QN/RX+oK
/EEXy41blXq2x33Gb60P6AF+PZGP+xzoM/yhPyLvxOuWxyrrGvo/0Xy/4by9
jBvxRm/myo9D1hnwTn5XmF94cth6v1B8wi/8oC9hH451DnydZf0GT9gHDl5w
3P7WlWesizfVN/Sn0n3Bs8WIJ+IDvulTiCfj16rT8PVRcZhX715SN/FzpvVv
oftCi80rfUAPcQIeuX62ehz2T9AH+BP6VsadYz5HyzNwQz/5I/tLcA0/Frje
o64+Zx0L+1hhfxRdGKC/2+Qhfo1X73rbp4Er4hn4QLz/w/z/cz7WP3jHdWGf
E5781no6Vd097joD/yaJ9/6uB4L+Yz/6hU6go519Hx0k3oyHP2OtV4F3jdob
eL/BukIdAW/o01Xna60OVerngGJcX6C/9EXNjdde9QacsL5i/l3mif6ws30M
/MBP9PGsuAPfu7WH+dgfHCnev1AP4NNJedRH3YHHg6wvY/28jfpJ3aTenBZ/
Z+z/hsgfcFIurxgHHO9x35F5w+fd7afhwWviZKC4Jv41rn/miqNJ4vNLebXM
eNIHLFQv4Hve9RH6fty8EifwUWY9/Nb6X2fdAy+M/xfXefANfvwyn9pf4f0R
8ML5a/yc+WfLb/jezXzDA+xEb8I867w+7I/iXzP3EYfpDzzk883y95R6v8f6
0lP+g7swD/kumOcG7wP9wPo9TPxgVwvrxnTjuVf8Mn4f6wXngzPiRP6q1TPy
TF0nP+z3cGw0PyXm4RH1dIJ4RJfA+Rb5gf287qReHnE+/N1mnjnvXXH5tPVj
i7rCdbMCXqxbLeXdQPPK9XfV03C/53FxSb2er50n1TPqUon4WSovL6kPc8Uh
+eX95uIZPb58Tx2bYD2doE7R75HnDdbJL9SzNureCnWEeFD3z1kHOH+e420U
1yc9ztL/HxZi/7VUXKOj5Bv8L9COSuvcPnWBefPWEfJL/RnlefQDdeH+YTHu
jxKHU8ZnuPXnsHijLjD/dt8vuwf35AM+gMcfae8d91PIx9v6g3584L4FOMJ/
xu9tfT1kXti3oq7Tlx2VH8SXPMOrt61L8LJBfQAX5Om652Mv54+2rn5l3dhu
PL6R5/DjXfnVT34fsJ9Et7lvh73gF79n6hf14QXzN14/a4zXNXXga+MadPOK
fKfelKvbJ8X3QV+vUQ/xb4Z5Jg7UySPyiPxXW287mD90sof1DfzCj9Bnvihu
qQcfyp/B9+gNvEdvwE29PPzUPGIf8T6l3hEfdJ/4EYdZpfE+8hX9IY/o7W11
NfSTQ8XvbHEa9veYh/s/8Jb84zd2DBVnxLmV9pwSTxf1/6w6dkf8j7F/PCtf
q4xHtXWrVt0gPsvUi8+M103tzmrHAfvKZ8Tl++o0fSB+fWS8yTv6Sj86vDTG
BTvQaXjFOOy/wHPiBQ9DnsH7cO05r+5zXG+eGJ+4Mi99FuOCI+KCzs3Wfz5H
V2vsr+nTyrzuoDj4oBDvh1P/CsZprXoHXoj/HHG6XHs2Gz/i9Lo8DLxdZb8f
1qHghHHC/U3mpw9Fj+knFnke9ehl9xPYRwBX8437312PwYdR1kP6JOp72Cci
3+jaOfF5SJ3g+h2ZuN+Lf+TnRY/0Ueg64zVT9z93f/Er6yjXse9FHX1afNNH
ox/sS1AnwFGduny8GO8Pc37G/SjsgG+t9BN7wz41ugVOenl+qBfkpY+4AS+9
jMN34vRJj2dcV6D/7dSZPuo++rRfnLD/jV3Y97L7D+CePo88oycj3Ac9bn0C
N+G+S1jPobffqKPYf0Ddpw78wfxRh5v2B0ti3QWPbY3/UfOETrOubBAnV3Px
vht42aXObTZPnB+ec9mr/xvEU4l1lz68oM7gH5+jszc9Ep+ieVjgPMSVekEf
Q14/Nz7wc6Q8RB/hVXNxQX7hHfqGrpAn+gX6Pfrah+w74PtyeVZmnYOnz6jz
2DNQvWxpn7BQfSIP7e3TsP+yr+s8EkfwiD3gDxwFu/eb32OOA/6o06wbqtRT
dI78HHR9VC1eyfcVdXGF/Kdv/+s96xD8KbcudlDHsIN43NC+/5FH8D48v7BV
HBDnx8zDNq/H79XmDz2mTqDzo62L6ONdXw8V3+jA/fpNvJvqdTbVYfQHvvzZ
/VOumy4+6QOL8n2B9QQ+T/E8dH1jLu53YxfzTbBvCvwZb/7ow/Cvv7ob7gt3
tv9Gx+HhJnWwn/gGD8PF12B1AvxTt8FrWO/Ad/q/Z7WH16z76DPh5Ze+flL8
kF/yeM3378oz8Al/6COaqVOMP8P1E/3BLfv/k/oF/ol3N/FyPhefK2O+ank0
ULyPFq/PF+L9X+KEbrawjsH7ycZjnnmcmY3riLnq1uvWw7w45v19zndHvuMn
fEGP0IHyYrzvccDriCNxIt4HrW/gDnuZ5zPjO8P1BPPWZ9J8Eh/iVSdvq3Kx
ng2yDoyy/6dfb2fdaXDezfLooHUCO7rq/yDryfvqJ/Hl/aBXvcXDKPEzUn3B
jg76edQ4bbPOzs/FfU/i1dZ+BLyFPrxG/vCavmyD+rNaXpA3/Mobp3BfHr8+
uOc5ok3OB85/qS7eEr/4He6z09+Uq0sfyudy70PQZxOXAfIHHIV1/H75OkV7
rpn3sN8Gr8A3ePqbPMdv9Pyo9Wee+GeeXvKWfh99Cbw4In/RbXDA52vUvQpx
Sv7gFUf2lcAbuv+J+2AL7ROwr4X9x2rzAg6oF/TnxJ2+rK4Y9xeYr1b8zAv3
r9S10dn4vAj1usI6gx/oLfoR7pdfcjz2w8q8T4Re1Ii7l7Q73J+/pl9N9wNL
477cXe0O++rEmThy3K4evKZ92DNUnDD+Yu3jdRvrQVg3hueVlqhb6CB2hHVY
6AvC/QXwMEy9Z9w26g96Qd7oO+qM52H1Cp70UAe7i3PsbCtO6f/mit9QB7Lq
b9Y8XLEeoEe7rBvbPO5xXOIank8J/KLegG/s6JONz0kS76OZWP8XiTfmqTWe
+L0yk/ZjXcUhdqOL9GPwIK/OoLtn1WuuIw7whnhS18PzG+C0Xh7w/gHzsEwc
0BdeLInPYTBPa+2gnz6t3s4Qz8SL+ceKl6BXjeKTvFZpB3rS9DxeSdo3tXX+
1pm4D9/Z9UMndZB4zbLOgKum53XVadYnnYwnr6lHPdSD9eoPfmwU/wXHv6yu
4/9O/Zmojjc9V+pzc/RHYf9/qX3KQ9YB5tvlfglxCOvwN9V3xtvj/UFw3dSX
qE/kDVz0laeMf0ieMB/8mu28F6xDvV3vPOp5xO1V17+cj3/M017eo7fU9eby
PexT8T5xQE/n5yLe0Ilh8qc8G3lDPUBPZlvXwv4XegBvsa/CfI4oifvioV8l
buAXPS4znz/Ox/vn4Bx+sE90fy4+b3PBunlO3Q/6iv28pt9HP0eKG+pdu3tw
ukm+M99ydWlOJuZ1rLrzkbzMqu/o0UnrWLk6CU7eM2+N6gU4+KnxoB8I9xG2
+HqJ+kN9AH/kG91GZ/6h/8Q7PGd/RfxtUL/gC3GmnwF3HF/z/g3vw9M18or+
/kt1e6X1gbidV88asvF5AHhOf/auuAR3+BOeA6V/BD/Uy2nGH56N194l4odx
yd+7xpM4M+4x6zZ+/1E/0ZFG123h+Unij1/YuzAX9+lq7H/BX0f5Q1xPON+f
1GH6GnBAnhrcz2tpHtGTJerFCnFP/zRV3p83f+BxhuuncD/5gK/fUH9Cv4zu
fZOPOGK8Heog/MO+ZurEefX242y8D0n9xz76Sl4TL3Ryq3004+RcH9HPsS4G
b8QJvQnP/3R2vCetdx9ZX8hDT8ejbq1T38fLpzfUFa6jbncS50OtH+T/pDjm
uiHiAbyiD/CvQtwNMP/oJnZuzsT1DXWKfG5Vf3uZF/pVeICO1eaizpHHwdaV
adYl8NvL+hD2qxl3cEn83suD9oWj7M9DfQzPVW1Vf+i3rubi/Qr2pcDrCvWl
0Xg2ug4J69Nz8vGM/WRnrydPs9RL/IIvle7/rpEHo9XXg+Zlnvi5Zbx4f6tx
5Pptnsc8D1qfwn17eLFWHA9Qn38qDqeJh8PGgbiij+BllPUKvHUJz6dY19E7
dGR+LtYJ6tMN416m/hHHKfo1w7pCPB6Qz/XGiTqB7o0Tp+CnszwO61Lwf8v9
BPTmffEDTpmXPBPv9vaN68TdBHUDu9sZP/KKbpEP4jHNujPN+eFBeO7taf2F
711cX6BTvE9cLxkH8gafe9tXMh71BnxWiZue7i+XiR/sDOutIeoc84xR/+E/
9tDP4scNdXGA8YAPb1lXVtn3kI9x+rPYcY+at6cycb16Rf+xAxzSd7Q0z4d9
f1om7ocTr+X2Z+hXJ3WIvC/IxD6E12Xq13nzd8P6DO5C3xj248nTRfPKfOH7
Ye9Yl8B5wbgz7171B51Fz+nXqtwXP2n+yQPrWe7vo+dV1gHGI//w93v2BWfE
/155BR54Ljg8T42eHS2J+6wB94xfaZ9RXRKfj4Qv+B2+nxK+l3HCuhP2RfYa
N/iL7tCX/cj9aewKOjtSvLyj3Rzr9AOeE3fwcci6/331Nzz3RV8DrvAXftWo
h6H/WWr9CPtm6CD6wzrwYiY+Nx6ecwzf85itn+es81yPX0E/4AXrF/ob6jJ1
aKB14OV77tdt8brw3BvHg9m4TztDfQW3xAO/fuU+Wwdx8ar7B/Cs6bkjeUZ+
qD+XrXPoeIl1t7P1skZezVCnd6pDHBvsM/bJJ+J4zDiEfXLqIjhE72qtu/Q3
r8uv9eoedZS4hT4/3GeBR+jI29b/8D0s7EUX0ANw3d0+GBzx+V3xt8nrx1o3
mGezvJqVi+vKpu9vuB6/lYnfcwj7Qk3rcfd/BhgHrgt1mb4J3BOvq+rz/bnY
f6+3D6Beku9r4mOnfF+ZSfUFPLQUv+T/Oc8n/nfc/0XH7qrv49WxofY/4XtF
4IC6PclxOps/8lKZjd8vA6d7xGmHbFzvdHXe3c4DToYbH/SU/nG4vP1zIeoL
ugmeVlnPw/cj4BH6+qL1injAa/rqvvKN/FEPyMs6dR+9AT9txNdY9TI819Nf
vhIP4kA96CJP16q7xDnsR8K7cvG1Vt0arb0z1Qvsai/vw3oufP+WcbE3PN8O
n7pk4/dyw/Ma2MdxkHgerz7PFo/wHNyE+3fr5Ct4qi6JzwHhz1r59aF1lvy/
Ke7D+h497Wse0dPw/BX4QafQS3C7yDo8UtytFw+n1eMefk68qDPoAbrX9LyK
deRUJj73CS5uuH82Tp61c3zi/J58QPfRvfflNfZwPnqxwOdmr2r3dfEF37fa
r50z7pPEz3j1i3yOMR8jrCfg5KZxaKPObrIej1S36A/mGFfqyW7rHfE+qj42
eB327leHw3rvkjr8jn6tMM/0hd/m4v1h9IW6gy6Msw78yn0FzvvCvILzZs6L
/dPlObigLva3/1xhnZugvsK3zSXxfg/vP+G64KD2V5j/816HHavlA35XOS6f
/0n9D+tH8sX84b51f/tq4lavzhB3dPrDbHx+PNxHb7pf4/4A96dGqptNfYF4
OH4Pj8EJ68Lexm2LvAl1jPrfTH+xM3xvdYp6t0o9h7/oWd5xXlLPAh7hBX0y
egiewd8O1z+vur/8lbqz2DiVqQd9rANrtetOMa5b4SVxpD51sF+c5rg3snEd
BZ6JzyHrWnhehbxgP7pw657viwf9YtzD6uxx803cqbPk6ZJ2PSxPbosDPqc+
ERdwOlfde1M9QReIH/FvKZ/nl8bnFka5fqBuHxbf2Pu1+MU+dPtt60i479T0
OwOl8XsKtz0fP0+p7/OsS/i5UnuJd091AXy9ZF1pYb9F3NDbFvY9TevH0vg8
xX3WifCcO3hu5X2WeY6/0XzOkR99xOEd7SG+4Xk71ot14qtVIT5/Qx5r5TH1
l7pakYn71mHf5lF1FJzuU1cvF+PzB2E+4oN/xIW4cx36tdc6QdzX2EeQzxbW
9f7imGOD/DqZi99TZb6KTNz3Dc/b4tfzhbivSB39XSE+Fx3GDX07eoauP6yu
4N9jXl8Q71305/9cX5AndKzK6y/Lx7a5eP/xgHH/SN0kftSfzq5X4M3ZYuzL
iDt6zPruurrfUn92iCPOAwfUR+KA3+jJtmy8/xi+38d53YwX52+yH2G8H+fj
fdj7HD/sDxCfmff8vgU4o18JfSK6ubw0fl+QfNI/sT4aIX4brGcd5VdVadzH
C/sbU9Q78Av/TognxoHHncQF/VWtdRR9bpTv4KGLcb2eiftTE+UfOMTP5vKT
OGHnInUFnoBD1knEpbf99n519z37p9XydJk6QD2hD0EX+orDLs43z3rRzvx0
M77/Woj6zvXX1UHGC891cR7Xb1XvwUFf4wZ/whG9K3OfYk4mPg+A/fAL3ldp
F/Y/Kz76Wf+oo9XWB+ou+8c/ty78XjuZZ6U6iR9XzQ9xWKIfi8QX+O5ZEr9v
Ee7z35Yf4Iz6v0g9Ct9zb+48jFvQzr8U4vN731l34V29fECf8R+c0qdQX6mX
9IPUg3L9rPf+AvqzwroR4hyeB8Ovr8QH8btm/MnP1Gz8fghxvKiuX3fci9rz
mHV1WDbe92n6PrzPY11XZ/CH8yebZ/oV6tWn6gx6tt71BXjHX3AJ/8lPvfjG
337qVri/QN2Hh8Txc+2h3ixSz+Dnx9n4Pch3rIvgC7u6iuem58ozaR1mPurJ
U/K5TJxUaNcw123klfjiJ/bjB3Hcp44QR8ZvrZ3FQrzfS74mOw86Fn5PAXzB
T/BHH5TXLuKK7sJDcHNE/mMf68OHtBd9Yh0X7leAv83qU5l55/zZ4jc8B0/+
KuRlnTxkHuZD/7o6L9cRR3BxXj792v53o3Fi/lX27eTrL9af6+oX/EPvM/Z9
U9UN7AIP9B1h34+817mOPmXfRd18W7vW22e8r33HjDv+dMzF/bHw+w/EZaP9
a7fS+HzaJHWDuP7e/Zpx6jPjorf369cpcVBZjPfFTxtX6i38CvcxGJc4wIO1
4gyco7PE/Zi6BS+IO2EBD3ntBqd79KtbLv5uBfzB/+7qNHxgXvqKWdYdXoe+
nnEH5uLvw/D5HfWCvD0jz8kr/oX9DuI93z6MOsX6foznT7WenVfv+oTnvItx
X4H3Z1oPd8lD6tQX5p34Uu+IS6EYv6fFuCMy8XcJQr/ZdN/Qfdmexps8h32d
56x/IW/wDByF+z+n1em95rO//XZ/4wwfF6sD8Dl835DrP1a3sY95yWv4HQBw
Xys/8Id5W1p3sYt8MV/Tvpn2w+vwXMwl+RGe47okDlapP6zjF6i/20vj72OF
76HddX76sGaZ+P2tSfq/RR1Yar/3iDzDrskl8f4V4xzMxu/zgVN+1ynsL3Z2
/RXu/+PnjWz8XSD4WpTvu6wn6F94/p2+o8x5Z6m/6EF4njfUk7keX5DX3c3P
T6zDW8xjuO8SnoOnf52fi79Hslde04+Co/vU53edj3h/Xoi8ow9+3jqyyzy0
VdfHWQ+ow+jj2WJ8DmO/46GXo4vx+zPUhzmZlG/Yg+4Rp5+ou2+ph2PFS3gu
j/wQV+rAGvdp4B/xPGw9JU8hruG54K7WAXjN+NSNwSWRZ6FvIG7EN9Qt8v2H
fPz+ELg+rI5tlxc/zsf7LOSL+w1hHcy46Mtb1vlJ5uWC9QJe0hcOEidB3+Dd
aPHGdeE5VPSCvKGzY0rj9/zC82pBr6h7y93HLBjvevNLHCa4Lgr9a7h/SBy7
eGRe+rYB6tRR68n8XHwuLdxH6WUcL8kHrvtVIf5eQnjOJtxPoM+/nI3PGWww
79jHvOF5ovB8J7jY4XXMH74vgX918m+557WWt13UTz6frU4tkydN3/dxH5L+
E/zBc/BEn9HJ+gSfyd9W1y816s4x+6x+1lPsAm/k89NC/J4fcelrXSPvXL/H
/h2eLlNXl7p+Cc8LhO8x7jafl/QTHDXc8z3XI/ICvC+Uj9g9w7oHL6ty8fcQ
zrh+5Ij+kJc+jtMxF/tl8ge/0ffJ7h+io+C32jgdv0efT4ijderlZ+oNekS/
hd5gH3kalo11IvweA/Ny5PUN9Qe/2oiHFep/uI9+0/kYhzo1Sn6F36kEv/Rb
+AEeWTcQ3/D8/Cb5D392mLep2djvEo+XxS/4HiR/muqN80yVv2PMY6V24W8n
9R8cE3fwRdypQ4xH//1USfw9gqbnLEvi7zPg1+8L8Tk1dP4/3Wd4xXEWlsbn
5tHvjcYXHSYe89Rh3u8n/sNzf8Gf8HsqjPdxMf7u00rzjV2f2/fhB/raqhCf
k92pPTXWT/Sui/Eebn2+bN4Gq+fYQR1ifYKOoV8vyAN0jD4IP8nvs9aPsH8B
v+Eh/GP8icZ1k/gN358IzwU8Z75ZB19XL/AvfN+iuecTH/iLH5/Yt6MvQ9Tb
KeKavFFv+1sH6KOpr/R/teo6cQ2/s0oewAF2tcvEdRjXkTd4ut2+Bxyjp+An
/M4q8XzCdXhf+xvwyXmcH9aLvdQt/D0uH5ifcdGrpb4mnuMy8Tk98vf/LOI5
EA==
       "], 
      "Output" -> {
       "r2", "r1", "r1", "r2", "r2", "r2", "r2", "r5", "r1", "r1", "r1", "r1",
         "r2", "r2", "r1", "r5", "r3", "r2", "r3", "r1", "r1", "r5", "r2", 
        "r3", "r1", "r2", "r3", "r1", "r1", "r2", "r1", "r2", "r5", "r2", 
        "r2", "r5", "r2", "r2", "r2", "r3", "r2", "r2", "r1", "r2", "r1", 
        "r2", "r5", "r1", "r1", "r2", "r1", "r2", "r3", "r2", "r5", "r2", 
        "r2", "r3", "r5", "r3", "r2", "r5", "r3", "r1", "r3", "r5", "r1", 
        "r2", "r1", "r2", "r1", "r2", "r3", "r2", "r2", "r3", "r3", "r1", 
        "r1", "r5", "r1", "r2", "r2", "r1", "r2", "r1", "r2", "r3", "r1", 
        "r1", "r1", "r1", "r2", "r2", "r2", "r1", "r1", "r3", "r3", "r2", 
        "r3", "r2", "r2", "r2", "r5", "r1", "r2", "r3", "r1", "r1", "r2", 
        "r2", "r2", "r5", "r3", "r1", "r2", "r5", "r1", "r2", "r2", "r1", 
        "r2", "r1", "r3", "r2", "r2", "r1", "r3", "r5", "r2", "r1", "r2", 
        "r2", "r1", "r1", "r5", "r2", "r2", "r2", "r5", "r5", "r2", "r2", 
        "r2", "r1", "r1", "r2", "r3", "r3", "r1", "r2", "r1", "r1", "r2", 
        "r2", "r2", "r1", "r3", "r2", "r3", "r5", "r1", "r1", "r5", "r1", 
        "r1", "r2", "r2", "r1", "r1", "r2", "r2", "r3", "r2", "r3", "r5", 
        "r1", "r1", "r1", "r2", "r5", "r5", "r2", "r1", "r2", "r1", "r1", 
        "r1", "r1", "r1", "r2", "r1", "r2", "r2", "r2", "r2", "r2", "r2", 
        "r1", "r3", "r5", "r5", "r1", "r3", "r2", "r1", "r1", "r2", "r1", 
        "r2", "r2", "r2", "r3", "r1", "r2", "r2", "r2", "r5", "r3", "r2", 
        "r3", "r2", "r3", "r1", "r1", "r3", "r1", "r2", "r2", "r3", "r1", 
        "r2", "r1", "r1", "r1", "r2", "r1", "r5", "r2", "r1", "r1", "r5", 
        "r1", "r1", "r1", "r1", "r1", "r2", "r3", "r3", "r1", "r1", "r1", 
        "r2", "r1", "r1", "r2", "r2", "r1", "r2", "r1", "r1", "r2", "r2", 
        "r2", "r2", "r2", "r3", "r2", "r3", "r1", "r2", "r1", "r3", "r5", 
        "r3", "r2", "r1", "r2", "r2", "r2", "r5", "r5", "r2", "r1", "r3", 
        "r1", "r2", "r3", "r3", "r3", "r1", "r2", "r1", "r5", "r1", "r1", 
        "r1", "r1", "r3", "r2", "r2", "r2", "r1", "r2", "r1", "r3", "r2", 
        "r1", "r1", "r2", "r1", "r2", "r3", "r1", "r5", "r2", "r5", "r1", 
        "r5", "r2", "r2", "r2", "r1", "r1", "r2", "r1", "r1", "r1", "r2", 
        "r2", "r3", "r1", "r2", "r1", "r5", "r3", "r1", "r1", "r2", "r5", 
        "r1", "r5", "r5", "r1", "r1", "r1", "r3", "r3", "r5", "r5", "r2", 
        "r1", "r3", "r1", "r2", "r5", "r3", "r2", "r2", "r2", "r3", "r1", 
        "r1", "r3", "r2", "r2", "r2", "r5", "r3", "r5", "r2", "r1", "r1", 
        "r2", "r2", "r1", "r2", "r5", "r2", "r1", "r2", "r2", "r2", "r1", 
        "r2", "r2", "r2", "r3", "r1", "r5", "r5", "r2", "r1", "r5", "r1", 
        "r1", "r2", "r1", "r2", "r1", "r5", "r2", "r1", "r2", "r3", "r2", 
        "r2", "r2", "r1", "r5", "r2", "r2", "r2", "r2", "r2", "r5", "r1", 
        "r1", "r2", "r5", "r1", "r1", "r2", "r1", "r2", "r1", "r2", "r2", 
        "r2", "r2", "r5", "r1", "r2", "r2", "r2", "r1", "r2", "r1", "r2", 
        "r2", "r2", "r2", "r2", "r2", "r1", "r2", "r5", "r2", "r2", "r1", 
        "r2", "r3", "r1", "r1", "r1", "r5", "r5", "r1", "r3", "r1", "r1", 
        "r2", "r3", "r2", "r1", "r2", "r1", "r1", "r1", "r1", "r3", "r2", 
        "r2", "r2", "r1", "r1", "r2", "r2", "r1", "r1", "r2", "r2", "r3", 
        "r1", "r1", "r2", "r1", "r5", "r5", "r2", "r1", "r2", "r1", "r2", 
        "r1", "r2", "r2", "r1", "r5", "r2", "r1", "r1", "r1", "r1", "r1", 
        "r1", "r2", "r1", "r2", "r3", "r5", "r1", "r1", "r2", "r5", "r1", 
        "r5", "r2", "r1", "r1", "r2", "r1", "r3", "r1", "r5", "r3", "r2", 
        "r5", "r1", "r1", "r1", "r3", "r5", "r1", "r5", "r1", "r1", "r1", 
        "r1", "r1", "r3", "r1", "r1", "r1", "r1", "r1", "r1", "r3", "r1", 
        "r1", "r1", "r2", "r2", "r2", "r2", "r2", "r2", "r2", "r1", "r2", 
        "r1", "r1", "r3", "r5", "r5", "r1", "r2", "r3", "r1", "r5", "r1", 
        "r2", "r5", "r1", "r1", "r1", "r2", "r3", "r1", "r2", "r2", "r2", 
        "r1", "r2", "r2", "r5", "r3", "r1", "r1", "r3", "r1", "r5", "r3", 
        "r1", "r5", "r1", "r2", "r1", "r1", "r2", "r1", "r1", "r1", "r1", 
        "r1", "r2", "r3", "r2", "r2", "r2", "r1", "r1", "r1", "r2", "r1", 
        "r1", "r1", "r2", "r1", "r2", "r2", "r1", "r1", "r5", "r1", "r1", 
        "r1", "r2", "r1", "r2", "r1", "r1", "r1", "r5", "r1", "r2", "r2", 
        "r3", "r2", "r3", "r2", "r1", "r1", "r2", "r2", "r1", "r3", "r3", 
        "r3", "r2", "r1", "r1", "r5", "r3", "r2", "r1", "r2", "r3", "r2", 
        "r3", "r1", "r1", "r1", "r1", "r1", "r1", "r3", "r1", "r1", "r1", 
        "r1", "r2", "r5", "r2", "r1", "r5", "r2", "r1", "r1", "r1", "r2", 
        "r2", "r3", "r1", "r1", "r1", "r3", "r3", "r1", "r2", "r2", "r2", 
        "r2", "r2", "r5", "r2", "r1", "r1", "r3", "r2", "r2", "r1", "r5", 
        "r5", "r1", "r2", "r1", "r2", "r1", "r1", "r2", "r1", "r5", "r5", 
        "r1", "r3", "r3", "r1", "r3", "r1", "r1", "r2", "r1", "r1", "r2", 
        "r5", "r2", "r5", "r2", "r1", "r1", "r3", "r5", "r2", "r2", "r3", 
        "r3", "r2", "r2", "r5", "r5", "r2", "r3", "r3", "r5", "r3", "r5", 
        "r1", "r2", "r3", "r1", "r2", "r2", "r1", "r1", "r1", "r1", "r3", 
        "r2", "r1", "r2", "r1", "r2", "r1", "r1", "r5", "r2", "r2", "r1", 
        "r2", "r5", "r3", "r2", "r1", "r3", "r3", "r1", "r1", "r5", "r1", 
        "r1", "r2", "r1", "r1", "r2", "r2", "r1", "r2", "r1", "r1", "r3", 
        "r1", "r1", "r5", "r1", "r1", "r2", "r2", "r2", "r2", "r2", "r2", 
        "r3", "r1", "r2", "r2", "r2", "r3", "r3", "r2", "r3", "r2", "r3", 
        "r3", "r5", "r2", "r5", "r5", "r3", "r2", "r2", "r1", "r2", "r3", 
        "r2", "r2", "r2", "r1", "r5", "r1", "r1", "r1", "r1", "r2", "r1", 
        "r1", "r2", "r1", "r5", "r2", "r1", "r2", "r2", "r2", "r1", "r1", 
        "r1", "r2", "r5", "r1", "r2", "r2", "r2", "r2", "r1", "r1", "r1", 
        "r2", "r1", "r3", "r1", "r2", "r2", "r1", "r1", "r2", "r2", "r5", 
        "r1", "r2", "r3", "r1", "r1", "r2", "r2", "r2", "r1", "r2", "r1", 
        "r1", "r2", "r1", "r1", "r3", "r1", "r1", "r2", "r2", "r2", "r2", 
        "r3", "r1", "r3", "r2", "r3", "r2", "r2", "r2", "r5", "r1", "r2", 
        "r2", "r1", "r1", "r1", "r3", "r2", "r2", "r1", "r5", "r5", "r1", 
        "r1", "r2", "r2", "r1", "r2", "r2", "r3", "r1", "r5", "r5", "r1", 
        "r2", "r5", "r2", "r2", "r2", "r2", "r1", "r1", "r2", "r3", "r1", 
        "r3", "r1", "r1", "r1", "r5", "r5", "r2", "r5", "r2", "r1", "r2", 
        "r1", "r5", "r3", "r5", "r1", "r2", "r1", "r2", "r2", "r1", "r1", 
        "r1", "r1", "r2", "r2", "r2", "r1", "r2", "r2", "r3", "r5", "r5", 
        "r3", "r2", "r2", "r3", "r1", "r3", "r1", "r1", "r2", "r1", "r5", 
        "r2", "r1", "r2", "r5", "r5", "r2", "r2", "r2", "r2", "r3", "r2", 
        "r1", "r2", "r5", "r2", "r1", "r2", "r5", "r1", "r5", "r3", "r3", 
        "r5", "r3", "r2", "r1", "r2", "r2", "r1", "r2", "r2", "r2", "r1", 
        "r2", "r1", "r2", "r2", "r2", "r5", "r5", "r1", "r1", "r2", "r1", 
        "r1", "r2", "r2", "r2", "r1", "r2", "r5", "r1", "r3", "r2", "r3", 
        "r1", "r2", "r3", "r5", "r2", "r1", "r1", "r3", "r1", "r2", "r1", 
        "r2", "r3", "r2", "r1", "r2", "r2", "r3", "r1", "r1", "r2", "r5", 
        "r5", "r2", "r5", "r2", "r2", "r3", "r2", "r2", "r1", "r3", "r1", 
        "r2", "r2", "r2", "r1", "r1", "r5", "r5", "r2", "r2", "r3", "r2", 
        "r2", "r3", "r5", "r1", "r5", "r1", "r5", "r2", "r3", "r5", "r5", 
        "r3", "r1", "r2", "r2", "r2", "r2", "r2", "r1", "r1", "r1", "r1", 
        "r1", "r5", "r1", "r1", "r5", "r3", "r3", "r1", "r1", "r5", "r3", 
        "r1", "r5", "r1", "r5", "r2", "r2", "r1", "r1", "r2", "r2", "r1", 
        "r3", "r1", "r1", "r1", "r2", "r1", "r2", "r1", "r1", "r1", "r1", 
        "r5", "r1", "r2", "r1", "r5", "r2", "r2", "r2", "r2", "r2", "r1", 
        "r1", "r2", "r2", "r2", "r3", "r2", "r2", "r2", "r1", "r2", "r3", 
        "r1", "r3", "r3", "r1", "r2", "r5", "r1", "r1", "r3", "r3", "r2", 
        "r2", "r5", "r5", "r1", "r1", "r2", "r5", "r3", "r5", "r1", "r2", 
        "r3", "r5", "r1", "r3", "r2", "r5", "r2", "r2", "r1", "r2", "r1", 
        "r2", "r1", "r1", "r5", "r2", "r1", "r3", "r5", "r2", "r1", "r5", 
        "r1", "r2", "r1", "r2", "r1", "r1", "r5", "r1", "r2", "r3", "r1", 
        "r2", "r2", "r1", "r1", "r3", "r2", "r1", "r1", "r1", "r2", "r2", 
        "r1", "r3", "r1", "r3", "r2", "r1", "r3", "r2", "r1", "r1", "r2", 
        "r3", "r5", "r2", "r2", "r2", "r2", "r2", "r1", "r2", "r1", "r5", 
        "r2", "r2", "r2", "r1", "r3", "r3", "r1", "r1", "r2", "r2", "r1", 
        "r2", "r1", "r2", "r5", "r3", "r2", "r1", "r3", "r3", "r1", "r1", 
        "r3", "r1", "r2", "r3", "r2", "r1", "r2", "r2", "r1", "r3", "r1", 
        "r3", "r1", "r1", "r2", "r5", "r1", "r1", "r1", "r1", "r2", "r5", 
        "r1", "r3", "r2", "r1", "r5", "r3", "r2", "r1", "r3", "r1", "r5", 
        "r2", "r3", "r3", "r5", "r2", "r2", "r5", "r1", "r1", "r2", "r1", 
        "r3", "r5", "r1", "r1", "r2", "r2", "r1", "r2", "r2", "r2", "r3", 
        "r5", "r1", "r5", "r3", "r1", "r1", "r2", "r3", "r2", "r2", "r2", 
        "r1", "r2", "r2", "r2", "r5", "r2", "r3", "r1", "r3", "r3", "r1", 
        "r5", "r2", "r2", "r5", "r5", "r1", "r1", "r1", "r1", "r2", "r1", 
        "r2", "r5", "r1", "r1", "r2", "r1", "r3", "r5", "r3", "r3", "r1", 
        "r3", "r2", "r5", "r1", "r3", "r1", "r2", "r3", "r2", "r2", "r1", 
        "r1", "r2", "r1", "r1", "r1", "r1", "r2", "r3", "r2", "r2", "r1", 
        "r2", "r2", "r3", "r2", "r2", "r5", "r1", "r2", "r2", "r2", "r2", 
        "r2", "r1", "r2", "r3", "r3", "r1", "r3", "r1", "r3", "r2", "r2", 
        "r1", "r1", "r2", "r3", "r1", "r2", "r2", "r1", "r2", "r2", "r1", 
        "r5", "r2", "r2", "r3", "r5", "r2", "r1", "r1", "r1", "r1", "r2", 
        "r5", "r1", "r1", "r2", "r1", "r5", "r3", "r1", "r1", "r2", "r2", 
        "r2", "r1", "r2", "r1", "r3", "r2", "r3", "r5", "r2", "r1", "r3", 
        "r2", "r1", "r2", "r5", "r2", "r1", "r2", "r1", "r5", "r1", "r2", 
        "r1", "r5", "r1", "r3", "r1", "r3", "r1", "r1", "r1", "r1", "r1", 
        "r2", "r1", "r5", "r1", "r1", "r1", "r1", "r1", "r1", "r1", "r2", 
        "r2", "r1", "r1", "r1", "r2", "r2", "r1", "r3", "r5", "r5", "r1", 
        "r3", "r1", "r2", "r5", "r2", "r3", "r2", "r3", "r1", "r2", "r2", 
        "r3", "r2", "r1", "r1", "r1", "r2", "r5", "r1", "r2", "r3", "r2", 
        "r2", "r2", "r1", "r2", "r1", "r2", "r5", "r2", "r2", "r2", "r2", 
        "r2", "r2", "r5", "r1", "r2", "r2", "r3", "r1", "r2", "r5", "r1", 
        "r2", "r1", "r2", "r1", "r2", "r3", "r1", "r1", "r1", "r2", "r1", 
        "r1", "r1", "r1", "r1", "r1", "r2", "r2", "r1", "r1", "r5", "r2", 
        "r1", "r1", "r2", "r2", "r1", "r2", "r5", "r2", "r2", "r2", "r3", 
        "r5", "r2", "r1", "r1", "r1", "r3", "r2", "r3", "r3", "r1", "r3", 
        "r2", "r3", "r5", "r1", "r1", "r1", "r1", "r2", "r3", "r1", "r1", 
        "r1", "r1", "r3", "r2", "r2", "r1", "r1", "r1", "r1", "r3", "r2", 
        "r1", "r1", "r2", "r3", "r1", "r3", "r2", "r2", "r2", "r2", "r1", 
        "r2", "r1", "r1", "r1", "r1", "r2", "r2", "r5", "r1", "r2", "r2", 
        "r1", "r1", "r5", "r2", "r3", "r2", "r5", "r2", "r2", "r3", "r1", 
        "r2", "r2", "r2", "r2", "r2", "r1", "r1", "r2", "r1", "r3", "r3", 
        "r2", "r2", "r1", "r5", "r2", "r1", "r2", "r2", "r1", "r3", "r1", 
        "r2", "r3", "r3", "r3", "r1", "r1", "r5", "r1", "r2", "r2", "r1", 
        "r2", "r5", "r5", "r2", "r2", "r1", "r2", "r3", "r2", "r2", "r1", 
        "r2", "r1", "r1", "r1", "r2", "r2", "r3", "r5", "r2", "r1", "r3", 
        "r2", "r2", "r2", "r1", "r1", "r3", "r2", "r5", "r1", "r1", "r5", 
        "r1", "r5", "r1", "r1", "r2", "r1", "r1", "r3", "r3", "r5", "r3", 
        "r2", "r1", "r2", "r2", "r2", "r1", "r2", "r1", "r2", "r1", "r2", 
        "r5", "r1", "r5", "r1", "r3", "r2", "r1", "r5", "r2", "r1", "r2", 
        "r5", "r1", "r1", "r1", "r1", "r2", "r2", "r2", "r5", "r2", "r1", 
        "r5", "r1", "r1", "r1", "r5", "r1", "r3", "r2", "r5", "r2", "r1", 
        "r5", "r5", "r1", "r2", "r3", "r2", "r2", "r5", "r1", "r5", "r2", 
        "r2", "r1", "r5", "r1", "r2", "r1", "r2", "r2", "r3", "r1", "r1", 
        "r5", "r3", "r2", "r3", "r2", "r3", "r3", "r1", "r3", "r2", "r2", 
        "r2", "r1", "r2", "r3", "r2", "r2", "r1", "r1", "r2", "r1", "r1", 
        "r2", "r1", "r3", "r1", "r2", "r1", "r2", "r5", "r2", "r2", "r2", 
        "r3", "r1", "r1", "r2", "r5", "r5", "r5", "r2", "r5", "r1", "r3", 
        "r2", "r1", "r2", "r3", "r3", "r1", "r3", "r5", "r2", "r1", "r2", 
        "r2", "r2", "r1", "r2", "r1", "r1", "r2", "r3", "r1", "r1", "r1", 
        "r1", "r2", "r1", "r1", "r1", "r1", "r2", "r1", "r2", "r1", "r5", 
        "r1", "r1", "r1", "r5", "r1", "r2", "r2", "r2", "r2", "r3", "r3", 
        "r2", "r1", "r2", "r2", "r5", "r1", "r2", "r1", "r5", "r2", "r1", 
        "r1", "r1", "r1", "r3", "r3", "r3", "r1", "r2", "r2", "r2", "r1", 
        "r1", "r1", "r5", "r1", "r2", "r5", "r2", "r3", "r2", "r1", "r1", 
        "r3", "r1", "r2", "r1", "r2", "r1", "r2", "r2", "r2", "r1", "r2", 
        "r1", "r1", "r1", "r2", "r1", "r1", "r5", "r1", "r3", "r1", "r2", 
        "r1", "r2", "r2", "r2", "r1", "r1", "r2", "r2", "r2", "r1", "r1", 
        "r2", "r2", "r5", "r5", "r1", "r5", "r3", "r2", "r2", "r1", "r2", 
        "r2", "r1", "r1", "r1", "r1", "r2", "r1", "r1", "r1", "r1", "r3", 
        "r5", "r1", "r1", "r5", "r1", "r1", "r1", "r2", "r1", "r3", "r1", 
        "r5", "r2", "r1", "r1", "r2", "r2", "r2", "r1", "r2", "r1", "r2", 
        "r2", "r3", "r1", "r3", "r5", "r3", "r2", "r5", "r3", "r2", "r3", 
        "r2", "r3", "r1", "r3", "r2", "r3", "r3", "r1", "r5", "r2", "r3", 
        "r5", "r2", "r2", "r2", "r2", "r3", "r2", "r5", "r3", "r5", "r3", 
        "r1", "r2", "r1", "r1", "r2", "r2", "r1", "r2", "r2", "r1", "r2", 
        "r1", "r1", "r3", "r1", "r1", "r5", "r5", "r1", "r1", "r3", "r2", 
        "r2", "r2", "r1", "r5", "r5", "r1", "r1", "r3", "r1", "r1", "r3", 
        "r1", "r2", "r3", "r2", "r5", "r5", "r5", "r1", "r2", "r5", "r1", 
        "r5", "r1", "r2", "r5", "r5", "r2", "r1", "r1", "r1", "r1", "r1", 
        "r5", "r1", "r1", "r2", "r3", "r3", "r2", "r1", "r3", "r3", "r2", 
        "r2", "r1", "r2", "r3", "r5", "r5", "r2", "r2", "r2", "r1", "r3", 
        "r2", "r1", "r2", "r5", "r1", "r3", "r1", "r3", "r1", "r3", "r5", 
        "r1", "r3", "r2", "r1", "r3", "r5", "r3", "r3", "r2", "r5", "r3", 
        "r2", "r1", "r1", "r3", "r2", "r1", "r3", "r5", "r2", "r2", "r1", 
        "r1", "r2", "r1", "r2", "r1", "r5", "r3", "r2", "r2", "r2", "r3", 
        "r2", "r2", "r2", "r3", "r1", "r3", "r2", "r2", "r1", "r2", "r1", 
        "r5", "r1", "r5", "r1", "r1", "r2", "r1", "r1", "r5", "r5", "r1", 
        "r5", "r1", "r2", "r2", "r3", "r1", "r3", "r2", "r1", "r1", "r5", 
        "r1", "r3", "r1", "r1", "r1", "r1", "r1", "r2", "r3", "r1", "r1", 
        "r2", "r1", "r1", "r5", "r2", "r1", "r1", "r5", "r1", "r2", "r1", 
        "r5", "r2", "r1", "r1", "r2", "r2", "r5", "r1", "r2", "r1", "r2", 
        "r2", "r1", "r2", "r2", "r1", "r3", "r1", "r1", "r2", "r2", "r5", 
        "r2", "r1", "r2", "r2", "r1", "r1", "r3", "r3", "r2", "r1", "r1", 
        "r2", "r2", "r3", "r1", "r2", "r5", "r1", "r5", "r1", "r1", "r3", 
        "r1", "r5", "r2", "r2", "r5", "r1", "r1", "r2", "r2", "r2", "r3", 
        "r2", "r1", "r2", "r5", "r5", "r2", "r2", "r2", "r2", "r1", "r2", 
        "r5", "r2", "r2", "r2", "r2", "r1", "r2", "r2", "r1", "r5", "r2", 
        "r1", "r1", "r1", "r1", "r2", "r1", "r1", "r5", "r3", "r3", "r1", 
        "r2", "r5", "r1", "r3", "r3", "r1", "r1", "r5", "r1", "r5", "r1", 
        "r1", "r5", "r1", "r2", "r1", "r1", "r5", "r2", "r2", "r1", "r1", 
        "r1", "r2", "r2", "r1", "r2", "r5", "r3", "r1", "r2", "r3", "r3", 
        "r2", "r1", "r1", "r1", "r1", "r2", "r1", "r5", "r2", "r1", "r2", 
        "r1", "r3", "r1", "r5", "r1", "r1", "r2", "r2", "r2", "r1", "r1", 
        "r1", "r2", "r1", "r1", "r1", "r2", "r1", "r1", "r2", "r1", "r2", 
        "r1", "r5", "r3", "r2", "r2", "r2", "r2", "r2", "r5", "r2", "r2", 
        "r2", "r5", "r1", "r1", "r5", "r3", "r1", "r2", "r1", "r5", "r5", 
        "r2", "r2", "r1", "r2", "r3", "r3", "r1", "r1", "r5", "r5", "r2", 
        "r2", "r5", "r1", "r2", "r3", "r1", "r5", "r2", "r1", "r2", "r1", 
        "r2", "r1", "r2", "r1", "r2", "r2", "r2", "r1", "r2", "r2", "r2", 
        "r2", "r3", "r2", "r2", "r2", "r2", "r2", "r1", "r2", "r2", "r1", 
        "r1", "r2", "r5", "r2", "r2", "r2", "r2", "r5", "r5", "r1", "r2", 
        "r2", "r2", "r2", "r1", "r5", "r2", "r1", "r2", "r1", "r5", "r1", 
        "r2", "r1", "r2", "r2", "r1", "r2", "r2", "r3", "r3", "r2", "r1", 
        "r2", "r3", "r2", "r2", "r2", "r1", "r2", "r1", "r1", "r1", "r3", 
        "r5", "r1", "r2", "r1", "r3", "r2", "r2", "r5", "r5", "r3", "r1", 
        "r2", "r1", "r3", "r1", "r1", "r2", "r2", "r5", "r1", "r3", "r2", 
        "r5", "r1", "r3", "r2", "r3", "r3", "r5", "r3", "r1", "r1", "r2", 
        "r2", "r1", "r2", "r2", "r1", "r2", "r2", "r2", "r2", "r2", "r2", 
        "r2", "r2", "r3", "r3", "r1", "r3", "r5", "r2", "r5", "r2", "r3", 
        "r1", "r1", "r5", "r1", "r2", "r5", "r3", "r1", "r2", "r2", "r1", 
        "r1", "r1", "r2", "r2", "r5", "r2", "r2", "r2", "r1", "r1", "r1", 
        "r1", "r5", "r1", "r2", "r1", "r2", "r5", "r1", "r2", "r2", "r5", 
        "r1", "r5", "r3", "r2", "r1", "r2", "r2", "r1", "r3", "r1", "r1", 
        "r1", "r2", "r2", "r5", "r3", "r3", "r1", "r5", "r1", "r1", "r1", 
        "r1", "r1", "r3", "r1", "r1", "r2", "r1", "r2", "r2", "r2", "r1", 
        "r1", "r5", "r2", "r1", "r1", "r2", "r1", "r1", "r1", "r2", "r2", 
        "r1", "r2", "r2", "r3", "r2", "r5", "r1", "r3", "r3", "r3", "r5", 
        "r1", "r2", "r2", "r2", "r2", "r3", "r3", "r1", "r2", "r1", "r5", 
        "r5", "r2", "r2", "r5", "r2", "r1", "r3", "r2", "r2", "r1", "r3", 
        "r5", "r3", "r2", "r2", "r2", "r2", "r2", "r1", "r1", "r1", "r1", 
        "r2", "r1", "r2", "r5", "r2", "r1", "r2", "r1", "r1", "r1", "r2", 
        "r1", "r2", "r1", "r2", "r1", "r1", "r3", "r2", "r1", "r3", "r3", 
        "r1", "r3", "r1", "r1", "r2", "r1", "r2", "r2", "r5", "r1", "r3", 
        "r1", "r5", "r2", "r1", "r1", "r3", "r2", "r1", "r1", "r3", "r1", 
        "r1", "r2", "r5", "r2", "r5", "r3", "r5", "r3", "r5", "r3", "r5", 
        "r3", "r2", "r1", "r5", "r2", "r2", "r3", "r1", "r2", "r5", "r1", 
        "r2", "r5", "r1", "r5", "r2", "r3", "r1", "r1", "r2", "r3", "r1", 
        "r3", "r2", "r2", "r1", "r2", "r2", "r3", "r1", "r3", "r2", "r1", 
        "r2", "r3", "r1", "r2", "r2", "r1", "r2", "r3", "r1", "r5", "r1", 
        "r2", "r1", "r2", "r2", "r2", "r2", "r1", "r2", "r2", "r1", "r3", 
        "r3", "r5", "r3", "r1", "r1", "r5", "r5", "r1", "r2", "r5", "r2", 
        "r3", "r2", "r3", "r2", "r1", "r1"}], 
    "Predictions" -> {
     "r2", "r1", "r1", "r2", "r2", "r2", "r2", "r5", "r1", "r1", "r1", "r1", 
      "r2", "r2", "r1", "r5", "r3", "r2", "r3", "r1", "r1", "r5", "r2", "r3", 
      "r1", "r2", "r3", "r1", "r1", "r2", "r1", "r2", "r5", "r2", "r2", "r5", 
      "r2", "r2", "r2", "r3", "r2", "r2", "r1", "r2", "r1", "r2", "r5", "r1", 
      "r1", "r2", "r1", "r2", "r3", "r2", "r5", "r2", "r2", "r3", "r5", "r3", 
      "r2", "r5", "r3", "r1", "r3", "r5", "r1", "r2", "r1", "r2", "r1", "r2", 
      "r3", "r2", "r2", "r3", "r3", "r1", "r1", "r5", "r1", "r2", "r2", "r1", 
      "r2", "r1", "r2", "r3", "r1", "r1", "r1", "r1", "r2", "r2", "r2", "r1", 
      "r1", "r3", "r3", "r2", "r3", "r2", "r2", "r2", "r5", "r1", "r2", "r3", 
      "r1", "r1", "r2", "r2", "r2", "r5", "r3", "r1", "r2", "r5", "r1", "r2", 
      "r2", "r1", "r2", "r1", "r3", "r2", "r2", "r1", "r3", "r5", "r2", "r1", 
      "r2", "r2", "r1", "r1", "r5", "r2", "r2", "r2", "r5", "r5", "r2", "r2", 
      "r2", "r1", "r1", "r2", "r3", "r3", "r1", "r2", "r1", "r1", "r2", "r2", 
      "r2", "r1", "r3", "r2", "r3", "r5", "r1", "r1", "r5", "r1", "r1", "r2", 
      "r2", "r1", "r1", "r2", "r2", "r3", "r2", "r3", "r5", "r1", "r1", "r1", 
      "r2", "r5", "r5", "r2", "r1", "r2", "r1", "r1", "r1", "r1", "r1", "r2", 
      "r1", "r2", "r2", "r2", "r2", "r2", "r2", "r1", "r3", "r5", "r5", "r1", 
      "r3", "r2", "r1", "r1", "r2", "r1", "r2", "r2", "r2", "r3", "r1", "r2", 
      "r2", "r2", "r5", "r3", "r2", "r3", "r2", "r3", "r1", "r1", "r3", "r1", 
      "r2", "r2", "r3", "r1", "r2", "r1", "r1", "r1", "r2", "r1", "r5", "r2", 
      "r1", "r1", "r5", "r1", "r1", "r1", "r1", "r1", "r2", "r3", "r3", "r1", 
      "r1", "r1", "r2", "r1", "r1", "r2", "r2", "r1", "r2", "r1", "r1", "r2", 
      "r2", "r2", "r2", "r2", "r3", "r2", "r3", "r1", "r2", "r1", "r3", "r5", 
      "r3", "r2", "r1", "r2", "r2", "r2", "r5", "r5", "r2", "r1", "r3", "r1", 
      "r2", "r3", "r3", "r3", "r1", "r2", "r1", "r5", "r1", "r1", "r1", "r1", 
      "r3", "r2", "r2", "r2", "r1", "r2", "r1", "r3", "r2", "r1", "r1", "r2", 
      "r1", "r2", "r3", "r1", "r5", "r2", "r5", "r1", "r5", "r2", "r2", "r2", 
      "r1", "r1", "r2", "r1", "r1", "r1", "r2", "r2", "r3", "r1", "r2", "r1", 
      "r5", "r3", "r1", "r1", "r2", "r5", "r1", "r5", "r5", "r1", "r1", "r1", 
      "r3", "r3", "r5", "r5", "r2", "r1", "r3", "r1", "r2", "r5", "r3", "r2", 
      "r2", "r2", "r3", "r1", "r1", "r3", "r2", "r2", "r2", "r5", "r3", "r5", 
      "r2", "r1", "r1", "r2", "r2", "r1", "r2", "r5", "r2", "r1", "r2", "r2", 
      "r2", "r1", "r2", "r2", "r2", "r3", "r1", "r5", "r5", "r2", "r1", "r5", 
      "r1", "r1", "r2", "r1", "r2", "r1", "r5", "r2", "r1", "r2", "r3", "r2", 
      "r2", "r2", "r1", "r5", "r2", "r2", "r2", "r2", "r2", "r5", "r1", "r1", 
      "r2", "r5", "r1", "r1", "r2", "r1", "r2", "r1", "r2", "r2", "r2", "r2", 
      "r5", "r1", "r2", "r2", "r2", "r1", "r2", "r1", "r2", "r2", "r2", "r2", 
      "r2", "r2", "r1", "r2", "r5", "r2", "r2", "r1", "r2", "r3", "r1", "r1", 
      "r1", "r5", "r5", "r1", "r3", "r1", "r1", "r2", "r3", "r2", "r1", "r2", 
      "r1", "r1", "r1", "r1", "r3", "r2", "r2", "r2", "r1", "r1", "r2", "r2", 
      "r1", "r1", "r2", "r2", "r3", "r1", "r1", "r2", "r1", "r5", "r5", "r2", 
      "r1", "r2", "r1", "r2", "r1", "r2", "r2", "r1", "r5", "r2", "r1", "r1", 
      "r1", "r1", "r1", "r1", "r2", "r1", "r2", "r3", "r5", "r1", "r1", "r2", 
      "r5", "r1", "r5", "r2", "r1", "r1", "r2", "r1", "r3", "r1", "r5", "r3", 
      "r2", "r5", "r1", "r1", "r1", "r3", "r5", "r1", "r5", "r1", "r1", "r1", 
      "r1", "r1", "r3", "r1", "r1", "r1", "r1", "r1", "r1", "r3", "r1", "r1", 
      "r1", "r2", "r2", "r2", "r2", "r2", "r2", "r2", "r1", "r2", "r1", "r1", 
      "r3", "r5", "r5", "r1", "r2", "r3", "r1", "r5", "r1", "r1", "r5", "r1", 
      "r1", "r1", "r2", "r3", "r1", "r2", "r2", "r2", "r1", "r2", "r2", "r5", 
      "r3", "r1", "r1", "r3", "r1", "r5", "r3", "r1", "r5", "r1", "r2", "r1", 
      "r1", "r2", "r1", "r1", "r1", "r1", "r1", "r2", "r3", "r2", "r2", "r2", 
      "r1", "r1", "r1", "r2", "r1", "r1", "r1", "r2", "r1", "r2", "r2", "r1", 
      "r1", "r5", "r1", "r1", "r1", "r2", "r1", "r2", "r1", "r1", "r1", "r5", 
      "r1", "r2", "r2", "r3", "r2", "r3", "r2", "r1", "r1", "r2", "r2", "r1", 
      "r3", "r3", "r3", "r2", "r1", "r1", "r5", "r3", "r2", "r1", "r2", "r3", 
      "r2", "r3", "r1", "r1", "r1", "r1", "r1", "r1", "r3", "r1", "r1", "r1", 
      "r1", "r2", "r5", "r2", "r1", "r5", "r2", "r1", "r1", "r1", "r2", "r2", 
      "r3", "r1", "r1", "r1", "r3", "r3", "r1", "r2", "r2", "r2", "r2", "r2", 
      "r5", "r2", "r1", "r1", "r3", "r2", "r2", "r1", "r5", "r5", "r1", "r2", 
      "r1", "r2", "r1", "r1", "r2", "r1", "r5", "r5", "r1", "r3", "r3", "r1", 
      "r3", "r1", "r1", "r2", "r1", "r1", "r2", "r5", "r2", "r5", "r2", "r1", 
      "r1", "r3", "r5", "r2", "r2", "r3", "r3", "r2", "r2", "r5", "r5", "r2", 
      "r3", "r3", "r5", "r3", "r5", "r1", "r2", "r3", "r1", "r2", "r2", "r1", 
      "r1", "r1", "r1", "r3", "r2", "r1", "r2", "r1", "r2", "r1", "r1", "r5", 
      "r2", "r2", "r1", "r2", "r5", "r3", "r2", "r1", "r3", "r3", "r1", "r1", 
      "r5", "r1", "r1", "r2", "r1", "r1", "r2", "r2", "r1", "r2", "r1", "r1", 
      "r3", "r1", "r1", "r5", "r1", "r1", "r2", "r2", "r2", "r2", "r2", "r2", 
      "r3", "r1", "r2", "r2", "r2", "r3", "r3", "r2", "r3", "r2", "r3", "r3", 
      "r5", "r2", "r5", "r5", "r2", "r2", "r2", "r1", "r2", "r2", "r2", "r2", 
      "r2", "r1", "r5", "r1", "r1", "r1", "r1", "r2", "r1", "r1", "r2", "r1", 
      "r5", "r2", "r1", "r2", "r2", "r2", "r1", "r1", "r1", "r2", "r5", "r1", 
      "r2", "r2", "r2", "r2", "r1", "r1", "r1", "r2", "r1", "r3", "r1", "r2", 
      "r2", "r1", "r1", "r2", "r2", "r5", "r1", "r2", "r3", "r1", "r1", "r3", 
      "r2", "r2", "r1", "r2", "r1", "r1", "r2", "r1", "r1", "r3", "r1", "r1", 
      "r2", "r2", "r2", "r2", "r3", "r1", "r3", "r2", "r3", "r2", "r2", "r2", 
      "r5", "r1", "r2", "r2", "r1", "r1", "r1", "r3", "r2", "r2", "r1", "r5", 
      "r5", "r1", "r1", "r2", "r2", "r1", "r2", "r2", "r3", "r1", "r5", "r5", 
      "r1", "r2", "r5", "r2", "r2", "r2", "r2", "r1", "r1", "r2", "r3", "r1", 
      "r3", "r1", "r1", "r1", "r5", "r5", "r2", "r5", "r2", "r1", "r2", "r1", 
      "r5", "r3", "r5", "r1", "r2", "r1", "r2", "r2", "r1", "r1", "r1", "r1", 
      "r2", "r2", "r2", "r1", "r2", "r2", "r3", "r5", "r5", "r3", "r2", "r2", 
      "r3", "r1", "r3", "r1", "r1", "r2", "r1", "r5", "r2", "r1", "r2", "r5", 
      "r5", "r2", "r2", "r2", "r2", "r3", "r2", "r1", "r2", "r5", "r2", "r1", 
      "r2", "r5", "r1", "r5", "r3", "r3", "r5", "r3", "r2", "r1", "r2", "r2", 
      "r1", "r2", "r2", "r2", "r1", "r2", "r1", "r2", "r2", "r2", "r5", "r5", 
      "r1", "r1", "r2", "r1", "r1", "r2", "r2", "r2", "r1", "r2", "r5", "r1", 
      "r3", "r2", "r3", "r1", "r2", "r3", "r5", "r2", "r1", "r1", "r3", "r1", 
      "r2", "r1", "r2", "r3", "r2", "r1", "r2", "r2", "r3", "r1", "r1", "r2", 
      "r5", "r5", "r2", "r5", "r2", "r2", "r3", "r2", "r2", "r1", "r2", "r1", 
      "r2", "r2", "r2", "r1", "r1", "r5", "r5", "r2", "r2", "r2", "r2", "r2", 
      "r3", "r5", "r1", "r5", "r1", "r5", "r2", "r3", "r5", "r5", "r3", "r1", 
      "r2", "r2", "r2", "r2", "r2", "r1", "r1", "r1", "r1", "r1", "r5", "r1", 
      "r1", "r5", "r3", "r3", "r1", "r1", "r5", "r3", "r1", "r5", "r1", "r5", 
      "r2", "r2", "r1", "r1", "r2", "r2", "r1", "r3", "r1", "r1", "r1", "r2", 
      "r1", "r2", "r1", "r1", "r1", "r1", "r5", "r1", "r2", "r1", "r5", "r2", 
      "r2", "r2", "r2", "r2", "r1", "r1", "r2", "r2", "r2", "r3", "r2", "r2", 
      "r2", "r1", "r2", "r3", "r1", "r3", "r3", "r1", "r2", "r5", "r1", "r1", 
      "r3", "r3", "r2", "r2", "r5", "r5", "r1", "r1", "r2", "r5", "r3", "r5", 
      "r1", "r2", "r3", "r5", "r1", "r3", "r2", "r5", "r2", "r2", "r1", "r2", 
      "r1", "r2", "r1", "r1", "r5", "r2", "r1", "r3", "r5", "r1", "r1", "r5", 
      "r1", "r2", "r1", "r2", "r1", "r1", "r5", "r1", "r2", "r3", "r1", "r2", 
      "r2", "r1", "r1", "r3", "r2", "r1", "r1", "r1", "r2", "r2", "r1", "r2", 
      "r1", "r3", "r2", "r1", "r3", "r2", "r1", "r1", "r2", "r3", "r5", "r2", 
      "r2", "r2", "r2", "r3", "r1", "r2", "r1", "r5", "r2", "r2", "r2", "r1", 
      "r3", "r3", "r1", "r1", "r2", "r2", "r1", "r2", "r1", "r2", "r5", "r3", 
      "r2", "r1", "r3", "r3", "r1", "r1", "r3", "r1", "r2", "r3", "r2", "r1", 
      "r2", "r2", "r1", "r3", "r1", "r3", "r1", "r1", "r2", "r5", "r1", "r1", 
      "r1", "r1", "r2", "r5", "r1", "r3", "r2", "r1", "r5", "r2", "r2", "r1", 
      "r3", "r1", "r5", "r2", "r3", "r3", "r5", "r2", "r2", "r5", "r1", "r1", 
      "r2", "r1", "r3", "r5", "r1", "r1", "r2", "r2", "r1", "r2", "r2", "r2", 
      "r3", "r5", "r1", "r5", "r3", "r1", "r1", "r2", "r3", "r2", "r1", "r2", 
      "r1", "r2", "r2", "r2", "r5", "r2", "r3", "r1", "r3", "r3", "r1", "r5", 
      "r2", "r2", "r5", "r5", "r1", "r1", "r1", "r1", "r2", "r1", "r2", "r5", 
      "r1", "r1", "r2", "r1", "r3", "r5", "r3", "r3", "r1", "r3", "r2", "r5", 
      "r1", "r2", "r1", "r2", "r3", "r2", "r2", "r1", "r1", "r2", "r1", "r1", 
      "r1", "r1", "r2", "r3", "r2", "r2", "r1", "r2", "r2", "r3", "r2", "r2", 
      "r5", "r1", "r2", "r2", "r2", "r2", "r2", "r1", "r2", "r3", "r3", "r1", 
      "r3", "r1", "r3", "r3", "r2", "r1", "r1", "r2", "r3", "r1", "r2", "r2", 
      "r1", "r2", "r2", "r1", "r5", "r2", "r2", "r3", "r5", "r2", "r1", "r1", 
      "r1", "r1", "r2", "r5", "r1", "r1", "r2", "r1", "r5", "r3", "r1", "r1", 
      "r2", "r2", "r2", "r1", "r2", "r1", "r3", "r2", "r3", "r5", "r2", "r1", 
      "r3", "r2", "r1", "r2", "r5", "r2", "r1", "r2", "r1", "r5", "r1", "r2", 
      "r1", "r5", "r1", "r3", "r1", "r2", "r1", "r1", "r1", "r1", "r1", "r2", 
      "r1", "r5", "r1", "r1", "r1", "r1", "r1", "r1", "r1", "r2", "r2", "r1", 
      "r1", "r1", "r2", "r2", "r1", "r3", "r5", "r5", "r1", "r3", "r1", "r2", 
      "r5", "r2", "r3", "r2", "r3", "r1", "r2", "r2", "r3", "r2", "r1", "r1", 
      "r1", "r2", "r5", "r1", "r2", "r3", "r2", "r2", "r2", "r1", "r2", "r1", 
      "r2", "r5", "r2", "r2", "r2", "r2", "r2", "r2", "r5", "r1", "r2", "r2", 
      "r3", "r1", "r2", "r5", "r1", "r2", "r1", "r2", "r1", "r2", "r3", "r1", 
      "r1", "r1", "r2", "r1", "r1", "r1", "r1", "r1", "r1", "r2", "r2", "r1", 
      "r1", "r5", "r2", "r1", "r1", "r2", "r2", "r1", "r2", "r5", "r2", "r2", 
      "r2", "r3", "r5", "r2", "r1", "r1", "r1", "r3", "r2", "r3", "r3", "r1", 
      "r3", "r2", "r2", "r5", "r1", "r1", "r1", "r1", "r2", "r3", "r1", "r1", 
      "r1", "r1", "r3", "r2", "r2", "r1", "r1", "r1", "r1", "r3", "r2", "r1", 
      "r1", "r2", "r3", "r1", "r3", "r2", "r2", "r2", "r2", "r1", "r2", "r1", 
      "r1", "r1", "r1", "r2", "r2", "r5", "r1", "r2", "r2", "r1", "r1", "r5", 
      "r2", "r2", "r2", "r5", "r2", "r2", "r3", "r1", "r2", "r2", "r2", "r2", 
      "r2", "r1", "r1", "r2", "r1", "r3", "r3", "r2", "r2", "r1", "r5", "r2", 
      "r1", "r2", "r2", "r1", "r3", "r1", "r2", "r3", "r3", "r3", "r1", "r1", 
      "r5", "r1", "r2", "r2", "r1", "r2", "r5", "r5", "r2", "r2", "r1", "r2", 
      "r3", "r2", "r2", "r1", "r2", "r1", "r1", "r1", "r2", "r2", "r3", "r5", 
      "r2", "r1", "r3", "r2", "r2", "r2", "r1", "r1", "r2", "r2", "r5", "r1", 
      "r1", "r5", "r1", "r5", "r1", "r1", "r2", "r1", "r1", "r3", "r3", "r5", 
      "r3", "r2", "r1", "r2", "r2", "r2", "r1", "r2", "r1", "r2", "r1", "r2", 
      "r5", "r1", "r5", "r1", "r3", "r2", "r1", "r5", "r2", "r1", "r2", "r5", 
      "r1", "r1", "r1", "r1", "r2", "r2", "r2", "r5", "r2", "r1", "r5", "r1", 
      "r1", "r1", "r5", "r1", "r3", "r2", "r5", "r2", "r1", "r5", "r5", "r1", 
      "r2", "r3", "r2", "r2", "r5", "r1", "r5", "r2", "r2", "r1", "r5", "r1", 
      "r2", "r1", "r2", "r2", "r3", "r1", "r1", "r5", "r3", "r2", "r2", "r2", 
      "r3", "r3", "r1", "r3", "r2", "r2", "r2", "r1", "r2", "r3", "r2", "r2", 
      "r1", "r1", "r2", "r1", "r1", "r2", "r1", "r3", "r1", "r2", "r1", "r2", 
      "r5", "r2", "r2", "r2", "r3", "r1", "r1", "r2", "r5", "r5", "r5", "r2", 
      "r5", "r1", "r3", "r2", "r1", "r2", "r3", "r2", "r1", "r3", "r5", "r2", 
      "r1", "r2", "r2", "r2", "r1", "r2", "r1", "r1", "r2", "r3", "r1", "r1", 
      "r1", "r1", "r2", "r1", "r1", "r1", "r1", "r2", "r1", "r2", "r1", "r5", 
      "r1", "r1", "r1", "r5", "r1", "r2", "r2", "r2", "r2", "r3", "r3", "r2", 
      "r1", "r2", "r2", "r5", "r1", "r2", "r1", "r5", "r2", "r1", "r1", "r1", 
      "r1", "r3", "r3", "r3", "r1", "r2", "r2", "r2", "r1", "r1", "r1", "r5", 
      "r1", "r2", "r5", "r2", "r3", "r2", "r1", "r1", "r3", "r1", "r2", "r1", 
      "r2", "r1", "r2", "r2", "r2", "r1", "r2", "r1", "r1", "r1", "r2", "r1", 
      "r1", "r5", "r1", "r3", "r1", "r2", "r1", "r2", "r2", "r2", "r1", "r1", 
      "r2", "r3", "r2", "r1", "r1", "r2", "r2", "r5", "r5", "r1", "r5", "r3", 
      "r2", "r2", "r1", "r2", "r2", "r1", "r1", "r1", "r1", "r2", "r1", "r1", 
      "r1", "r1", "r3", "r5", "r1", "r1", "r5", "r1", "r1", "r1", "r2", "r1", 
      "r3", "r1", "r5", "r2", "r1", "r1", "r3", "r2", "r2", "r1", "r2", "r1", 
      "r2", "r2", "r3", "r1", "r3", "r5", "r2", "r2", "r5", "r3", "r2", "r3", 
      "r2", "r3", "r1", "r3", "r2", "r3", "r3", "r1", "r5", "r2", "r3", "r5", 
      "r2", "r2", "r2", "r2", "r3", "r2", "r5", "r3", "r5", "r3", "r1", "r2", 
      "r1", "r1", "r2", "r2", "r1", "r2", "r2", "r1", "r2", "r1", "r1", "r3", 
      "r1", "r1", "r5", "r5", "r1", "r1", "r3", "r2", "r2", "r2", "r1", "r5", 
      "r5", "r1", "r2", "r3", "r1", "r1", "r3", "r1", "r2", "r3", "r2", "r5", 
      "r5", "r5", "r1", "r2", "r5", "r1", "r5", "r1", "r2", "r5", "r5", "r2", 
      "r1", "r1", "r1", "r1", "r1", "r5", "r1", "r1", "r2", "r3", "r3", "r2", 
      "r1", "r3", "r3", "r2", "r2", "r1", "r2", "r3", "r5", "r5", "r2", "r2", 
      "r2", "r1", "r3", "r2", "r1", "r2", "r5", "r1", "r3", "r1", "r3", "r1", 
      "r3", "r5", "r1", "r3", "r2", "r1", "r3", "r5", "r3", "r3", "r2", "r5", 
      "r3", "r2", "r1", "r1", "r3", "r2", "r1", "r3", "r5", "r2", "r2", "r1", 
      "r1", "r2", "r1", "r2", "r1", "r5", "r3", "r2", "r2", "r2", "r3", "r2", 
      "r2", "r2", "r3", "r1", "r3", "r2", "r2", "r1", "r2", "r1", "r5", "r1", 
      "r5", "r1", "r1", "r2", "r1", "r1", "r5", "r5", "r1", "r5", "r1", "r2", 
      "r2", "r3", "r1", "r3", "r2", "r1", "r1", "r5", "r1", "r3", "r1", "r1", 
      "r1", "r1", "r1", "r2", "r3", "r1", "r1", "r2", "r1", "r1", "r5", "r2", 
      "r1", "r1", "r5", "r1", "r2", "r1", "r5", "r2", "r1", "r1", "r2", "r2", 
      "r5", "r1", "r2", "r1", "r2", "r2", "r1", "r2", "r2", "r1", "r3", "r1", 
      "r1", "r2", "r2", "r5", "r2", "r1", "r2", "r2", "r1", "r1", "r3", "r3", 
      "r2", "r1", "r1", "r2", "r2", "r3", "r1", "r2", "r5", "r1", "r5", "r1", 
      "r1", "r3", "r1", "r5", "r2", "r2", "r5", "r1", "r1", "r2", "r2", "r2", 
      "r3", "r2", "r1", "r2", "r5", "r5", "r2", "r2", "r2", "r2", "r1", "r2", 
      "r5", "r2", "r2", "r2", "r2", "r1", "r2", "r2", "r1", "r5", "r2", "r1", 
      "r1", "r1", "r1", "r2", "r1", "r1", "r5", "r3", "r3", "r1", "r2", "r5", 
      "r1", "r3", "r3", "r1", "r1", "r5", "r1", "r5", "r1", "r1", "r5", "r1", 
      "r2", "r1", "r1", "r5", "r2", "r2", "r1", "r1", "r1", "r2", "r2", "r1", 
      "r2", "r5", "r3", "r1", "r3", "r3", "r3", "r2", "r1", "r1", "r1", "r1", 
      "r2", "r1", "r5", "r2", "r1", "r2", "r1", "r3", "r1", "r5", "r1", "r1", 
      "r2", "r2", "r2", "r1", "r1", "r1", "r2", "r1", "r1", "r1", "r2", "r1", 
      "r1", "r2", "r1", "r2", "r1", "r5", "r3", "r2", "r2", "r2", "r2", "r2", 
      "r5", "r2", "r2", "r2", "r5", "r1", "r1", "r5", "r3", "r1", "r2", "r1", 
      "r5", "r5", "r2", "r2", "r1", "r2", "r3", "r2", "r1", "r1", "r5", "r5", 
      "r2", "r2", "r5", "r1", "r2", "r3", "r1", "r5", "r2", "r1", "r2", "r1", 
      "r2", "r1", "r2", "r1", "r2", "r2", "r2", "r1", "r2", "r2", "r2", "r2", 
      "r3", "r2", "r2", "r2", "r2", "r2", "r1", "r3", "r2", "r1", "r1", "r2", 
      "r5", "r2", "r2", "r2", "r2", "r5", "r5", "r1", "r2", "r2", "r2", "r2", 
      "r1", "r5", "r2", "r1", "r2", "r1", "r5", "r1", "r2", "r1", "r2", "r2", 
      "r1", "r2", "r2", "r3", "r3", "r2", "r1", "r2", "r3", "r2", "r2", "r2", 
      "r1", "r2", "r1", "r1", "r1", "r2", "r5", "r1", "r2", "r1", "r3", "r2", 
      "r2", "r5", "r5", "r3", "r1", "r2", "r1", "r3", "r1", "r1", "r2", "r2", 
      "r5", "r1", "r3", "r2", "r5", "r1", "r3", "r2", "r3", "r3", "r5", "r3", 
      "r1", "r1", "r2", "r2", "r1", "r2", "r1", "r1", "r2", "r2", "r2", "r2", 
      "r2", "r2", "r2", "r2", "r3", "r3", "r1", "r3", "r5", "r2", "r5", "r2", 
      "r2", "r1", "r1", "r5", "r1", "r2", "r5", "r3", "r1", "r2", "r2", "r1", 
      "r1", "r1", "r2", "r2", "r5", "r2", "r2", "r2", "r1", "r1", "r1", "r1", 
      "r5", "r1", "r2", "r1", "r2", "r5", "r1", "r2", "r2", "r5", "r1", "r5", 
      "r3", "r2", "r1", "r2", "r2", "r1", "r3", "r1", "r1", "r1", "r2", "r2", 
      "r5", "r3", "r3", "r1", "r5", "r1", "r1", "r1", "r1", "r1", "r3", "r1", 
      "r1", "r2", "r1", "r2", "r2", "r2", "r1", "r1", "r5", "r2", "r1", "r1", 
      "r2", "r1", "r1", "r1", "r2", "r2", "r1", "r2", "r2", "r3", "r2", "r5", 
      "r1", "r3", "r3", "r3", "r5", "r1", "r2", "r2", "r2", "r2", "r3", "r3", 
      "r1", "r2", "r1", "r5", "r5", "r2", "r2", "r5", "r2", "r1", "r3", "r2", 
      "r2", "r1", "r3", "r5", "r3", "r2", "r2", "r2", "r2", "r2", "r1", "r1", 
      "r1", "r1", "r2", "r1", "r2", "r5", "r2", "r1", "r2", "r1", "r1", "r1", 
      "r2", "r1", "r2", "r1", "r2", "r1", "r1", "r3", "r2", "r1", "r3", "r3", 
      "r1", "r3", "r1", "r1", "r2", "r1", "r2", "r2", "r5", "r1", "r3", "r1", 
      "r5", "r2", "r1", "r1", "r3", "r2", "r1", "r1", "r3", "r1", "r1", "r2", 
      "r5", "r2", "r5", "r3", "r5", "r3", "r5", "r3", "r5", "r3", "r2", "r1", 
      "r5", "r2", "r2", "r3", "r1", "r2", "r5", "r1", "r2", "r5", "r1", "r5", 
      "r2", "r3", "r1", "r1", "r2", "r3", "r1", "r3", "r2", "r2", "r1", "r2", 
      "r1", "r3", "r1", "r3", "r2", "r1", "r2", "r3", "r1", "r2", "r2", "r1", 
      "r2", "r3", "r1", "r5", "r1", "r2", "r1", "r2", "r2", "r2", "r2", "r1", 
      "r2", "r2", "r1", "r3", "r3", "r5", "r3", "r1", "r1", "r5", "r5", "r1", 
      "r2", "r5", "r2", "r3", "r2", "r3", "r2", "r1", "r1"}, 
    "LogProbabilities" -> CompressedData["
1:eJzVnX+sl2UZxk8QsEE7HBROdQpQYCDEgJgV1AGEqPgDx4+GO0IGGQz1cHYq
PDgRYv0wCWKIMEZQDKyJIYcpjZVRe185MUE0NdDCGHKikWSIjCMYK63Z9/k2
DmuX28dr98tfz97vu/d9n+/z3M/947qv536uvbVx+rwOFRUV+7pWVLz/P21D
x6UPTBvTO7/3QMO01XfOydJ1an85fEbroQNbssYXz+39yrVX5e3bgc197h4+
vi5bPWvT91c39cnbt+r97vuzq57/a8WZmsvayVNbPlE7pSFT/Xff//PWwzOq
aqrzSW8uONp/y/IsXadW/T/1fvX/F0y4/zeVWyvz1M45eMeZw599rPy7+v7o
x5e93GvYh8rt7qYZN7WNWpqlazo+qv+qf+r/UflduvnQr6tbO5bbNX+6vset
t/8+S9du+Rhw/tzML63cln39vs2Ng2+pzM+v2PnBW9p6lFu6PtTzqn/u9z+/
49lzAxp65WsHN35kyIhVWbpO7dQFQw6+8eGqclv9r4d+cHDEjixdq+fp+lPP
n+mzaMrKWVuzlSPnHd00pyo/cPfE2rkDry630fpNjT/9/0p/1M3eO2lm3dX5
Fxv3T+nSvCFL16ml8rVo8Lq1D+yqyvvPbLzmjgmPZo2/vX3+uiPdyr+r/qnv
q+fV9+n71fzQ/0fnXz1fO3LyfZVzeuS/Wt0y6I91P83SdWrV82p937yxeWuv
oVX5Jx/60Xc2Pt01P17Rd/6sLbuy9Dv1P9T40vlT+sM9f2796NYvVD8q+0v7
T+1T8kcWPvKZcbserMjPjL741oRhncut6p9aH68eHfTd4d/+X9vh8ZtH7Jv7
syxdq/Xb961nDo56vWv+k8buH3h4bqf855Vdxja8vTdLvxc9PnDLH/XvlPw0
7ZlaO+rNyvzC6M27N9z7aJauU6vGR/lX6v9R+150/aX0M7U/aV2ndd5+fSv5
UeuX+ld0/Lbt+UP1Ux/tlO/+3PI35h37XZauUxsdX7r1T3T/6PhS/eiO393/
j95X+oPaT7f/T9efel7hk0WXf+UfqflR8TnV7278U/knbv1I+xeNH7v1n/LP
1PjsqO1323Ut3fOTY5f3XvBCc5auUxttv+j6oOvnh9m2u2YMvarcTmn4+PhZ
m7Zk6VrhQ+71R+MPJT/UPrn1P/XfaH5FxVfqeSVfVH5ofKvkQ9k3+n01fkq+
aH6Urm9q/yh+pb6v/Fe3/aP6S8mXe31d6fGN279S8vXNUh52XQkfSdeppfl3
el/Jl3pexX9u+VHfp/krKh/q/9H5p/6hsn8Un6f5ZTU/yj+h9vm1d3DM89nE
fafWN41rzZaU1u2Sd8mviI5vqf+k/INo/gKNr6LtF31erT+3/6aeV/5p0fFl
1X+lPw8PHFSzouex7M5SnqR9S+VL5V/c8RkdXze/hPaf6m83fkPv0/x6ND6q
5MPNT6T+s7Kfi5ddfKJ+e+e8/5ihu2pe2p+l69S61we1n258i+aPVHxWdH61
m//qjs9pfl3xR9T3lf2m6ytaP7rtixo/io+7/VfqX1F8nOIDdHxofiRa/1P8
mOpP9/6k6OcVP8A9v9H8F/f4R+O/7vFR/pWa/2h8ye1fu/0HpR8pfu8e3+j1
6c4f0v9P40tqv9zxjVv/K/8t2r5Hxw/0eSV/ND8UHT8o/Urlp+j5e/W8wpfd
/FvK71TzS/0XN3+O8v/c+L07PnDvP3PnB5R+jOY3RfvH7vtu/9jt37jj96LH
1+q+8v/c+Tt3/En7R+0fnR83f4ji09H4BLWfanyofVH+Ba0fEL0+1PhT/rZb
/xWd36yep/yXaPvt/n7Xjs2L/7b2ffkXNmR/73/uSJauU+vmr7rxz6LPX/T8
0/FT9o3uj6HPR+OLVP4Vv4bW76HjQ/0/Wl/L7T8r+Y7eX3P2HTt2MutwzZCL
3R7552UtfX/0/6P6J5o/E63fafxB+ZPUv3Xv34jGNxT+Ei1fbv5qND+a5m+i
/Yvo8XPXD6T4Q/T8Uf4YtW/u/BLlV1N+AN3/7MbP6PzQ9aW+785fKf9dxTdu
+x3N71H/X/HXr3R8gq4Pd/1nd/6a5p/c+VU3vuaWLxr/uPF3Wn9T9c9df7no
8RWtzx8dXyp+9JoTC++ZcKFL3mvG7j2P1XfI+23c+OSF1U9n6Xeqn6j/5PZf
3P5Z3cyRO7/R7+1s486u86t6v5rNGbN72LRubeXf3f6Hks/Jn1r2ixPDOuYf
+/HDpxbNO5Gtqp/WdvRAW5Z+V/Kv6jdQ/DU6P+OO/938Ozf+o/SLG9+Jjq/d
9fkov8o9fmr/uJvfp+ZP9Y/Wz6D+oRt/pPGx0l/u80Xc/j9dv1S/R9cfofUp
aX6d1v+m/rc7fnCv72j97x7f6PxE9PxQ/4CeLxCdP1Pvp/U5oteX0r+0/lr0
/gkqP1Q+ov0Liv/S9UXrL1N8rOjxeeI5/T8elFt+KP5F1xflz9H+u/WX27+P
1j/u/LHbflL/Mfp8YDV/lJ/lti/dSjz91E4u8fjTNX2/u751tH6O9i9ofO8+
n8htv931M6Ln382vU/ETtb/0/W79rOyHO3/r3n/g/r6KLyj+HO0fuf0H9/zS
+Vf5azo/yv7Q+j60PjydX5p/j44f3fvz6fhGx8fR/oV7/bvvR/PL1PtV/sm9
v80tn9Hr183/cNcPpPnNaP4r5YdH5w+i8XtaH4LKJ8Xfo88XVfrTXV/KHX9F
739z4wv0/yXecWqnjGsd0HLoxSxdu/lV0fiVOz9I1zetr0nxFYpPuu1/9PPR
/F8qn7T+RLR/ED1/7vp1NL/mHh83/unW/8p/VO+/NG93qpS3O1vO30WPn3o/
9V+pfNL6nFT+qX9TXfKTrl91+sL4/B/Z9J7furiz7niWfo+Oj9zn/7j9a3d+
kco/jd8pP0GNHz1/Tb0/+QmX6r2z71n9Knd9AcXvdPMn6P48pT+j+anR8S/F
v939p/af5tfU+qX6n8qnOz/l5j9Ey797/qL7r+w3Xd8Uv1D7+935HxpfUvxK
fV/5P+76Her76r77fF6a33TXn3HHH9H4cfT5YGr83P9fyb8bn3TnZ6j/Rcf/
e2vqP31P3y550/q/9Jh605NZuk6tkj+lf2j9F1pfgNpfd/6e4lcqflT8TDf+
vaO2323XtXTPT45d3nvBC81Zuk5tdP5Pnd9F/Wu6f57Ojxp/t35T/qd6XukP
xc+i8SsdX3q+l7K/FF9z46/u+NUdP0efr+n2v+j5lnT+VX0CWl+Fype6r/pH
/VeKD1P+hjv/Qt8fXd/avT7c8RH9Pq0vQveXRN9320d3/6l+dY8fHd+i90/l
F934k3t/J7UvCj9019+l+Kub/+LGByn/TM2Pkn8VX7nXZ7R/or7v5tfI75fs
9HM3fO3Ls19pLdvt1Lr5me71T+fPLV/u8wvo+FH9FF0fmO4vdst3ND+c4uPR
51tH8xcpfqXsoxu/ovG9wifc/DLVP8Wvjo7fovW7+/7SUh351KZ8zdJ3WV+e
6g93/i86PnDLB11/bv3r5vdE54ep/YvGR6j/os6np/VX3PktN/9c5Q9p/93+
K5UvZV+o/qL9c+dnlH1x7y+j/aP8Bbf/U3T96q7/SPE7Kh/u81vd+snNb3PH
p0q+lP+l5k+dP0X5VTQ/Ru0rxd+j67e5+Rt0fSj5Vv6B+v9Kft37R9R9Gl9S
/kE0vueuP0f5iW7/UK1Ppb+Kjn9R/e/Ob9P9k+7xc/ML3PE1/X/0/7vPJ4s+
XyA6/o22L9R/dq9P9X21P0Sdj0PlOxpfjo7/VP/V+Kr9W9H4Gn2/8k+SH/7f
/Trns8/vO7W+aVxr2T+P5k+o9UnP147WP6p/1L5SfEE9r/wvN39dPa/iR3q+
m3v/TPT+DPp9mv9V/lnR8+9u/U/vq/p57vwuxRei4zM3v1bdV/tH1Pqg9ato
/+n4u/fvuPUbxV9VflvZPze/V42fWj90/Nz4kBt/cftP7vyzW7+49ROtDxmt
P9zy4cY33fx29bySX2p/1H0lf6p+rft8abf9d+efVH0N+v+U/aH8zOj9G9H9
c8fn0f4FtQ90fqh+duMfNH+s1h/Fh6L9FzV/lN+h5lflv2n9Rcr/V/VBKH/S
nX+h8R3lN6n+qfF150fd+Ar1b+j6ovLn1r/u/Ynu9yt8lNpnOn/U/3XzY9z5
ZWWfo8dHyY/7fG+lf6l+UPox/c+Xj6yoPb32qcv+vzu/SfPX7vjTjS+q+278
ouj8Ojf/xI3fKv4G/b6b3+Gu36S+7/Yf1P57d3xI14e7foDCT9rz5c6049G5
8Wc3fkL9e4X/Uvlwy6+6T/d/uOfHrT/c+CsdPzc+48a/3PhBND7kti9u/yza
v3P7p+7xUfZV7f9U8QGtX+vW70XPX9P8UnR848YH3fOr/j/df+uO/4uef1Pr
180/V/ggrQ9E94+47TfN/9H+0/0NbvzBvf9H4RsqvqLnk1B+Hj3/hur/ovuP
0fwIN/5D15eaX6Uf6P4+dT6Vu36PO76k+tFdX1u9342fUHyB5nfc/tWVHv+q
9a3yG9Hnf7vPZ73S8ZXo+IfyM93+eTT/2p1fovKv+Avq/cr/jp4/yv+Pjv/p
85SfEu3fXun6Ifr7FF9z+79u/8YtXwrfoPrd3f9o/4TiZ278Ntp/Uc/L/efi
/CO3f+eOb9X7Kf5M82+U3xC9/yX6+ejz4d34SrT9uuv48ddvmH46e6b+ueUL
v/pK1nfSjaOrt3fKU0vHl/Kn3PlPt36n8uvmN6j+Uf+G7u9zx1eLl118on57
57z/mKG7al7an6Xr1LrjI6r/3fqR4ru0fk60/+Tmz0XHl8q/c+cPaXyp8Gs1
fvR8UDc+p/pP9xdT+aH1uaj8KP463X9E8TW1flLeNLXPDhxUs6LnsXI+lfKn
6f6C6Pyfer/7fFN1320f3PfV+REK36f1Sal/R/lN6ny16PwcPd/AbX/c/C6q
f6j+p+ur6Ps/o/PHbv+Azp/6PuWvpHPqLj3H7kj5d/f40vXr9i8pfkvjF2Uf
o/Or7v0LlJ9D36/qO7jXf9H3T6j3U//aLX90fmh+UOHfFJ+i61t9n/LjaP9e
K+EuE0u4y5KSXlzyHp1/TvE7tf8tmr+g7tP6lW79Er1/1r3/X/nvbvl22x93
fi06P6f8x6Lbv6I/r+5H15dw1weI5g9S/eT2T6L5MRS/j14fRec/UPvqfp7W
v3Lnp+n4u+vnuvePu/UTHV93/Uga37j9czc/0Z2/dq9fNT4UH5PjJ+p/UvzU
bd/V/Lvlz32f9k/pd7p+3PbZjY+6+UfUflD9o/xDt3/6bxagU2E=
     "], 
    "CountMatrix" -> {{1020, 1, 0, 0, 0}, {5, 992, 7, 0, 0}, {0, 17, 367, 0, 
     0}, {0, 0, 0, 348, 0}}, "IndicesMatrix" -> {{CompressedData["
1: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
spRlrCSBtaxnA1tIYgc72c1hjvA/AlMG0Q==
       "], {2043}, {}, {}, {}}, {{574, 
       1198, 1331, 2491, 2713}, CompressedData["
1:eJwt13d0CAYeB3AxSjmqThGjaIxwhJdaqWuNOiOxXayzQihKxCNEUw2NGqk9
alSKqNEaQakYsaXnqKtIUDN9dh9HrTbouU/fuz8+7/f/7/veb1QdOKprTEC+
fPlyC+TL90ctSCFeojDFKUEpylKe16nCGwRRnRrUpBa1qUMIoTSgEU0I421a
0Zq2hBNBV7oRSQ/60o/+RDOE9xjK+4wiltHEEc8EEviIRJL4hKkk8ykzmcNc
5rGQJXzOclJYyXq+YiObSGMH6ezmAIc4zBGOksl3nOQUp8kmh3P8yHkucYXr
3OA2d7lPHi/IL5ACFKIIL1OUYvyJErxKGcoRSHkqUZUahFCP+oTSkCa8xTu0
5F1a0YYI2tOJSKIYzFCGMZxRxDKaOOKZQAITSWQSk0liCp+QzBzmsZDPWMJS
lpHCF6xgJatYw1dsYBObSWML37CdHexkF7vZw14y2McBDnGYo/xAFtmc5wIX
uUIuV7nGLe7wH+7zgIc84XdeUDC/bCjGq9TmL9ShLiHUoz6hhPEurWlDW8KJ
oAe9GcBABhHNUEYQwyjGEc9HJDKZJKYyjZnMYwGLSOVL1rGBjWxnB9+yk3R2
s4/9HCGTY2Rzlh+5QC4/cY3r3OIeD3hIHs/4nQBzJT8FKUxJ/kxpylCZKlTl
DYKoRk2CqUUdQgilEY0Joyl/5W1a0YZw2tOBjnQlku70oCd9GEAU0QxmKCOJ
IZYxTOADEviQSXxMElOYxnRmMZuFLGIxS/iClawildWsJY2tfMMu9rCXgxzi
MEfJ5DgnyCKHs5znAhe5xBV+4irXucs97vOAhzziCb+Rx1Ne/JGNgV+AgrxE
UYpTktcoSyAVqEgVgqhODYKpRV1CqEcDGtKYJjTjb7SmDW1pR1/6EcVAhjKc
0YwljnGMJ54EPmQiiUxiMknMYA5zWcQyVrCKVL5kLV+zje3sYi8ZHOQomRzn
JKfIJocznOU8l7jMFa5zg1v8zF0e8yt5PCXAQi1MMV6hNOUIpBJBVKMGNQmm
PqE0oBGNacJbtKAl7YigEz3oQz/6M5D3GMZwRjCSUcQyhrHEMY7xTGAyU5jG
dJL5lNnMYT6L+ZxVpLKaNaxnA5vZwja2k84RTvJvTpPNRS6Ty1WucYOfucs9
7vMLD3nMr/xGHk95xnNe/P9oKcBLFKEor1CGslTgdSpTlSCqUZ1g6hJKGM1p
QRvC6UgnOtOFbvSkF33oSxSDGMwQhjGc9xnBSGIZSxzxfEACiUxjOsnMYjZz
mc8CFrGUZaSwklWkspY0viWdXexmL/s4QCbHOM4psjhNDpfJ5To3ucUd7vIL
D3nEU54T4DjMTwEKUZgiFKMEpShNGcpSjopUoRo1qEMI9ahPKA1pSnNaEk4E
7elAZ7rSje70YiCDiGY4I4hhDHGMJ54JJJDIVKYzg2RmMYf5LGApy1hOCqmk
sZ10drGHDPZxhO84xvdkkcMZznKO8+RylWvc4Ca3ecRjnhBQRF8pQnFKEkhF
qlCVIGoSTC3qEEIYzWhJa8KJoCOd+TuRdKcnvehNP/oTxVBiGU0ck5jCdGYx
lwUsZDFLWcZyUkhlNWtYx3o2sYWtbCeDfRziMEfI5J8c5wTfc5IfyOI02eRw
lnNcIJebPCaPp/yXFwS8rI8UpySlCKQ8FahMEDUIpg51CaEe9QnlTRrQlGY0
pyXtCKcDXehGJD3oRW/+QV/60Z8BDGQQ0QxmCMMYQQyjiGU0cYxjPPEkMJHJ
JDGFqUwjmZnMZg5zmc9SlpNCKutYz0a2sJN0dpPBPvZzgIMc4jBH+BcnyOIM
Z7nARS5zhVxucps73OUBj3jMM55TtKhfhuKUoBSvEUh5KlKJytQkmFrUJoRQ
3qQhTQjjHZrRnBa0pA3tiKADXehGJL2IYhDRDCeGsYwjkY9JYiozmMU8FvEZ
S0hhBamsZg1fs5FNbCaNrWwjg/0c5DD/A7Si/xU=
       "], {876, 1240, 1408, 1934, 
       1975, 2309, 2408}, {}, {}}, {{}, {821, 826, 1067, 1078, 1224, 1294, 
       1370, 1470, 1587, 1634, 1701, 1787, 1832, 1987, 2372, 2454, 
       2509}, CompressedData["
1:eJwV0m1MkGUUBuDX76RZNJJhTlmAYHxkLKkEwZzWcoqpsGQjMLCGLcEprTUK
FYaWJc6aSokCbi3G/IQwN1dL3UBjIbOaG40wUWoSS5zL0gy9+HE9z8/7nHvn
8cJ1K0pGBUGwzvOIP4wIpjKTFFKZyzzms4glZJJDIat5g7WUUk4Fu9lDPQc4
wjG+p5OL9NDLb1zhD+7wH5PM9TBhTCaSKKKJIYnZpJHJCvLIZzVFvMXIkqVs
pYZ2OrlAN/0jJYyWRyjhRBJLCqksJJNlZFHAZirZxkd8zE52sYf9HKaZFr7l
PF1coJc+rnCNAQYZ4l/GjwmCiYQwhRnEk0ASs3iKfN7kHcrZRAXb+ZxGmvia
s3TQSRe9XGOAwZG8sUHwIA8RRgTTiGMOz7OALLLJ4XU2UsVWPqCaHdRQSx2H
OMkpOujkRy7TxyDXGeImt7jLMCHj3CiTCSeSJ0gimTTSyWA5WWTzCnmsoYQy
3qOcTWxhJ3U00sRhvuEiv3CJy/TzF6PG64hYEnmSWSSTyjxeZDGZFLGBUsrZ
TAWVfEIt9bTwFcdp41d+529u8z/DBBPcBqFMIZo44nmGpbxMPqt4jWLWU8Vn
NNLMd5ymnXN08APn6eInuumhl0Fucpd7jH4gCB5jKtOJJIYEknmaFJ4jjXQy
mM8LvEQWK8kljw28TRkV1HOQQ7Rwkjau0s8AfzJmol6YwKMkMIcFLKWAD9lG
NbU08AUHOUozLbTSRjvn+Jkb/MMw90ZyQuxMFNHEkEAiz5JGOjnk8ir5FFHM
et6ljPfZSBU7+JRd7GUfDXxJK8c5wSnOcB/UOLuH
       
       "], {}, {}}, {{}, {}, {}, CompressedData["
1:eJwN02lozwEYB/DfZjNHbia3yRCKMfdsrnKW+btGilyRK3NfiZJrjrnLHDnG
MFnYckQjss0LsjJmKXL+YyvRhPJ58Xmel9/nqeeJm70stDQiCIIZSi29IbHE
0ZEe9GMQyQwjlYWks5qt7GQPeznDefLIp4BiSiinkh80ldmK1nRhMCkMZQJT
SGMaM5nFfNJZyUZ2sJMMDpLFGbLJo5BiSvhKmJ9ERAZBNDE0oDHNaUFf+pFE
CuMIMZl0NrKPs2Rzi0IeUMJTynjNWz7yiTDfCGrIph6tSaA3iaQwmonMZxv7
yeQ4WZwil6tc4yYFPKGIUsp4xTs+8pkwf/hLTJS9iaMDHelFbwaSRDJDGcZ4
QkxlOjNYxgp2kckBjnCMLE6TQy7XKOAFbwgTGe3mqEcTmtOS9nSlOwMYwnBG
MI4QaSxnD5kc4wSXyCOf2zzmJWVUEOYX/4iqKY8OdCaR6cxiLmvYxm4yyOIC
l7jCDQp5yBOeUspLynnLO97zhTCVVNMsJgja0JZ2xNGNEYxiEmksYBFbOcRh
jnKRy1znAY94TinlVFBJFdX8JsqDR1OT2tSlPg2IJZ5O9KAvSQxhNCHmMI9F
LGYpa9nObvZxmHPcpIC73KeIYp7zmvd85jtV/KCayNrmIZauJNCH/gwmmZGM
YiypLCGdFaxnM0c5ySlyyOU6RZTwjBdU8IGvfKeKf0TUCYJGtCeeniSQSBJj
mMdCVrGGdWxgE1vYzi4yuEg+t7nDPf4DFQy1Dg==
       "], {}}}, 
    "ExtendedClasses" -> {"r1", "r2", "r3", "r5"}, "Weights" -> 
    SparseArray[Automatic, {2757}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 3.5208560029017046`*^-6, "SingleEvaluationTime" -> 
    0.0016786666666666668`3., "Version" -> {11.3, 0}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.764676347613431*^9, 3.764677465757758*^9, 
  3.7646778338475246`*^9},
 CellLabel->
  "Out[259]=",ExpressionUUID->"ca615e77-57f8-40da-8072-fb109143ddcf"],

Cell[BoxData["0.9891186071817193`"], "Output",
 CellChangeTimes->{3.764676347613431*^9, 3.764677465757758*^9, 
  3.764677833852109*^9},
 CellLabel->
  "Out[260]=",ExpressionUUID->"7360b6b1-f831-4bf0-91f6-775f750ab21f"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2FNKP+HnLXEpe2N/7kp50LnvT+2vrt17uan5
Ak71bjcvTFrS9da+9nOrjFzDK3vVhMm8le8e2nMtNDbdJvHGnpl/9dM1cU/s
u+qlWjaVHMFpjpzv/zM1Eu/sjwcfWSsz4419t+6WH4sTntvv/sny3eDXO3u9
4rfTcl/esVf54xR3XDDKvtbs+IYNl9/au6xx41ad8trexWxjXuGeJwT997BK
ZJ37w1v2sBBL+brsZUTcO/vZ+4OUJRa8te+4U/vDnf8VyeEGAMCQewA=
   "], {{0, 0}, {4, 
   4}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1020", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1020", "\" examples of \"", "\"r1\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.9951219512195122`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.9990205680705191`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.9970674486803519`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1020, " examples of ", "r1", " correctly classified"}], 
         Row[{"Precision = ", 0.9951219512195122}], 
         Row[{"Recall = ", 0.9990205680705191}], 
         Row[{"FScore = ", 0.9970674486803519}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["5", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "5", "\" examples of \"", "\"r2\"", "\" misclassified as \"", 
             "\"r1\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.004878048780487805`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.0049800796812749`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{5, " examples of ", "r2", " misclassified as ", "r1"}], 
         Row[{"Column fraction = ", 0.004878048780487805}], 
         Row[{"Row fraction = ", 0.0049800796812749}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"r3\"", "\" misclassified as \"", 
             "\"r1\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "r3", " misclassified as ", "r1"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           TemplateBox[{
            "0", "\" example of \"", "\"r5\"", "\" misclassified as \"", 
             "\"r1\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "r5", " misclassified as ", "r1"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"r1\"", "\" misclassified as \"", 
             "\"r2\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.0009900990099009901`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.0009794319294809011`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "r1", " misclassified as ", "r2"}], 
         Row[{"Column fraction = ", 0.0009900990099009901}], 
         Row[{"Row fraction = ", 0.0009794319294809011}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["992", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "992", "\" examples of \"", "\"r2\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.9821782178217822`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.9880478087649402`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.9851042701092354`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{992, " examples of ", "r2", " correctly classified"}], 
         Row[{"Precision = ", 0.9821782178217822}], 
         Row[{"Recall = ", 0.9880478087649402}], 
         Row[{"FScore = ", 0.9851042701092354}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["17", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "17", "\" examples of \"", "\"r3\"", "\" misclassified as \"", 
             "\"r2\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.016831683168316833`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.044270833333333336`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{17, " examples of ", "r3", " misclassified as ", "r2"}], 
         Row[{"Column fraction = ", 0.016831683168316833`}], 
         Row[{"Row fraction = ", 0.044270833333333336`}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"r5\"", "\" misclassified as \"", 
             "\"r2\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "r5", " misclassified as ", "r2"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"r1\"", "\" misclassified as \"", 
             "\"r3\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "r1", " misclassified as ", "r3"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["7", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "7", "\" examples of \"", "\"r2\"", "\" misclassified as \"", 
             "\"r3\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.01871657754010695`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.0069721115537848604`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{7, " examples of ", "r2", " misclassified as ", "r3"}], 
         Row[{"Column fraction = ", 0.01871657754010695}], 
         Row[{"Row fraction = ", 0.0069721115537848604`}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["367", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "367", "\" examples of \"", "\"r3\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.9812834224598931`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.9557291666666666`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.9683377308707125`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{367, " examples of ", "r3", " correctly classified"}], 
         Row[{"Precision = ", 0.9812834224598931}], 
         Row[{"Recall = ", 0.9557291666666666}], 
         Row[{"FScore = ", 0.9683377308707125}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"r5\"", "\" misclassified as \"", 
             "\"r3\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "r5", " misclassified as ", "r3"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"r1\"", "\" misclassified as \"", 
             "\"r5\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "r1", " misclassified as ", "r5"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"r2\"", "\" misclassified as \"", 
             "\"r5\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "r2", " misclassified as ", "r5"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"r3\"", "\" misclassified as \"", 
             "\"r5\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "r3", " misclassified as ", "r5"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["348", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "348", "\" examples of \"", "\"r5\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{348, " examples of ", "r5", " correctly classified"}], 
         Row[{"Precision = ", 1.}], 
         Row[{"Recall = ", 1.}], 
         Row[{"FScore = ", 1.}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1021", "\" example\"", "\"s\"", "\" of class \"", "\"r1\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.9990205680705191`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1021, " example", "s", " of class ", "r1"}], 
        Row[{"Recall = ", 0.9990205680705191}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1004", "\" example\"", "\"s\"", "\" of class \"", "\"r2\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.9880478087649402`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1004, " example", "s", " of class ", "r2"}], 
        Row[{"Recall = ", 0.9880478087649402}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "384", "\" example\"", "\"s\"", "\" of class \"", "\"r3\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.9557291666666666`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{384, " example", "s", " of class ", "r3"}], 
        Row[{"Recall = ", 0.9557291666666666}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "348", "\" example\"", "\"s\"", "\" of class \"", "\"r5\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{348, " example", "s", " of class ", "r5"}], 
        Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1025", "\" example\"", "\"s\"", "\" classified as \"", "\"r1\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.9951219512195122`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1025, " example", "s", " classified as ", "r1"}], 
        Row[{"Precision = ", 0.9951219512195122}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1010", "\" example\"", "\"s\"", "\" classified as \"", "\"r2\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.9821782178217822`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1010, " example", "s", " classified as ", "r2"}], 
        Row[{"Precision = ", 0.9821782178217822}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "374", "\" example\"", "\"s\"", "\" classified as \"", "\"r3\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.9812834224598931`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{374, " example", "s", " classified as ", "r3"}], 
        Row[{"Precision = ", 0.9812834224598931}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "348", "\" example\"", "\"s\"", "\" classified as \"", "\"r5\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{348, " example", "s", " classified as ", "r5"}], 
        Row[{"Precision = ", 1.}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{3.5, 
       FormBox[
        RotationBox["\"r1\"", BoxRotation -> 0.], TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["\"r2\"", BoxRotation -> 0.], TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"r3\"", BoxRotation -> 0.], TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["\"r5\"", BoxRotation -> 0.], TraditionalForm]}}, {{3.5, 
       FormBox["1021", TraditionalForm]}, {2.5, 
       FormBox["1004", TraditionalForm]}, {1.5, 
       FormBox["384", TraditionalForm]}, {0.5, 
       FormBox["348", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["1025", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["1010", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["374", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["348", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"r1\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"r2\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["\"r3\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["\"r5\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.764676347613431*^9, 3.764677465757758*^9, 
  3.7646778339128923`*^9},
 CellLabel->
  "Out[261]=",ExpressionUUID->"e0872e7b-fa18-4c92-b0f3-de4c2d28b4c8"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1918, 1003},
WindowMargins->{{1, Automatic}, {1, Automatic}},
FrontEndVersion->"11.3 for Linux x86 (64-bit) (March 6, 2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 1742, 50, 214, "Input",ExpressionUUID->"1fb841ef-4e46-4970-92fa-bdca5b8eb74d"],
Cell[2325, 74, 897, 23, 44, "Output",ExpressionUUID->"bdfa08b2-1dce-43b1-953c-c6c4e51b1267"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3259, 102, 163, 3, 57, "Subsubsection",ExpressionUUID->"680299ec-ba8f-4488-a15e-f59dd2a893e9"],
Cell[3425, 107, 1383, 41, 127, "Input",ExpressionUUID->"573554bf-fb3b-457c-998f-88a75ff06e9e"],
Cell[4811, 150, 547, 14, 98, "Input",ExpressionUUID->"22efbb1d-9790-485f-a266-54b2a206459e"],
Cell[5361, 166, 782, 24, 98, "Input",ExpressionUUID->"01653eeb-6b8c-4577-972e-5457ed284b3a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6180, 195, 173, 3, 57, "Subsubsection",ExpressionUUID->"726b52e2-7ebb-4c2a-9fdc-104b077f0a65"],
Cell[CellGroupData[{
Cell[6378, 202, 385, 9, 39, "Input",ExpressionUUID->"e68fefea-33bc-4088-9a02-5a9e05af3da4"],
Cell[6766, 213, 106235, 1903, 86, "Output",ExpressionUUID->"ded75cd8-c545-48af-bc26-dd15fbf9a2d7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[113038, 2121, 230, 4, 39, "Input",ExpressionUUID->"82e98c4e-ac56-4204-b290-c6e19b3e42b3"],
Cell[113271, 2127, 79820, 1565, 719, "Output",ExpressionUUID->"81b5bc6d-e20a-4ab3-983a-a18985a4e047"]
}, Open  ]],
Cell[CellGroupData[{
Cell[193128, 3697, 497, 9, 98, "Input",ExpressionUUID->"d5814991-a2c2-4cb7-b9dd-21d648160d2d"],
Cell[193628, 3708, 267536, 4389, 86, "Output",ExpressionUUID->"3419ad17-473e-46c0-a9d5-e7e22e14aae0"],
Cell[461167, 8099, 270, 4, 44, "Output",ExpressionUUID->"03e018da-4d8d-4a83-b978-95f38b1ec4f6"],
Cell[461440, 8105, 26378, 686, 401, "Output",ExpressionUUID->"91dc5ef5-c67f-4e9b-b6f3-18d2ab957d99"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[487867, 8797, 188, 3, 57, "Subsubsection",ExpressionUUID->"739e36c1-1522-4ed5-9a15-99dfca25edb2"],
Cell[CellGroupData[{
Cell[488080, 8804, 399, 9, 39, "Input",ExpressionUUID->"65f70c7b-245e-45f0-a760-90635b2e983c"],
Cell[488482, 8815, 42277, 783, 86, "Output",ExpressionUUID->"393b417d-101b-4aa1-87f5-78add7c18088"]
}, Open  ]],
Cell[CellGroupData[{
Cell[530796, 9603, 232, 4, 39, "Input",ExpressionUUID->"759fe071-9565-4cae-9763-6965d006e3f4"],
Cell[531031, 9609, 55522, 1086, 719, "Output",ExpressionUUID->"95f4ec96-3cd0-47cc-b1d7-5f0d37f290bb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[586590, 10700, 444, 8, 98, "Input",ExpressionUUID->"b5d3c949-2f55-4628-90b5-93c471daa97e"],
Cell[587037, 10710, 102603, 1638, 86, "Output",ExpressionUUID->"ca615e77-57f8-40da-8072-fb109143ddcf"],
Cell[689643, 12350, 218, 4, 44, "Output",ExpressionUUID->"7360b6b1-f831-4bf0-91f6-775f750ab21f"],
Cell[689864, 12356, 26376, 687, 401, "Output",ExpressionUUID->"e0872e7b-fa18-4c92-b0f3-de4c2d28b4c8"]
}, Open  ]]
}, Open  ]]
}
]
*)

