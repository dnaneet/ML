(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    924102,      17257]
NotebookOptionsPosition[    856865,      15917]
NotebookOutlinePosition[    913695,      17079]
CellTagsIndexPosition[    913614,      17074]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["", "SlideShowNavigationBar", "FirstSlide",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"5eff326f-51d4-4f6d-8327-0361233df0b4"],

Cell["Classify and Predict for Thermodynamics (*Title*)", "Title",
 CellChangeTimes->{{3.448190122176695*^9, 3.44819012385317*^9}, {
   3.485609127497636*^9, 3.485609133015955*^9}, {3.514308355088097*^9, 
   3.514308374696691*^9}, 3.5146594348020153`*^9, 3.5146601881617107`*^9, 
   3.7257081858163147`*^9, {3.765017907836446*^9, 
   3.7650179148052616`*^9}},ExpressionUUID->"4a349bd0-044f-4b71-9e5d-\
6f85b428ef05"],

Cell["Aneet Dharmavaram Narendranath, PhD, ??? (*Subtitle*)", "Subtitle",
 CellChangeTimes->{{3.485609136120798*^9, 3.4856091511532907`*^9}, {
   3.4856091945334663`*^9, 3.485609199379443*^9}, {3.4951031489375*^9, 
   3.49510314984375*^9}, {3.495106455296875*^9, 3.495106455453125*^9}, {
   3.5143083846926413`*^9, 3.514308395249558*^9}, 3.5443793532699003`*^9, 
   3.621626517580729*^9, {3.621626691998458*^9, 3.6216267186543407`*^9}, {
   3.621695156698331*^9, 3.621695160632772*^9}, {3.622213306499199*^9, 
   3.622213328771823*^9}, {3.7650095593517103`*^9, 
   3.765009573821918*^9}},ExpressionUUID->"8bf38818-9136-4d63-b800-\
a95800ba3bba"],

Cell[TextData[{
 Cell[BoxData[
  GraphicsBox[{InsetBox[
     GraphicsBox[{},
      ContentSelectable->True,
      ImageSize->{480, 360},
      PlotRange->{{0, 480/360}, {0, 1}}], Scaled[{0, 0}], Center, 
     Scaled[{0.5, 0.5}]], InsetBox[
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1: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
GjU=
        "], {{0, 68}, {65, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
       Selectable->False],
      BaseStyle->"ImageGraphics",
      ImageSizeRaw->{65, 68},
      PlotRange->{{0, 65}, {0, 68}}], 
     Scaled[{0.49333580155497714, 0.5717682253254397}], 
     Center, {1.1979558513699555, 0.9210339753942228}, {{1., 0.}, {0., 1.}}]},
   
   AspectRatio->1.0295620437956206`,
   ContentSelectable->True,
   ImageMargins->0.,
   ImagePadding->{{0., 0.}, {0., 0.}},
   ImageSize->{74., 77.5},
   PlotRange->{{0., 1.3333333333333335`}, {0., 1.}},
   PlotRangePadding->Automatic]],ExpressionUUID->
  "eb1d1c99-f9b1-47d6-84cd-363f1135648c"],
 StyleBox[" ",
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255]],
 StyleBox["Join the Conversation ",
  FontColor->RGBColor[
   0.9019607843137255, 0.9019607843137255, 0.9019607843137255]],
 "#WolframTechConf"
}], "Text",
 CellFrame->{{0, 0}, {0, 1}},
 ShowCellBracket->Automatic,
 CellMargins->{{80, 80}, {100, 165}},
 CellFrameMargins->{{0, 0}, {0, 50}},
 CellFrameColor->RGBColor[0.886275, 0.364706, 0.427451],
 CellChangeTimes->{{3.6216253798451433`*^9, 3.621625396205482*^9}, 
   3.6216255185076437`*^9, {3.621625573653562*^9, 3.6216256020928392`*^9}, {
   3.621625635821653*^9, 3.621625645324601*^9}, {3.621625678952072*^9, 
   3.62162572395792*^9}, {3.621625867660451*^9, 3.62162588677988*^9}, {
   3.621625982321312*^9, 3.621625984476396*^9}},
 TextAlignment->Center,
 FontFamily->"Arial",
 FontSize->24,
 FontColor->GrayLevel[
  1],ExpressionUUID->"e5654c3b-261a-4278-9d0c-d50835b563a4"]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"3922b593-907c-45c1-b8b6-90c3373155fd"],

Cell[CellGroupData[{

Cell["ABSTRACT", "Section",
 CellChangeTimes->{{3.7257199329223537`*^9, 3.725720005948655*^9}, {
  3.72572008110417*^9, 3.725720088583918*^9}, {3.7650095834286957`*^9, 
  3.765009590889599*^9}, {3.765009935063683*^9, 3.765009939025579*^9}},
 TextAlignment->Left,ExpressionUUID->"f29c9c36-3588-423d-85b2-02bd9ce04aa0"],

Cell[TextData[{
 StyleBox["I utilize the ",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox["Classify",
  FontWeight->"Bold",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[" and ",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox["Predict",
  FontWeight->"Bold",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[" functions to create a prediction model for thermodynamic property \
(specific enthalpy) of water.  The objective is to create a classifier and a \
complementary prediction object to evaluate the power output of a steam \
turbine, given the inlet and outlet (-to the turbine) steam states, as \
(Pressure, Temperature) data.",
  FontColor->RGBColor[0, 0, 1]],
 "\n\nSpecific enthalpies (h, kJ/kg) of steam as a function of pressure (P, \
bar) and temperature (T, Celsius) are imported.  In addition to the specific \
enthalpy, regions of water\[CloseCurlyQuote]s P-T phase diagram are also \
imported.  These regions are per the industrial standard IAPWS IF-97.  \
Mathematica\[CloseCurlyQuote]s Classify is used to check which numerical \
algorithm best (accuracy and speed) classifies the (P,T) tuples into regions. \
 This algorithm is then used to create a Prediction object for (P,T) \
\[RightArrow] h which is then used to evaluate the power produced by a steam \
turbine, which is a fundamental building block in thermodynamics."
}], "Text",
 CellChangeTimes->{{3.725720132418301*^9, 3.7257201347705364`*^9}, {
  3.7650096001727877`*^9, 3.76500964895767*^9}, {3.765009702779311*^9, 
  3.765009962656011*^9}, {3.765010029570704*^9, 3.765010059467409*^9}, {
  3.7650179332586274`*^9, 
  3.7650179834309883`*^9}},ExpressionUUID->"813e3938-12dd-4af2-a679-\
9c2667c326cc"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"3d417ef7-2274-476e-a156-7231bf56c84e"],

Cell[CellGroupData[{

Cell["\[OpenCurlyQuote]Hello World\[CloseCurlyQuote] of Classification: Iris \
Dataset", "Section",
 CellChangeTimes->{
  3.483202458955147*^9, {3.514308340990994*^9, 3.514308352103572*^9}, {
   3.765009669062294*^9, 3.765009686063587*^9}, {3.7650100904157124`*^9, 
   3.765010101121108*^9}},ExpressionUUID->"d519da9a-07b8-4600-b208-\
ff11b9f334ce"],

Cell["\<\
The Fisher Iris dataset is imported from one of the many online repositories.\
\
\>", "Text",
 CellChangeTimes->{{3.495209008234375*^9, 3.49520915653125*^9}, 
   3.495209919765625*^9, 3.4952106014375*^9, {3.4952106824375*^9, 
   3.495210832234375*^9}, 3.514307848543872*^9, {3.514308058576482*^9, 
   3.514308065607885*^9}, {3.51430841745117*^9, 3.514308419642997*^9}, {
   3.5149152616687326`*^9, 3.514915280523456*^9}, {3.514915328702818*^9, 
   3.5149153375415287`*^9}, 3.514915444638068*^9, {3.765010104055437*^9, 
   3.765010118852201*^9}, 
   3.765010305688532*^9},ExpressionUUID->"d1b120a4-0039-4aee-b1d8-\
345c184f2ff5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "url", "=", 
   "\"\<https://raw.githubusercontent.com/jbrownlee/Datasets/master/iris.csv\>\
\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{"dataset", "=", 
   RowBox[{"Import", "[", "url", "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{
  3.483202458976812*^9, {3.4951937068125*^9, 3.495193735734375*^9}, {
   3.495195085203125*^9, 3.495195086125*^9}, {3.514309192473827*^9, 
   3.514309197918544*^9}, 3.765010132937668*^9, {3.765010206476132*^9, 
   3.765010207969571*^9}},
 FontSize->14,
 CellLabel->"In[1]:=",ExpressionUUID->"3448cd5e-b397-4de5-9565-80bd96df13cf"],

Cell[CellGroupData[{

Cell["\<\
Probing the dataset to visually ascertain dimensions and identify features\
\>", "Subsection",
 CellChangeTimes->{
  3.483202458956058*^9, {3.514309203943825*^9, 3.514309209861143*^9}, {
   3.7650102127971354`*^9, 
   3.765010256510298*^9}},ExpressionUUID->"d9b037c9-200b-4bd8-b71c-\
46ddd47420dd"],

Cell["\<\
\[OpenCurlyDoubleQuote]The dataset contains a set of 150 records under five \
attributes - petal length, petal width, sepal length, sepal width and \
species.\[CloseCurlyDoubleQuote]\
\>", "Text",
 CellChangeTimes->{{3.765010309071382*^9, 
  3.7650103213458357`*^9}},ExpressionUUID->"730141f6-a811-44de-99ef-\
a1a2f1c98d68"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"names", "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"'", "sepal"}], "-", 
       RowBox[{"length", "'"}]}], ",", 
      RowBox[{
       RowBox[{"'", "sepal"}], "-", 
       RowBox[{"width", "'"}]}], ",", 
      RowBox[{
       RowBox[{"'", "petal"}], "-", 
       RowBox[{"length", "'"}]}], ",", 
      RowBox[{
       RowBox[{"'", "petal"}], "-", 
       RowBox[{"width", "'"}]}], ",", 
      RowBox[{"'", 
       RowBox[{"class", "'"}]}]}], "}"}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Dimensions", "[", "dataset", "]"}], "\[IndentingNewLine]", 
   RowBox[{"dataset", "[", 
    RowBox[{"[", 
     RowBox[{"1", ";;", "5"}], "]"}], "]"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dataset", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", "5"}], "]"}], "]"}], "//", 
    "Tally"}]}]}]], "InputOnly",
 CellChangeTimes->{
  3.483202458976812*^9, {3.4951937068125*^9, 3.495193735734375*^9}, {
   3.495195085203125*^9, 3.495195086125*^9}, {3.514308110270358*^9, 
   3.51430813033293*^9}, 3.765010224673917*^9},
 FontSize->14,
 CellLabel->"In[8]:=",ExpressionUUID->"ef6d3d59-e728-4112-a616-b48534a3eaa0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"150", ",", "5"}], "}"}]], "Output",
 CellChangeTimes->{3.765018082619403*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"843a4463-f78f-444b-b75e-190126bb9c78"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "5.1`", ",", "3.5`", ",", "1.4`", ",", "0.2`", 
     ",", "\<\"Iris-setosa\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "4.9`", ",", "3.`", ",", "1.4`", ",", "0.2`", 
     ",", "\<\"Iris-setosa\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "4.7`", ",", "3.2`", ",", "1.3`", ",", "0.2`", 
     ",", "\<\"Iris-setosa\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "4.6`", ",", "3.1`", ",", "1.5`", ",", "0.2`", 
     ",", "\<\"Iris-setosa\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "5.`", ",", "3.6`", ",", "1.4`", ",", "0.2`", 
     ",", "\<\"Iris-setosa\"\>"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.765018082635024*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"6b911ac9-00f2-45d4-b9fd-5c36ca87deb1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"Iris-setosa\"\>", ",", "50"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Iris-versicolor\"\>", ",", "50"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Iris-virginica\"\>", ",", "50"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.765018082635024*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"497dde98-5772-4f82-b0c0-4f8ff9bf2ce2"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"0decc16d-f8cc-43ea-8366-05f88784fd4a"],

Cell[CellGroupData[{

Cell["Data distribution into bins and Clustering", "Section",
 CellChangeTimes->{
  3.483202458955147*^9, {3.51430857274755*^9, 3.514308578875259*^9}, {
   3.765010357074759*^9, 3.765010367783024*^9}, {3.765010423809722*^9, 
   3.765010427066586*^9}},ExpressionUUID->"f8ec5160-8d2b-453f-b4c6-\
c94edee702be"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"sepalLength", "=", 
   RowBox[{"dataset", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "1"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"petalLength", "=", 
   RowBox[{"dataset", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "3"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"petalWidth", "=", 
   RowBox[{"dataset", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "4"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sepalWidth", "=", 
   RowBox[{"dataset", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "2"}], "]"}], "]"}]}], ";", 
  RowBox[{"class", "=", 
   RowBox[{
    RowBox[{"dataset", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", "5"}], "]"}], "]"}], "/.", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<Iris-setosa\>\"", "\[Rule]", "\"\<setosa\>\""}], ",", " ", 
      
      RowBox[{"\"\<Iris-versicolor\>\"", "\[Rule]", "\"\<versicolor\>\""}], 
      ",", " ", 
      RowBox[{"\"\<Iris-virginica\>\"", "\[Rule]", "\"\<virginica\>\""}]}], 
     "}"}]}]}], ";"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.763992572321846*^9, 3.7639926682288*^9}, {
  3.763992741461824*^9, 3.763992937695015*^9}, {3.763993939182761*^9, 
  3.763993940038288*^9}, {3.763994003255328*^9, 3.763994003850746*^9}, {
  3.763994092087641*^9, 3.763994132162019*^9}, {3.763994169385898*^9, 
  3.7639942350498857`*^9}, {3.764674067044373*^9, 3.7646740837258387`*^9}, {
  3.7650113111875687`*^9, 3.765011377883419*^9}, {3.7650180959320793`*^9, 
  3.7650180975570498`*^9}},
 FontSize->14,
 CellLabel->"In[16]:=",ExpressionUUID->"2aa2bf2c-0847-4ea9-a758-5f50236dcf52"],

Cell[CellGroupData[{

Cell["\<\
Three dimensional/quantitative subsets of data are explored to reveal \
positive correlation between petal length and petal width\
\>", "Subsubsection",
 CellChangeTimes->{{3.765010717664686*^9, 
  3.765010758535294*^9}},ExpressionUUID->"34e2e610-f47c-4af7-b4a2-\
760cd012b7ca"],

Cell["\<\
(....as is the well-known case with the Iris dataset)

Clustering method choice is left to the solver.  Further granularity in \
clustering is possible through choice of specific method such as \
\[OpenCurlyDoubleQuote]Spectral\[CloseCurlyDoubleQuote] or \
\[OpenCurlyDoubleQuote]JarvisPatrick\[CloseCurlyDoubleQuote]\
\>", "Text",
 CellChangeTimes->{{3.765010953557932*^9, 3.76501099172534*^9}, {
  3.7650117195609493`*^9, 
  3.7650117566485643`*^9}},ExpressionUUID->"16c2c9fc-59b8-441d-b939-\
ce7c482aa07e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"subset1", "=", 
   RowBox[{"Thread", "[", 
    RowBox[{"{", 
     RowBox[{"sepalWidth", ",", "petalWidth"}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"c1", "=", 
    RowBox[{"FindClusters", "[", 
     RowBox[{"subset1", ",", 
      RowBox[{"Method", "\[Rule]", "\"\<NeighborhoodContraction\>\""}]}], 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"subset2", "=", 
   RowBox[{"Thread", "[", 
    RowBox[{"{", 
     RowBox[{"sepalLength", ",", "sepalWidth"}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"c2", "=", 
    RowBox[{"FindClusters", "[", "subset2", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"subset3", "=", 
   RowBox[{"Thread", "[", 
    RowBox[{"{", 
     RowBox[{"petalLength", ",", "petalWidth"}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"c3", "=", 
    RowBox[{"FindClusters", "[", 
     RowBox[{"subset3", ",", 
      RowBox[{"Method", "\[Rule]", "\"\<NeighborhoodContraction\>\""}]}], 
     "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{"Versus", " ", "automatic", " ", "Method"}], "*)"}]}]}], "Input",
 CellChangeTimes->{{3.763992572321846*^9, 3.7639926682288*^9}, {
  3.763992741461824*^9, 3.763992937695015*^9}, {3.763993939182761*^9, 
  3.763993940038288*^9}, {3.763994003255328*^9, 3.763994003850746*^9}, {
  3.763994092087641*^9, 3.763994132162019*^9}, {3.763994169385898*^9, 
  3.7639942350498857`*^9}, {3.764674067044373*^9, 3.7646740837258387`*^9}, {
  3.7650104309518833`*^9, 3.765010435558598*^9}, {3.7650104672068357`*^9, 
  3.765010508461948*^9}, {3.765010643844883*^9, 3.7650107151189404`*^9}, {
  3.7650107630416813`*^9, 3.765010765144953*^9}, {3.765010969890861*^9, 
  3.765010970298888*^9}, {3.765011619487093*^9, 3.765011644103395*^9}, {
  3.765011675230359*^9, 3.76501170554393*^9}, {3.765011786117588*^9, 
  3.765011821387457*^9}, {3.765011851762092*^9, 3.765011987906556*^9}, {
  3.765012057352598*^9, 3.7650120959763117`*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"24a49a26-6084-42fa-a17b-7228b521c06a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"fr", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Frame", "\[Rule]", "True"}], ",", " ", 
     RowBox[{"FrameStyle", "\[Rule]", "Black"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ptstyle", "=", 
   RowBox[{"{", 
    RowBox[{"PlotStyle", "\[Rule]", 
     RowBox[{"PointSize", "[", "Large", "]"}]}], "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.765011411744618*^9, 3.7650114313764*^9}, {
  3.765011524190578*^9, 3.765011558002846*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"6d471bb2-b7e1-4763-8ea9-4f0ed23ebc6a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"ListPlot", "[", 
    RowBox[{"c1", ",", "fr", ",", "ptstyle", ",", 
     RowBox[{"FrameLabel", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<Sepal Width\>\"", ",", "\"\<Petal Width\>\""}], "}"}]}]}],
     "]"}], ",", 
   RowBox[{"ListPlot", "[", 
    RowBox[{"c2", ",", "fr", ",", "ptstyle", ",", " ", 
     RowBox[{"FrameLabel", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<Sepal Length\>\"", ",", "\"\<Petal Width\>\""}], 
       "}"}]}]}], "]"}], ",", 
   RowBox[{"ListPlot", "[", 
    RowBox[{"c3", ",", "fr", ",", " ", "ptstyle", ",", " ", 
     RowBox[{"FrameLabel", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<Petal Length\>\"", ",", "\"\<Petal Width\>\""}], 
       "}"}]}]}], "]"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.763992671825335*^9, 3.763992673479703*^9}, {
   3.763992850808432*^9, 3.763992855225669*^9}, {3.763992919535843*^9, 
   3.763992921547175*^9}, {3.763994136086574*^9, 3.763994138083211*^9}, {
   3.765010699006218*^9, 3.765010701430187*^9}, 3.765010769540043*^9, {
   3.765011387657236*^9, 3.765011483112822*^9}, {3.765011537184504*^9, 
   3.765011552128476*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"fb578692-52a5-4fc6-bd7f-f372a11d79f9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[{{}, {{}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[Large], 
       AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxTTMoPSmViYGAwBGIQDQE8DrNmgsBJewifA86H0Jxw/tkzIMCBxkfoNwYD
fij/JpTP7QChL8P5qOrZcZi/E2o/L5p6bhzu3YmDL4DmH0E09yHcCwsPmHvT
wIAPJx/dPajuvYkRPhD9XA4Qex4Q8A+6fxHuwxUehOIL3TyIewTg4QVRL0Ag
PjjR3MuDUz1+/5zECG9c5kPkH8PDHzU8ODDiB1d4oKcnWHzA+AAcaUSM
        "]]}, 
      {RGBColor[0.880722, 0.611041, 0.142051], PointSize[Large], 
       AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxTTMoPSmViYGBQBGIQnQYGTA7GYHDZHsY/ewYEvkD5bHA+RB2zAwMYfLCf
NRMEWB0g6r7ZQ8QZ0OQZMdRjl/8B1c/iABH/iGE/TB6mHiYPcddnOB/mHog+
Frh9MPfDzMflH5h5MD6E/okRPjD3wPgw+2D60fkw/ej2oZtHyP8Q836j2f8H
LXwYHNDDF+Ye1PiC8f/ZAwCwsb9m
        "]]}, 
      {RGBColor[0.560181, 0.691569, 0.194885], PointSize[Large], 
       AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJyNU1sKwkAMjLW+qngHz+ABdj88gUcQ9Nfz6Jn0NIooFtE2nZRMW2qgLGlm
NpPHrnbH7T4Rkc3vK87zqbBZPJT2CPCltGe4Xgqbmq+4MflZVN4rrEubROXd
g+JqPuLIx3jkQ5z50Ke4vDMf8xX3Njzua9c3t3q4fuD/y3dr6GMf/VNeWuUd
Vfd9KJ9Ez88trrxB7MPruaB8mLf05sf89d5h9PuTUP68qm9p+vR/anjm+/2S
hg99/v7M9PF+gM/9ao+L6cf8EUc/UA/rQ338Pvx+JBH7hf5hv7r0+bgYnvm+
n/X82vtb7xvr8+9BTG/XfL8xaoeS
        "]]}, {}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{1.9625, 0},
    DisplayFunction->Identity,
    Frame->{{True, True}, {True, True}},
    FrameLabel->{{
       FormBox["\"Petal Width\"", TraditionalForm], None}, {
       FormBox["\"Sepal Width\"", TraditionalForm], None}},
    FrameStyle->GrayLevel[0],
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{2., 4.4}, {0, 2.5}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", 
   GraphicsBox[{{}, {{}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[Large], 
       AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxtUtsNwjAQi/ihpQHSB4VfZugCmYERkOCXeWAmuhO0d74obk+qKt/DcXy5
3l+3x8Y5N/y/6f+co4tuDh8/7ylaxUUcv1M0mi+j9DeaL7SvU4z5UxzmOFq/
4Mr6gaW/Vry188EPPvnvta+1eWDoFVwTPisOytvbuet6kx/ol/zB6sD5fGV1
6M398jS/W9wH/kA/+yU8rI/raV/gZz+ZT/QE5e01Hxb7gB7wo5/fT35e2gfu
v35fT3spF3X2n/fPdfif+5HeE/ixD/iT+38xvT8Ic/7N
        "]]}, 
      {RGBColor[0.880722, 0.611041, 0.142051], PointSize[Large], 
       AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJyFVFtOwzAQDGkD5SE+IHJSNw3iDFwgZ+AIIPjtecqZ6J1K6pm1dhwJS5G1
9np3Z3ayrx+H96+6qqrPv2/e03qavi+rnpI9TD/Hed1i34q9m06/89rAP8j7
CPsafsHst8vawr5DvGecr3AeYd/gfQu/BvFb7BXOO9isp8f5FeL1Fi/ZQeJH
w8N7xkt+neVPfhqf/murh3wxv+Knv96Tb19vlHp2wm8s8Ht8Afva+kW+1Va8
ns+m4Mv3sy74Y3zipc16iF/59vW2RXxfT85H2+PX/rdWz3/6VD7S+SD15n5R
/7xP/qPZ1Dvzp3f7Qo++vgH7g8Vf/j8b04fy4fN1hd4YT+tP70f4P5rt+5P/
B84Hr/8geh0LvlVf5J/4GY/95HvVD/H4fIPc7wX/i+HT914POR/xE8+yHu4t
np+XWm+ep/p/6b3qkf32/Ch/Oj/y/Fnudy/15/l6BuncDDc=
        
        "]]}, {}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{4.2437499999999995`, 0},
    DisplayFunction->Identity,
    Frame->{{True, True}, {True, True}},
    FrameLabel->{{
       FormBox["\"Petal Width\"", TraditionalForm], None}, {
       FormBox["\"Sepal Length\"", TraditionalForm], None}},
    FrameStyle->GrayLevel[0],
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{4.3, 7.9}, {0, 4.4}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", 
   GraphicsBox[{{}, {{}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[Large], 
       AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxTTMoPSmViYGAwAmIQnQYG3+xnzQSBk/bo/LNnQOALnM8ABj9wqjcGg99Q
/k24PET8MkH9qPI7MdRD6J849O+E0h/hfIi9n3GYfxPNf5juhfkH3f3o8rjM
h/A/YIQPRPwB1L5/OP2Hyr9JMPzw68flPkR4E4oP9PDEnz52Ekw/MHlYeOLi
o/sHIv8YLfww4w9/eiGcngEXQnYw
        "]]}, 
      {RGBColor[0.880722, 0.611041, 0.142051], PointSize[Large], 
       AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJx1UkEKAjEMLJ5EVm27xbtv8OKt+wafIOjV9+ib9C+KIooedHeahKa7AQk1
k9nJJMvtYbMbGWPW/1+bL+c2fLPv4hlNF75BfsXTsY2a38i2Qd8jos+ruuc6
8YPnnfCThL9yP+FXXcyVnorxwNlCT16XefCumB863OC8+F/4dJ30geeW3nXi
/xb+aP9IH/ruqd8N6iP+XG9I/Z9Cn/YLfTPWizzlOs1DeoAPvK9+ftknzZPf
i1P3IX70++PU9/U9WlWX+6F7yO9N8Lqu/QbPmP3p1+uV30Hdg+yf/MvvaVHs
k/A/csFFEw==
        "]]}, 
      {RGBColor[0.560181, 0.691569, 0.194885], PointSize[Large], 
       AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJx1UsENAiEQRLQDD447X/79WQDUYAkm+rUerUkLMrkY5YbZC0vchGyWmYFl
lv35drpYY8zht3JGhIS8Sdc5upI/8XHP0afXM4cp+77UUzzO0SfwVgUfhQ98
aPiswW/vL40VvZN+sO3lfNQLn3ro1kpvU62fIvIo/SPvhA/cSw18K/dRz5p4
fb7uNwiu+bW/fD/9fYtf9XwG9X6v5hGkf+L0R/sBnWvmTX79P+zf/6L943xR
d2oei5547adr7mO/X85BED0=
        "]]}, {}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0, 0},
    DisplayFunction->Identity,
    Frame->{{True, True}, {True, True}},
    FrameLabel->{{
       FormBox["\"Petal Width\"", TraditionalForm], None}, {
       FormBox["\"Petal Length\"", TraditionalForm], None}},
    FrameStyle->GrayLevel[0],
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0, 6.9}, {0, 2.5}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.765010573645624*^9, 3.765010663317943*^9, 3.765010701920767*^9, 
   3.765010769991227*^9, 3.765011353310265*^9, {3.765011384189645*^9, 
   3.765011394485097*^9}, 3.7650114377753077`*^9, 3.765011483525131*^9, {
   3.765011542567381*^9, 3.7650115593340178`*^9}, {3.765011631135111*^9, 
   3.765011648104088*^9}, {3.765011679783483*^9, 3.765011708696595*^9}, {
   3.765011793086238*^9, 3.765011824179044*^9}, {3.7650118565339317`*^9, 
   3.765011884306432*^9}, {3.765011914407498*^9, 3.765011989801589*^9}, {
   3.7650120666517973`*^9, 3.765012098211813*^9}, 3.7650181169790974`*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"b621c197-240b-46a7-a997-779239f07fec"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Petal Length and Width show a clean stratification of species class\
\>", "Subsubsection",
 CellChangeTimes->{{3.765010835673459*^9, 
  3.765010872655776*^9}},ExpressionUUID->"db3b0ad7-575d-4506-95a4-\
32b4116593fb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"subset4", "=", 
   RowBox[{"Thread", "[", 
    RowBox[{"{", 
     RowBox[{"petalLength", ",", 
      RowBox[{"class", "/.", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<setosa\>\"", "\[Rule]", "1"}], ",", " ", 
         RowBox[{"\"\<versicolor\>\"", "\[Rule]", "2"}], ",", " ", 
         RowBox[{"\"\<virginica\>\"", "\[Rule]", "3"}]}], "}"}]}]}], "}"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"c4", "=", 
    RowBox[{"FindClusters", "[", "subset4", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"subset5", "=", 
   RowBox[{"Thread", "[", 
    RowBox[{"{", 
     RowBox[{"petalWidth", ",", 
      RowBox[{"class", "/.", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<setosa\>\"", "\[Rule]", "1"}], ",", " ", 
         RowBox[{"\"\<versicolor\>\"", "\[Rule]", "2"}], ",", " ", 
         RowBox[{"\"\<virginica\>\"", "\[Rule]", "3"}]}], "}"}]}]}], "}"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"c5", "=", 
   RowBox[{"FindClusters", "[", "subset5", "]"}]}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.7650107788288918`*^9, 3.765010780170226*^9}, {
  3.7650108934887953`*^9, 3.765010906300581*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"ad6ecc53-2d7d-41b2-b54b-2a6b8c0da39a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"ListPlot", "[", 
    RowBox[{"c4", ",", "fr", ",", "ptstyle", ",", 
     RowBox[{"FrameLabel", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<Petal Length\>\"", ",", "\"\<Species\>\""}], "}"}]}]}], 
    "]"}], ",", 
   RowBox[{"ListPlot", "[", 
    RowBox[{"c5", ",", "fr", ",", "ptstyle", ",", 
     RowBox[{"FrameLabel", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<Petal Width\>\"", ",", "\"\<Species\>\""}], "}"}]}]}], 
    "]"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.765010793700253*^9, 3.765010796750842*^9}, {
  3.7650115758497753`*^9, 3.765011600424776*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"bac8c47b-484d-4bdf-a0f0-f99dbc864fd6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[{{}, {{}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[Large], 
       AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxTTMoPSmViYGAwAmIQnQYG3+wZwOCDPTr/7BkQ+ALnQ+gfONUbg8FvnPKE
9KPLo/NnzQSBnzj1Q+Q/ornnM07z0P1HyD/o+gnJo9PYw+cfTv+h8wmFH6n6
CZmH3b+fcYYfofAlJE+Ijz3+/xEdHqSmRwAXHOB5
        "]]}, 
      {RGBColor[0.880722, 0.611041, 0.142051], PointSize[Large], 
       AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxTTMoPSmViYGAwAmIQffYMCAg5MEAAlEbwZ80EAWE0eQE4Pw0McOtHNx+i
ngunfmMw4EczjwfNPAE0eQE0eXT7Efoh/hHE6V6Ie9DNx+0+CB93+KCHH7r7
IPoF0dQLosmjmy+C030QCuFfiH/40MznxekfiHpC5uOOX3T3Yw9P9PBBV49u
H3p6Q6Qf9PRAiI8e3hCKA6d7AWvyh1E=
        "]]}, 
      {RGBColor[0.560181, 0.691569, 0.194885], PointSize[Large], 
       AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxTTMoPSmViYGAwAmIQDQESDhCawyENDETg/FkzQUAcTV4MzjcGA3R5KTgf
QguhqZckoB+3eyDqRdHMF0Pji5Ct/+wZEEC4H+J/aZzmQ9SLoakXJmAeujy6
+xH+h7hXGKd+4uJDAk2/JE796OGFXR49ftDdj+4edPeL4tSP3X7c6RE9/CB8
hHoIjR5f6OahuwchDwD5eZS1
        "]]}, {}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0, 0},
    DisplayFunction->Identity,
    Frame->{{True, True}, {True, True}},
    FrameLabel->{{
       FormBox["\"Species\"", TraditionalForm], None}, {
       FormBox["\"Petal Length\"", TraditionalForm], None}},
    FrameStyle->GrayLevel[0],
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0, 6.9}, {0, 3.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", 
   GraphicsBox[{{}, {{}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[Large], 
       AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxTTMoPSmViYGAwAmIQPWsmCJy0ZwCDD/bU4d+E843B4DKJ+ndSqJ6Q/ptE
u5cQnzjzEfIQ+gHZ4Unt+CEuvCiND9zqSQ1fiPxjKqc33HwAmWAN8w==
        "]]}, 
      {RGBColor[0.880722, 0.611041, 0.142051], PointSize[Large], 
       AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxTTMoPSmViYGAwAmIQnQYG3+wZIMABQv3AyT97BgS+EC0/ayYI/ERT/wGn
euzu+UDAfR9w6ifOfNzmoctD/PMRzfw/RIePMRh8Jtp96HyI/t9Eux/dvejy
6O7BHl/o/sctj+4fQnx0+7H79zNO9xMyj5D92OMTIQ8Akba68A==
        "]]}, 
      {RGBColor[0.560181, 0.691569, 0.194885], PointSize[Large], 
       AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxTTMoPSmViYGAwAmIQDQEsDhCawyENDP7Zw/hnz4AAgwMq/w9cftZMEGB0
wKXeGAx+2+PSj85Hdw/UgUS7D109xH5mNP1MRPsHXT2E/mGPXx63e7D7n5A8
IT5CP8T9P9Hc9w8tfNHVI/yL3X/fcPoXPXxJdS+h+EF3P/bwRk+/uPWj+59Q
egAASEK3HA==
        "]]}, {}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0, 0},
    DisplayFunction->Identity,
    Frame->{{True, True}, {True, True}},
    FrameLabel->{{
       FormBox["\"Species\"", TraditionalForm], None}, {
       FormBox["\"Petal Width\"", TraditionalForm], None}},
    FrameStyle->GrayLevel[0],
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0, 2.5}, {0, 3.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}]}], "}"}]], "Output",
 CellChangeTimes->{3.765010797140625*^9, 3.76501089783361*^9, 
  3.765011600817274*^9, 3.765012103865896*^9, 3.765018126588578*^9},
 CellLabel->"Out[33]=",ExpressionUUID->"af734e15-7517-4ee6-aa9c-6cb5e5a79e73"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"ed1a7de1-709b-4935-a8e3-4291edc2f33f"],

Cell[CellGroupData[{

Cell["Classification, Validation and Confusion", "Section",
 CellChangeTimes->{
  3.483202458955147*^9, {3.514308863196991*^9, 3.5143088633311243`*^9}, {
   3.765012165834139*^9, 
   3.765012170683547*^9}},ExpressionUUID->"3d6bafa6-652e-40e8-a027-\
01dc2e92fe2e"],

Cell["\<\
For a certain size of training and validation data, the best (minimum speed \
and accuracy > 93) is  chosen\
\>", "Text",
 CellChangeTimes->{{3.765012623854513*^9, 3.765012645734892*^9}, {
  3.765012810225412*^9, 
  3.765012840827199*^9}},ExpressionUUID->"a4cde4f2-294d-422f-99c9-\
e0ed6c39968a"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"geomdata", "=", 
   RowBox[{"Thread", "[", 
    RowBox[{"{", 
     RowBox[{
     "sepalLength", ",", "sepalWidth", ",", "petalLength", ",", 
      "petalWidth"}], "}"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"mldata", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"Thread", "[", 
     RowBox[{"geomdata", "\[Rule]", "class"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"s", "=", 
  RowBox[{
   RowBox[{"Dimensions", "[", "mldata", "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"training", "=", 
   RowBox[{"mldata", "[", 
    RowBox[{"[", 
     RowBox[{"1", ";;", 
      RowBox[{"Ceiling", "[", 
       RowBox[{"0.8", "*", "s"}], "]"}]}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"validation", "=", 
   RowBox[{"mldata", "[", 
    RowBox[{"[", 
     RowBox[{
      RowBox[{"Ceiling", "[", 
       RowBox[{"0.8", "*", "s"}], "]"}], ";;"}], "]"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.7646741712635927`*^9, 3.7646741883626223`*^9}, {
  3.764674265653249*^9, 3.7646742673218803`*^9}, {3.765009361834015*^9, 
  3.765009373416419*^9}, {3.7650123063511753`*^9, 3.765012308146289*^9}, {
  3.765012599235135*^9, 3.765012602024745*^9}, {3.765012720376442*^9, 
  3.765012722123229*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"36d428a6-164c-4839-a48d-58267bd3ee98"],

Cell[BoxData["150"], "Output",
 CellChangeTimes->{3.7650121965947247`*^9, 3.765012308511973*^9, 
  3.7650126029605713`*^9, 3.76501272254744*^9, 3.7650181303073645`*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"beceb094-aacc-4e78-85f5-6e1ed8934994"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Classification", "Subsubsection",
 CellChangeTimes->{{3.76501220412246*^9, 
  3.7650122115278873`*^9}},ExpressionUUID->"d3ab5173-0078-4b7c-a27f-\
4a0fd6c0d046"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ciris", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"training", ",", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Speed\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.76467412141471*^9, 3.764674122952112*^9}, {
   3.7646741684524*^9, 3.764674250104493*^9}, 3.7646754698011503`*^9, {
   3.7650122130032063`*^9, 3.765012213927783*^9}, {3.7650122949577103`*^9, 
   3.765012316218944*^9}, {3.76501270208611*^9, 3.7650127092748528`*^9}, {
   3.765012740910952*^9, 3.765012802140361*^9}, {3.7650181461200175`*^9, 
   3.765018168448389*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"cf8f8d76-e279-47fb-9091-efd3e194051a"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"setosa\"", "\"versicolor\"", 
                    "\"virginica\""}, "RowWithSeparators"], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"setosa\"", "\"versicolor\"", 
                    "\"virginica\""}, "RowWithSeparators"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["120", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 120, "ClassNumber" -> 3, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "NumericalVector", "Length" -> 4]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"NumericalVector"}, "FeatureKeys" -> {"f1"},
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                 "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 120, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {5.919166666666667, 3.0466666666666664`, 
                    3.854166666666667, 1.2316666666666667`}, "Method" -> 
                   "Naive", "VectorLength" -> 4, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {5.919166666666667, 3.0466666666666664`, 
                    3.854166666666667, 1.2316666666666667`}, 
                   "StandardDeviation" -> {0.8344954397052572, 
                    0.441575462281233, 1.7511851145882773`, 
                    0.7469921165730079}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 4, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 4]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                   True, "Invertibility" -> "Perfect", "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                "Model" -> 
                Association[
                 "Matrix" -> {{0.5258218898939605, 
                   0.3649306575879717}, {-0.2586236509178906, 
                   0.9285161481961571}, {0.5811713747978308, 
                   0.01919324021351543}, {0.5646813087130153, 
                   0.06568863845056379}}, "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.919166666666667, 3.0466666666666664`, 
                    3.854166666666667, 1.2316666666666667`}, 
                    "StandardDeviation" -> {0.8344954397052572, 
                    0.441575462281233, 1.7511851145882773`, 
                    0.7469921165730079}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 2, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.008755476449307902, "MaxTrainingMemory" -> 
                  65272, "DataMemory" -> 3960, "FunctionMemory" -> 21760, 
                  "LanguageVersion" -> {11.3, 0}, "Date" -> 
                  DateObject[{
                    2019, 4, 23, 10, 22, 50.0889835`9.452317071040763}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 4, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
             "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
             7263179337424669307]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> {5.919166666666667, 3.0466666666666664`, 
              3.854166666666667, 1.2316666666666667`}, 
             "StandardDeviation" -> {0.8344954397052572, 0.441575462281233, 
              1.7511851145882773`, 0.7469921165730079}, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 1519634882283037191]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 3469640861300586857]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[
               "setosa" -> 1, "versicolor" -> 2, "virginica" -> 3]}, 
             "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
             8632914170514506599, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 5976834071906370717]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 3], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[
       "setosa" -> 0.3089430894308943, "versicolor" -> 0.34959349593495936`, 
        "virginica" -> 0.34146341463414637`]], "Prior" -> Automatic, 
    "Utility" -> 
    SparseArray[
     Automatic, {3, 4}, 0., {
      1, {{0, 1, 2, 3}, {{2}, {3}, {4}}}, {1., 1., 1.}}], "Threshold" -> 0, 
    "TieBreaker" -> RandomChoice, "PerformanceGoal" -> "Speed", 
    "BatchProcessing" -> Automatic, "Model" -> 
    Association["LogProbabilitiesFunction" -> LinearLayer[
        Association[
        "Type" -> "Linear", "Arrays" -> 
         Association[
          "Weights" -> 
           RawArray["Real32",{{-6.997928619384766, 
             8.107771873474121, -31.657047271728516`, -19.533668518066406`}, {
             5.8458428382873535`, 
             3.306210517883301, -33.395103454589844`, -11.713467597961426`}}],
            "Biases" -> 
           RawArray["Real32",{13.229002952575684`, 26.322776794433594`}]], 
         "Parameters" -> 
         Association[
          "OutputDimensions" -> {2}, "$OutputSize" -> 2, "$InputSize" -> 4, 
           "$InputDimensions" -> {4}], "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
        Association["Version" -> "11.3.5"]], "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Weight" -> 1, "Type" -> "NumericalVector"], 
         "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Method" -> "LogisticRegression", "Options" -> 
      Association[
       "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 0.001, "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association["Value" -> "LBFGS", "Options" -> Association[]], 
        MaxIterations -> 
        Association["Value" -> 30, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.05055641990440668, 0.1135634848861302], "Accuracy" -> 
         PlusMinus[0.9581040495277977, 0.0421512741689087], "EvaluationTime" -> 
         0.000010136953087226483`, "TestSize" -> 48, "TrainingSize" -> 96, 
         "TrainingTime" -> 0.020285373602632897`, "TrainingMemory" -> 
         81485.33333333333, "ModelMemory" -> 9088., "ExperimentCount" -> 2, 
         "ModelUtility" -> 74.24160633923506, "MeanCrossEntropyHistory" -> {
           PlusMinus[0.04469905560436635, 0.032541481456255926`], 
           PlusMinus[0.2625631172035148, 0.1957766949935338]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.9733520607067219, 0.04716820181901935], 
           PlusMinus[0.933352060706722, 0.06009630485396967]}, 
         "Configuration" -> {
          "LogisticRegression", "L1Regularization" -> 0, "L2Regularization" -> 
           0.001, "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
         "FinalTrainingSize" -> 120], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 33625466440957]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0984502095828674`, 0.005768958213820291], 
              "Accuracy" -> 
              PlusMinus[0.8252479516803816, 0.029513244779800253`], 
              "EvaluationTime" -> 6.275860063109683*^-6, "TestSize" -> 210, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.04837826015102603, 
              "TrainingMemory" -> 101149.33333333333`, "ModelMemory" -> 9088.,
               "ExperimentCount" -> 2, "ModelUtility" -> 5.4688564765251675`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0984431833794222`, 0.008158441345541969], 
                PlusMinus[1.0984572361016998`, 0.008158624448436125]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8121773645251362, 0.038721614726118056`], 
                PlusMinus[0.83716187832981, 0.03696863129343982]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0976853332537326`, 0.023054761986924504`], 
              "Accuracy" -> 
              PlusMinus[0.8348941518071921, 0.06026493569574548], 
              "EvaluationTime" -> 0.000014405560676300762`, "TestSize" -> 48, 
              "TrainingSize" -> 96, "TrainingTime" -> 0.030660228307625232`, 
              "TrainingMemory" -> 90373.33333333333, "ModelMemory" -> 9088., 
              "ExperimentCount" -> 2, "ModelUtility" -> 4.546096745350217, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.097645744006885, 0.03260215122820937], 
                PlusMinus[1.0977249329831442`, 0.03260646719209319]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.853352060706722, 0.07746624455609222], 
                PlusMinus[0.8133520607067221, 0.08368838413953156]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000014405560676300762`, "MeanCrossEntropy" -> 
             PlusMinus[1.0976853332537326`, 0.023054761986924504`], 
             "ModelMemory" -> 9088., "TrainingMemory" -> 90373.33333333333, 
             "TrainingTime" -> 0.0851705341201763], "Index" -> 1], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5948547990347142, 0.0327760749178028], "Accuracy" -> 
              PlusMinus[0.8756651863087618, 0.025388451805694826`], 
              "EvaluationTime" -> 0.00007493833078241886, "TestSize" -> 210, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.09347585382526319, 
              "TrainingMemory" -> 95869.33333333333, "ModelMemory" -> 39088., 
              "ExperimentCount" -> 2, "ModelUtility" -> 5.34038608620459, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.5689383216946685, 0.030091973549014054`], 
                PlusMinus[0.6193191698674873, 0.029236791580832703`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8846305973521364, 0.032297774147876976`], 
                PlusMinus[0.8655342756637243, 0.03433299836532293]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.15437186167956699`, 0.08462653611296213], 
              "Accuracy" -> 
              PlusMinus[0.948266248603911, 0.055921288580538124`], 
              "EvaluationTime" -> 0.000050898591790316105`, "TestSize" -> 48, 
              "TrainingSize" -> 96, "TrainingTime" -> 0.004636230528378226, 
              "TrainingMemory" -> 83029.33333333333, "ModelMemory" -> 39088., 
              "ExperimentCount" -> 2, "ModelUtility" -> 20.933804640259282`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.14270423484175923`, 0.030615936777081017`], 
                PlusMinus[0.30136419011542037`, 0.10866848733081037`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9733520607067219, 0.04716820181901935], 
                PlusMinus[0.893352060706722, 0.06978748062054377]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000050898591790316105`, "MeanCrossEntropy" -> 
             PlusMinus[0.15437186167956699`, 0.08462653611296213], 
             "ModelMemory" -> 39088., "TrainingMemory" -> 83029.33333333333, 
             "TrainingTime" -> 0.09903933045931707], "Index" -> 2], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.43542808444026226`, 0.14964512445254313`], 
              "Accuracy" -> 
              PlusMinus[0.9135868391277416, 0.08705174248038162], 
              "EvaluationTime" -> 8.19826080929442*^-6, "TestSize" -> 210, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.005926126130749399, 
              "TrainingMemory" -> 63853.33333333333, "ModelMemory" -> 5616., 
              "ExperimentCount" -> 2, "ModelUtility" -> 12.241909661961918`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.38068777068719917`, 0.03298226562063433], 
                PlusMinus[0.6740056811384617, 0.06885598153324207]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9528442762551912, 0.022367214552115735`], 
                PlusMinus[0.7832153066808385, 0.04076076412524876]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.11444172622409214`, 0.10534865776562292`], 
              "Accuracy" -> PlusMinus[0.9581040495277977, 0.0421512741689087],
               "EvaluationTime" -> 0.000012984011395709237`, "TestSize" -> 48,
               "TrainingSize" -> 96, "TrainingTime" -> 0.005036608497345274, 
              "TrainingMemory" -> 75490.66666666666, "ModelMemory" -> 5616., 
              "ExperimentCount" -> 2, "ModelUtility" -> 37.91258735866601, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.1063530034529613, 0.02924901939711818], 
                PlusMinus[0.30910373573334066`, 0.1434867953833617]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9733520607067219, 0.04716820181901935], 
                PlusMinus[0.933352060706722, 0.06009630485396967]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000012984011395709237`, "MeanCrossEntropy" -> 
             PlusMinus[0.11444172622409214`, 0.10534865776562292`], 
             "ModelMemory" -> 5616., "TrainingMemory" -> 75490.66666666666, 
             "TrainingTime" -> 0.011970056327563726`], "Index" -> 3], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.2939269814685733, 0.051904927652328445`], 
              "Accuracy" -> 
              PlusMinus[0.9092405407497945, 0.02450086806383863], 
              "EvaluationTime" -> 9.869047898492643*^-6, "TestSize" -> 210, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.002727283872161491, 
              "TrainingMemory" -> 62213.33333333333, "ModelMemory" -> 6432., 
              "ExperimentCount" -> 2, "ModelUtility" -> 17.98255507517318, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.27128158165057537`, 0.03172802574763265], 
                PlusMinus[0.3595051037971721, 0.05399238869450159]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9208243998075933, 0.027398374536563956`], 
                PlusMinus[0.89423860880876, 0.0311796877233149]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.15382899701343972`, 0.06971016702396235], 
              "Accuracy" -> PlusMinus[0.940895786658571, 0.07227094383365962],
               "EvaluationTime" -> 0.000017248659237483818`, "TestSize" -> 48,
               "TrainingSize" -> 96, "TrainingTime" -> 0.004327465272936986, 
              "TrainingMemory" -> 200341.3333333333, "ModelMemory" -> 9216., 
              "ExperimentCount" -> 2, "ModelUtility" -> 28.572029848395704`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.12650657408553956`, 0.03266108227508023], 
                PlusMinus[0.25335348749833686`, 0.06233557190526947]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9733520607067219, 0.04716820181901935], 
                PlusMinus[0.853352060706722, 0.07746624455609222]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000017248659237483818`, "MeanCrossEntropy" -> 
             PlusMinus[0.15382899701343972`, 0.06971016702396235], 
             "ModelMemory" -> 9216., "TrainingMemory" -> 200341.3333333333, 
             "TrainingTime" -> 0.007920242199685875], "Index" -> 4], 
         Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.34187593557387347`, 0.08607645170766426], 
              "Accuracy" -> PlusMinus[0.888276103231788, 0.07943659215066516],
               "EvaluationTime" -> 8.401904956136023*^-6, "TestSize" -> 210, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.005782909990413927, 
              "TrainingMemory" -> 54861.33333333333, "ModelMemory" -> 16160., 
              "ExperimentCount" -> 2, "ModelUtility" -> 15.782352239151146`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.39070178946323214`, 0.07323987908378837], 
                PlusMinus[0.2627616238914112, 0.09322882743548251]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7802845433642429, 0.040067166312209364`], 
                PlusMinus[0.9331136113684368, 0.025817516057524765`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.05223317560124297, 0.13677763592162392`], 
              "Accuracy" -> PlusMinus[0.940895786658571, 0.07227094383365962],
               "EvaluationTime" -> 0.000011518904894821032`, "TestSize" -> 48,
               "TrainingSize" -> 96, "TrainingTime" -> 0.00432584969603871, 
              "TrainingMemory" -> 58450.666666666664`, "ModelMemory" -> 
              18896., "ExperimentCount" -> 2, "ModelUtility" -> 
              66.38747930065055, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.044030624619003804`, 0.0325708566260417], 
                PlusMinus[0.3099628169290295, 0.18257314480982548`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9733520607067219, 0.04716820181901935], 
                PlusMinus[0.853352060706722, 0.07746624455609222]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000011518904894821032`, "MeanCrossEntropy" -> 
             PlusMinus[0.05223317560124297, 0.13677763592162392`], 
             "ModelMemory" -> 18896., "TrainingMemory" -> 58450.666666666664`,
              "TrainingTime" -> 0.010973929625660378`], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.05055641990440668, 0.1135634848861302], "Accuracy" -> 
              PlusMinus[0.9581040495277977, 0.0421512741689087], 
              "EvaluationTime" -> 0.000010136953087226483`, "TestSize" -> 48, 
              "TrainingSize" -> 96, "TrainingTime" -> 0.020285373602632897`, 
              "TrainingMemory" -> 81485.33333333333, "ModelMemory" -> 9088., 
              "ExperimentCount" -> 2, "ModelUtility" -> 74.24160633923506, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.04469905560436635, 0.032541481456255926`], 
                PlusMinus[0.2625631172035148, 0.1957766949935338]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9733520607067219, 0.04716820181901935], 
                PlusMinus[0.933352060706722, 0.06009630485396967]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.2176209697906484, 0.08936946032558205], "Accuracy" -> 
              PlusMinus[0.9047085835120791, 0.04286715038459949], 
              "EvaluationTime" -> 5.5282597729267305`*^-6, "TestSize" -> 210, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.018752951397649827`, 
              "TrainingMemory" -> 72472., "ModelMemory" -> 9088., 
              "ExperimentCount" -> 2, "ModelUtility" -> 26.1556785001843, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.17530423282278343`, 0.06332388805228874], 
                PlusMinus[0.3189467952718713, 0.09798769951413312]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9309335178069486, 0.025885427891852227`], 
                PlusMinus[0.8560423161521244, 0.03526242397415023]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 5.5282597729267305`*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.2176209697906484, 0.08936946032558205], 
             "ModelMemory" -> 9088., "TrainingMemory" -> 72472., 
             "TrainingTime" -> 0.04278891527981269], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.29365950314238193`, 0.08431572328740802], 
              "Accuracy" -> 
              PlusMinus[0.9047085835120791, 0.04286715038459949], 
              "EvaluationTime" -> 5.59976149559556*^-6, "TestSize" -> 210, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.01881386815010838, 
              "TrainingMemory" -> 72736., "ModelMemory" -> 9088., 
              "ExperimentCount" -> 2, "ModelUtility" -> 19.788889253746966`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.29207604071634535`, 0.12284622561858807`], 
                PlusMinus[0.2950689593688978, 0.11590007916392916`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9309335178069486, 0.025885427891852227`], 
                PlusMinus[0.8560423161521244, 0.03526242397415023]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.04643987283023225, 0.23355191421907381`], 
              "Accuracy" -> PlusMinus[0.9581040495277977, 0.0421512741689087],
               "EvaluationTime" -> 0.000010580444784792643`, "TestSize" -> 48,
               "TrainingSize" -> 96, "TrainingTime" -> 0.029947188691874037`, 
              "TrainingMemory" -> 81440., "ModelMemory" -> 9088., 
              "ExperimentCount" -> 2, "ModelUtility" -> 57.835767238481814`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.04388834884503517, 0.03257840181046252], 
                PlusMinus[0.5064507721265296, 0.4374354833809844]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9733520607067219, 0.04716820181901935], 
                PlusMinus[0.933352060706722, 0.06009630485396967]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000010580444784792643`, "MeanCrossEntropy" -> 
             PlusMinus[0.04643987283023225, 0.23355191421907381`], 
             "ModelMemory" -> 9088., "TrainingMemory" -> 81440., 
             "TrainingTime" -> 0.054750494580357224`], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0984689612082246`, 0.023084437659221756`], 
              "Accuracy" -> 
              PlusMinus[0.8348941518071921, 0.06026493569574548], 
              "EvaluationTime" -> 0.000010243866264318326`, "TestSize" -> 48, 
              "TrainingSize" -> 96, "TrainingTime" -> 0.006150216149933899, 
              "TrainingMemory" -> 72920., "ModelMemory" -> 9088., 
              "ExperimentCount" -> 2, "ModelUtility" -> 4.919682939133381, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0984649997549814`, 0.0326461105601993], 
                PlusMinus[1.0984729227652328`, 0.03264653811742901]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.853352060706722, 0.07746624455609222], 
                PlusMinus[0.8133520607067221, 0.08368838413953156]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.098582779570576, 0.005770183530285556], "Accuracy" -> 
              PlusMinus[0.8252479516803816, 0.029513244779800253`], 
              "EvaluationTime" -> 5.473049582005229*^-6, "TestSize" -> 210, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.006047009296314574, 
              "TrainingMemory" -> 63568., "ModelMemory" -> 9088., 
              "ExperimentCount" -> 2, "ModelUtility" -> 5.611276944703274, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0985820765939753`, 0.008160262510146697], 
                PlusMinus[1.098583482550359, 0.008160280980589943]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8121773645251362, 0.038721614726118056`], 
                PlusMinus[0.83716187832981, 0.03696863129343982]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 5.473049582005229*^-6, "MeanCrossEntropy" -> 
             PlusMinus[1.098582779570576, 0.005770183530285556], 
             "ModelMemory" -> 9088., "TrainingMemory" -> 63568., 
             "TrainingTime" -> 0.013406627305511388`], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0899502883606698`, 0.02277902143184966], "Accuracy" -> 
              PlusMinus[0.8605390115051886, 0.06687808406688614], 
              "EvaluationTime" -> 0.000010398296409006543`, "TestSize" -> 48, 
              "TrainingSize" -> 96, "TrainingTime" -> 0.011005214797125832`, 
              "TrainingMemory" -> 91178.66666666666, "ModelMemory" -> 9088., 
              "ExperimentCount" -> 2, "ModelUtility" -> 4.941583543582859, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.089556968078784, 0.03218604354211813], 
                PlusMinus[1.0903447614461768`, 0.03223317693614948]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.893352060706722, 0.06978748062054377], 
                PlusMinus[0.8133520607067221, 0.08368838413953156]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0971274953731238`, 0.00575752690796206], "Accuracy" -> 
              PlusMinus[0.8252479516803816, 0.029513244779800253`], 
              "EvaluationTime" -> 5.486625858461335*^-6, "TestSize" -> 210, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.006660738449789342, 
              "TrainingMemory" -> 64320., "ModelMemory" -> 9088., 
              "ExperimentCount" -> 2, "ModelUtility" -> 5.616165032307096, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0970575872120691`, 0.008140936605237025], 
                PlusMinus[1.0971974322419127`, 0.008142607968438506]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8121773645251362, 0.038721614726118056`], 
                PlusMinus[0.83716187832981, 0.03696863129343982]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 5.486625858461335*^-6, "MeanCrossEntropy" -> 
             PlusMinus[1.0971274953731238`, 0.00575752690796206], 
             "ModelMemory" -> 9088., "TrainingMemory" -> 64320., 
             "TrainingTime" -> 0.01899810093687304], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.0001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.04726460795145829, 0.17714260336844237`], 
              "Accuracy" -> PlusMinus[0.9581040495277977, 0.0421512741689087],
               "EvaluationTime" -> 0.000010651720236187204`, "TestSize" -> 48,
               "TrainingSize" -> 96, "TrainingTime" -> 0.020185778038550893`, 
              "TrainingMemory" -> 81546.66666666666, "ModelMemory" -> 9088., 
              "ExperimentCount" -> 2, "ModelUtility" -> 65.05046914056712, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.04388836730863507, 0.03257840081553015], 
                PlusMinus[0.3921896041309537, 0.32928761720887434`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9733520607067219, 0.04716820181901935], 
                PlusMinus[0.933352060706722, 0.06009630485396967]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.25859125663278987`, 0.08114399318920684], 
              "Accuracy" -> 
              PlusMinus[0.9047085835120791, 0.04286715038459949], 
              "EvaluationTime" -> 5.6151479422458135`*^-6, "TestSize" -> 210, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.018995002830585757`, 
              "TrainingMemory" -> 72589.33333333333, "ModelMemory" -> 9088., 
              "ExperimentCount" -> 2, "ModelUtility" -> 22.348331573837815`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.22460792621241316`, 0.09001162330767364], 
                PlusMinus[0.30855937483328816`, 0.10914708012067087`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9309335178069486, 0.025885427891852227`], 
                PlusMinus[0.8560423161521244, 0.03526242397415023]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 5.6151479422458135`*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.25859125663278987`, 0.08114399318920684], 
             "ModelMemory" -> 9088., "TrainingMemory" -> 72589.33333333333, 
             "TrainingTime" -> 0.0429797814352538], "Index" -> 10], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 13], "LearningRate" -> 
             Association["Value" -> 0.01], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 4], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 35], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0985975129254457`, 0.011540641207736395`], 
              "Accuracy" -> 
              PlusMinus[0.33289209467790953`, 0.0646997553890847], 
              "EvaluationTime" -> 0.000013350910266935527`, "TestSize" -> 105,
               "TrainingSize" -> 15, "TrainingTime" -> 0.06625281288568928, 
              "TrainingMemory" -> 83592, "ModelMemory" -> 20248, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.635843080897108, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0985975129254457`, 0.008160465657231311]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.33289209467790953`, 0.04574963577673267]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7741284686078894, 0.02469611378083572], "Accuracy" -> 
              PlusMinus[0.9163201050868207, 0.04973695931788334], 
              "EvaluationTime" -> 0.0062253483951983666`, "TestSize" -> 48, 
              "TrainingSize" -> 96, "TrainingTime" -> 0.09516166080164735, 
              "TrainingMemory" -> 1.0857733333333333`*^6, "ModelMemory" -> 
              289136., "ExperimentCount" -> 2, "ModelUtility" -> 
              1.1046277692432176`, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7653997153212142, 0.024146918287534812`], 
                PlusMinus[0.7940138038308826, 0.03644618384120058]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.893352060706722, 0.06978748062054377], 
                PlusMinus[0.933352060706722, 0.06009630485396967]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0062253483951983666`, "MeanCrossEntropy" -> 
             PlusMinus[0.7741284686078894, 0.02469611378083572], 
             "ModelMemory" -> 289136., "TrainingMemory" -> 
             1.0857733333333333`*^6, "TrainingTime" -> 0.18044680584766612`], 
           "Index" -> 11]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
             "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Tuple[{
             
             TypeSystem`Struct[{
              "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
               "TrainingSize", "TrainingTime", "TrainingMemory", 
               "ModelMemory", "ExperimentCount", "ModelUtility", 
               "MeanCrossEntropyHistory", "AccuracyHistory"}, {
              TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
               TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
             
             
             TypeSystem`Struct[{
              "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
               "TrainingSize", "TrainingTime", "TrainingMemory", 
               "ModelMemory", "ExperimentCount", "ModelUtility", 
               "MeanCrossEntropyHistory", "AccuracyHistory"}, {
              TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Vector[TypeSystem`AnyType, 2], 
               TypeSystem`Vector[TypeSystem`AnyType, 2]}]}], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 11], 
        Association["ID" -> 33621171473661]], "MaxTrainingSize" -> 120, 
      "LastReportingTime" -> 3.7650037733390046`17.328340404952847*^9, 
      "PreprocessorEvaluationTime" -> 3.487624773023344487005159564319`4.*^-6,
       "PreprocessorMemory" -> 39280, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 15, "TimeBudgets" -> 0.8800000000000001, 
          "ElapsedTimes" -> 1.3593869, "ExperimentCounts" -> 21], 
         Association[
         "TrainingSizes" -> 96, "TimeBudgets" -> 1.1, "ElapsedTimes" -> 
          1.2500059000000001`, "ExperimentCounts" -> 22]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 2], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[33629761408253]], "ID" -> 33634056375549]]], 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "NumericalVector", "Weight" -> 1, 
           "Values" -> {{6., 3., 4.8, 1.8}}, "ID" -> 3246226001810280355]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 3.339536293317299, "MaxTrainingMemory" -> 1691280, 
      "DataMemory" -> 28568, "FunctionMemory" -> 217168, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2019, 4, 23, 10, 22, 53.4015062`9.480128351163595}, 
        "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.7650122225725527`*^9, {3.7650122985428*^9, 3.765012322272072*^9}, 
   3.765012609800209*^9, {3.765012712096395*^9, 3.765012803965373*^9}, {
   3.765018142869974*^9, 3.7650181734483805`*^9}},
 CellLabel->"Out[44]=",ExpressionUUID->"f0519c6b-80c7-4d67-85a9-1b27ef7219df"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Classifier Measurements", "Subsubsection",
 CellChangeTimes->{{3.765012229170093*^9, 
  3.7650122354189377`*^9}},ExpressionUUID->"e2d0a968-f949-4694-9130-\
727594cb1438"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"ciris", ",", "validation"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.76467412141471*^9, 3.764674122952112*^9}, {
   3.7646741684524*^9, 3.764674250104493*^9}, 3.7646754698011503`*^9, {
   3.7650122490172243`*^9, 3.765012249944705*^9}, {3.7650183411370893`*^9, 
   3.7650183823717847`*^9}, {3.7650184151532636`*^9, 3.7650184167001762`*^9}},
 
 CellLabel->"In[59]:=",ExpressionUUID->"19673c4e-fb31-4d79-b52b-caffd9e8a642"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierMeasurementsObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["31", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["31", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["3", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  RowBox[{
                   "0.9677419354838709964`4.401197381662149", "\[PlusMinus]", 
                    "0.0322580645161292534`2."}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierMeasurementsObject[
   Association["Model" -> ClassifierFunction[
      Association[
      "ExampleNumber" -> 120, "ClassNumber" -> 3, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "NumericalVector", "Length" -> 4]],
             "Output" -> 
            Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"NumericalVector"}, 
                   "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                   "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            True, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Output" -> 
            Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Processors" -> {
              MachineLearning`MLProcessor["ImputeMissing", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Imputer" -> (DimensionReducerFunction[
                  Association[
                  "ExampleNumber" -> 120, "Imputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {5.919166666666667, 3.0466666666666664`, 
                    3.854166666666667, 1.2316666666666667`}, "Method" -> 
                    "Naive", "VectorLength" -> 4, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.919166666666667, 3.0466666666666664`, 
                    3.854166666666667, 1.2316666666666667`}, 
                    "StandardDeviation" -> {0.8344954397052572, 
                    0.441575462281233, 1.7511851145882773`, 
                    0.7469921165730079}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                   MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 4]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                    True, "Invertibility" -> "Perfect", "Missing" -> 
                    "Allowed"]], "Processor" -> 
                   MachineLearning`MLProcessor["Identity"], "Padder" -> 
                   MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                   MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                   "Model" -> 
                   Association[
                    "Matrix" -> {{0.5258218898939605, 
                    0.3649306575879717}, {-0.2586236509178906, 
                    0.9285161481961571}, {0.5811713747978308, 
                    0.01919324021351543}, {0.5646813087130153, 
                    0.06568863845056379}}, "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {5.919166666666667, 3.0466666666666664`, 
                    3.854166666666667, 1.2316666666666667`}, 
                    "StandardDeviation" -> {0.8344954397052572, 
                    0.441575462281233, 1.7511851145882773`, 
                    0.7469921165730079}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 2, "Method" -> "Linear"], 
                   "PerformanceGoal" -> Automatic, "Invertibility" -> 
                   "Approximate", "Log" -> 
                   Association[
                    "TrainingTime" -> 0.008755476449307902, 
                    "MaxTrainingMemory" -> 65272, "DataMemory" -> 3960, 
                    "FunctionMemory" -> 21760, "LanguageVersion" -> {11.3, 0},
                     "Date" -> 
                    DateObject[{
                    2019, 4, 23, 10, 22, 50.0889835`9.452317071040763}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                  PerformanceGoal -> "Quality"]& ), "Method" -> 
                "DimensionReduction", "VectorLength" -> 4, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
                7263179337424669307]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Mean" -> {5.919166666666667, 3.0466666666666664`, 
                 3.854166666666667, 1.2316666666666667`}, 
                "StandardDeviation" -> {0.8344954397052572, 0.441575462281233,
                  1.7511851145882773`, 0.7469921165730079}, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 1519634882283037191]]}, 
            "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            True, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 3469640861300586857]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association[
                  "setosa" -> 1, "versicolor" -> 2, "virginica" -> 3]}, 
                "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
                8632914170514506599, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 5976834071906370717]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 3], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]},
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
         "Marginal" -> 
         Association[
          "setosa" -> 0.3089430894308943, "versicolor" -> 
           0.34959349593495936`, "virginica" -> 0.34146341463414637`]], 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {3, 4}, 0., {
         1, {{0, 1, 2, 3}, {{2}, {3}, {4}}}, {1., 1., 1.}}], "Threshold" -> 0,
        "TieBreaker" -> RandomChoice, "PerformanceGoal" -> "Speed", 
       "BatchProcessing" -> Automatic, "Model" -> 
       Association["LogProbabilitiesFunction" -> LinearLayer[
           Association[
           "Type" -> "Linear", "Arrays" -> 
            Association[
             "Weights" -> 
              RawArray["Real32",{{-6.997928619384766, 
                8.107771873474121, -31.657047271728516`, \
-19.533668518066406`}, {5.8458428382873535`, 
                3.306210517883301, -33.395103454589844`, \
-11.713467597961426`}}], "Biases" -> 
              RawArray["Real32",{13.229002952575684`, 26.322776794433594`}]], 
            "Parameters" -> 
            Association[
             "OutputDimensions" -> {2}, "$OutputSize" -> 2, "$InputSize" -> 4,
               "$InputDimensions" -> {4}], "Inputs" -> 
            Association[
             "Input" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
            "Outputs" -> 
            Association[
             "Output" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
           
           Association["Version" -> "11.3.5"]], "Processor" -> 
         MachineLearning`MLProcessor["FirstValues", 
           Association[
           "Info" -> Association["Weight" -> 1, "Type" -> "NumericalVector"], 
            "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
            "Allowed"]], "Method" -> "LogisticRegression", "Options" -> 
         Association[
          "L1Regularization" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "L2Regularization" -> 
           Association["Value" -> 0.001, "Options" -> Association[]], 
           "OptimizationMethod" -> 
           Association["Value" -> "LBFGS", "Options" -> Association[]], 
           MaxIterations -> 
           Association["Value" -> 30, "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            PlusMinus[0.05055641990440668, 0.1135634848861302], "Accuracy" -> 
            PlusMinus[0.9581040495277977, 0.0421512741689087], 
            "EvaluationTime" -> 0.000010136953087226483`, "TestSize" -> 48, 
            "TrainingSize" -> 96, "TrainingTime" -> 0.020285373602632897`, 
            "TrainingMemory" -> 81485.33333333333, "ModelMemory" -> 9088., 
            "ExperimentCount" -> 2, "ModelUtility" -> 74.24160633923506, 
            "MeanCrossEntropyHistory" -> {
              PlusMinus[0.04469905560436635, 0.032541481456255926`], 
              PlusMinus[0.2625631172035148, 0.1957766949935338]}, 
            "AccuracyHistory" -> {
              PlusMinus[0.9733520607067219, 0.04716820181901935], 
              PlusMinus[0.933352060706722, 0.06009630485396967]}, 
            "Configuration" -> {
             "LogisticRegression", "L1Regularization" -> 0, 
              "L2Regularization" -> 0.001, "OptimizationMethod" -> Automatic, 
              MaxIterations -> 30}, "FinalTrainingSize" -> 120], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
             "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Vector[TypeSystem`AnyType, 2], 
             TypeSystem`Vector[TypeSystem`AnyType, 2], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], 
           Association["ID" -> 33625466440957]], "Configurations" -> Dataset[
           Association[
           Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 100000.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.0984502095828674`, 0.005768958213820291], 
                 "Accuracy" -> 
                 PlusMinus[0.8252479516803816, 0.029513244779800253`], 
                 "EvaluationTime" -> 6.275860063109683*^-6, "TestSize" -> 210,
                  "TrainingSize" -> 15, "TrainingTime" -> 0.04837826015102603,
                  "TrainingMemory" -> 101149.33333333333`, "ModelMemory" -> 
                 9088., "ExperimentCount" -> 2, "ModelUtility" -> 
                 5.4688564765251675`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.0984431833794222`, 0.008158441345541969], 
                   PlusMinus[1.0984572361016998`, 0.008158624448436125]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.8121773645251362, 0.038721614726118056`], 
                   PlusMinus[0.83716187832981, 0.03696863129343982]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.0976853332537326`, 0.023054761986924504`], 
                 "Accuracy" -> 
                 PlusMinus[0.8348941518071921, 0.06026493569574548], 
                 "EvaluationTime" -> 0.000014405560676300762`, "TestSize" -> 
                 48, "TrainingSize" -> 96, "TrainingTime" -> 
                 0.030660228307625232`, "TrainingMemory" -> 90373.33333333333,
                  "ModelMemory" -> 9088., "ExperimentCount" -> 2, 
                 "ModelUtility" -> 4.546096745350217, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.097645744006885, 0.03260215122820937], 
                   PlusMinus[1.0977249329831442`, 0.03260646719209319]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.853352060706722, 0.07746624455609222], 
                   PlusMinus[0.8133520607067221, 0.08368838413953156]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000014405560676300762`, 
                "MeanCrossEntropy" -> 
                PlusMinus[1.0976853332537326`, 0.023054761986924504`], 
                "ModelMemory" -> 9088., "TrainingMemory" -> 90373.33333333333,
                 "TrainingTime" -> 0.0851705341201763], "Index" -> 1], 
            Association[
             "Value" -> "RandomForest", "Options" -> 
              Association[
               "FeatureFraction" -> Association["Value" -> Automatic], 
                "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
                Association["Value" -> Automatic], "DistributionSmoothing" -> 
                Association["Value" -> 0.5], "Implementation" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.5948547990347142, 0.0327760749178028], 
                 "Accuracy" -> 
                 PlusMinus[0.8756651863087618, 0.025388451805694826`], 
                 "EvaluationTime" -> 0.00007493833078241886, "TestSize" -> 
                 210, "TrainingSize" -> 15, "TrainingTime" -> 
                 0.09347585382526319, "TrainingMemory" -> 95869.33333333333, 
                 "ModelMemory" -> 39088., "ExperimentCount" -> 2, 
                 "ModelUtility" -> 5.34038608620459, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.5689383216946685, 0.030091973549014054`], 
                   PlusMinus[0.6193191698674873, 0.029236791580832703`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.8846305973521364, 0.032297774147876976`], 
                   PlusMinus[0.8655342756637243, 0.03433299836532293]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.15437186167956699`, 0.08462653611296213], 
                 "Accuracy" -> 
                 PlusMinus[0.948266248603911, 0.055921288580538124`], 
                 "EvaluationTime" -> 0.000050898591790316105`, "TestSize" -> 
                 48, "TrainingSize" -> 96, "TrainingTime" -> 
                 0.004636230528378226, "TrainingMemory" -> 83029.33333333333, 
                 "ModelMemory" -> 39088., "ExperimentCount" -> 2, 
                 "ModelUtility" -> 20.933804640259282`, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.14270423484175923`, 0.030615936777081017`], 
                   PlusMinus[0.30136419011542037`, 0.10866848733081037`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9733520607067219, 0.04716820181901935], 
                   PlusMinus[0.893352060706722, 0.06978748062054377]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000050898591790316105`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.15437186167956699`, 0.08462653611296213], 
                "ModelMemory" -> 39088., "TrainingMemory" -> 
                83029.33333333333, "TrainingTime" -> 0.09903933045931707], 
              "Index" -> 2], 
            Association[
             "Value" -> "DecisionTree", "Options" -> 
              Association[
               "DistributionSmoothing" -> Association["Value" -> 1], 
                "FeatureFraction" -> Association["Value" -> 1]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.43542808444026226`, 0.14964512445254313`], 
                 "Accuracy" -> 
                 PlusMinus[0.9135868391277416, 0.08705174248038162], 
                 "EvaluationTime" -> 8.19826080929442*^-6, "TestSize" -> 210, 
                 "TrainingSize" -> 15, "TrainingTime" -> 0.005926126130749399,
                  "TrainingMemory" -> 63853.33333333333, "ModelMemory" -> 
                 5616., "ExperimentCount" -> 2, "ModelUtility" -> 
                 12.241909661961918`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.38068777068719917`, 0.03298226562063433], 
                   PlusMinus[0.6740056811384617, 0.06885598153324207]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9528442762551912, 0.022367214552115735`], 
                   PlusMinus[0.7832153066808385, 0.04076076412524876]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.11444172622409214`, 0.10534865776562292`], 
                 "Accuracy" -> 
                 PlusMinus[0.9581040495277977, 0.0421512741689087], 
                 "EvaluationTime" -> 0.000012984011395709237`, "TestSize" -> 
                 48, "TrainingSize" -> 96, "TrainingTime" -> 
                 0.005036608497345274, "TrainingMemory" -> 75490.66666666666, 
                 "ModelMemory" -> 5616., "ExperimentCount" -> 2, 
                 "ModelUtility" -> 37.91258735866601, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.1063530034529613, 0.02924901939711818], 
                   PlusMinus[0.30910373573334066`, 0.1434867953833617]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9733520607067219, 0.04716820181901935], 
                   PlusMinus[0.933352060706722, 0.06009630485396967]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000012984011395709237`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.11444172622409214`, 0.10534865776562292`], 
                "ModelMemory" -> 5616., "TrainingMemory" -> 75490.66666666666,
                 "TrainingTime" -> 0.011970056327563726`], "Index" -> 3], 
            Association[
             "Value" -> "NearestNeighbors", "Options" -> 
              Association[
               "NeighborsNumber" -> Association["Value" -> Automatic], 
                "DistributionSmoothing" -> Association["Value" -> 0.5], 
                "NearestMethod" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.2939269814685733, 0.051904927652328445`], 
                 "Accuracy" -> 
                 PlusMinus[0.9092405407497945, 0.02450086806383863], 
                 "EvaluationTime" -> 9.869047898492643*^-6, "TestSize" -> 210,
                  "TrainingSize" -> 15, "TrainingTime" -> 
                 0.002727283872161491, "TrainingMemory" -> 62213.33333333333, 
                 "ModelMemory" -> 6432., "ExperimentCount" -> 2, 
                 "ModelUtility" -> 17.98255507517318, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.27128158165057537`, 0.03172802574763265], 
                   PlusMinus[0.3595051037971721, 0.05399238869450159]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9208243998075933, 0.027398374536563956`], 
                   PlusMinus[0.89423860880876, 0.0311796877233149]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.15382899701343972`, 0.06971016702396235], 
                 "Accuracy" -> 
                 PlusMinus[0.940895786658571, 0.07227094383365962], 
                 "EvaluationTime" -> 0.000017248659237483818`, "TestSize" -> 
                 48, "TrainingSize" -> 96, "TrainingTime" -> 
                 0.004327465272936986, "TrainingMemory" -> 200341.3333333333, 
                 "ModelMemory" -> 9216., "ExperimentCount" -> 2, 
                 "ModelUtility" -> 28.572029848395704`, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.12650657408553956`, 0.03266108227508023], 
                   PlusMinus[0.25335348749833686`, 0.06233557190526947]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9733520607067219, 0.04716820181901935], 
                   PlusMinus[0.853352060706722, 0.07746624455609222]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000017248659237483818`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.15382899701343972`, 0.06971016702396235], 
                "ModelMemory" -> 9216., "TrainingMemory" -> 200341.3333333333,
                 "TrainingTime" -> 0.007920242199685875], "Index" -> 4], 
            Association[
             "Value" -> "NaiveBayes", "Options" -> 
              Association[
               "SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.34187593557387347`, 0.08607645170766426], 
                 "Accuracy" -> 
                 PlusMinus[0.888276103231788, 0.07943659215066516], 
                 "EvaluationTime" -> 8.401904956136023*^-6, "TestSize" -> 210,
                  "TrainingSize" -> 15, "TrainingTime" -> 
                 0.005782909990413927, "TrainingMemory" -> 54861.33333333333, 
                 "ModelMemory" -> 16160., "ExperimentCount" -> 2, 
                 "ModelUtility" -> 15.782352239151146`, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.39070178946323214`, 0.07323987908378837], 
                   PlusMinus[0.2627616238914112, 0.09322882743548251]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7802845433642429, 0.040067166312209364`], 
                   PlusMinus[0.9331136113684368, 0.025817516057524765`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.05223317560124297, 0.13677763592162392`], 
                 "Accuracy" -> 
                 PlusMinus[0.940895786658571, 0.07227094383365962], 
                 "EvaluationTime" -> 0.000011518904894821032`, "TestSize" -> 
                 48, "TrainingSize" -> 96, "TrainingTime" -> 
                 0.00432584969603871, "TrainingMemory" -> 58450.666666666664`,
                  "ModelMemory" -> 18896., "ExperimentCount" -> 2, 
                 "ModelUtility" -> 66.38747930065055, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.044030624619003804`, 0.0325708566260417], 
                   PlusMinus[0.3099628169290295, 0.18257314480982548`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9733520607067219, 0.04716820181901935], 
                   PlusMinus[0.853352060706722, 0.07746624455609222]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000011518904894821032`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.05223317560124297, 0.13677763592162392`], 
                "ModelMemory" -> 18896., "TrainingMemory" -> 
                58450.666666666664`, "TrainingTime" -> 0.010973929625660378`],
               "Index" -> 5], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.05055641990440668, 0.1135634848861302], 
                 "Accuracy" -> 
                 PlusMinus[0.9581040495277977, 0.0421512741689087], 
                 "EvaluationTime" -> 0.000010136953087226483`, "TestSize" -> 
                 48, "TrainingSize" -> 96, "TrainingTime" -> 
                 0.020285373602632897`, "TrainingMemory" -> 81485.33333333333,
                  "ModelMemory" -> 9088., "ExperimentCount" -> 2, 
                 "ModelUtility" -> 74.24160633923506, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.04469905560436635, 0.032541481456255926`], 
                   PlusMinus[0.2625631172035148, 0.1957766949935338]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9733520607067219, 0.04716820181901935], 
                   PlusMinus[0.933352060706722, 0.06009630485396967]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.2176209697906484, 0.08936946032558205], 
                 "Accuracy" -> 
                 PlusMinus[0.9047085835120791, 0.04286715038459949], 
                 "EvaluationTime" -> 5.5282597729267305`*^-6, "TestSize" -> 
                 210, "TrainingSize" -> 15, "TrainingTime" -> 
                 0.018752951397649827`, "TrainingMemory" -> 72472., 
                 "ModelMemory" -> 9088., "ExperimentCount" -> 2, 
                 "ModelUtility" -> 26.1556785001843, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.17530423282278343`, 0.06332388805228874], 
                   PlusMinus[0.3189467952718713, 0.09798769951413312]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9309335178069486, 0.025885427891852227`], 
                   PlusMinus[0.8560423161521244, 0.03526242397415023]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 5.5282597729267305`*^-6, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.2176209697906484, 0.08936946032558205], 
                "ModelMemory" -> 9088., "TrainingMemory" -> 72472., 
                "TrainingTime" -> 0.04278891527981269], "Index" -> 6], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.00001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.29365950314238193`, 0.08431572328740802], 
                 "Accuracy" -> 
                 PlusMinus[0.9047085835120791, 0.04286715038459949], 
                 "EvaluationTime" -> 5.59976149559556*^-6, "TestSize" -> 210, 
                 "TrainingSize" -> 15, "TrainingTime" -> 0.01881386815010838, 
                 "TrainingMemory" -> 72736., "ModelMemory" -> 9088., 
                 "ExperimentCount" -> 2, "ModelUtility" -> 
                 19.788889253746966`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.29207604071634535`, 0.12284622561858807`], 
                   PlusMinus[0.2950689593688978, 0.11590007916392916`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9309335178069486, 0.025885427891852227`], 
                   PlusMinus[0.8560423161521244, 0.03526242397415023]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.04643987283023225, 0.23355191421907381`], 
                 "Accuracy" -> 
                 PlusMinus[0.9581040495277977, 0.0421512741689087], 
                 "EvaluationTime" -> 0.000010580444784792643`, "TestSize" -> 
                 48, "TrainingSize" -> 96, "TrainingTime" -> 
                 0.029947188691874037`, "TrainingMemory" -> 81440., 
                 "ModelMemory" -> 9088., "ExperimentCount" -> 2, 
                 "ModelUtility" -> 57.835767238481814`, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.04388834884503517, 0.03257840181046252], 
                   PlusMinus[0.5064507721265296, 0.4374354833809844]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9733520607067219, 0.04716820181901935], 
                   PlusMinus[0.933352060706722, 0.06009630485396967]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000010580444784792643`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.04643987283023225, 0.23355191421907381`], 
                "ModelMemory" -> 9088., "TrainingMemory" -> 81440., 
                "TrainingTime" -> 0.054750494580357224`], "Index" -> 7], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.*^6], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.0984689612082246`, 0.023084437659221756`], 
                 "Accuracy" -> 
                 PlusMinus[0.8348941518071921, 0.06026493569574548], 
                 "EvaluationTime" -> 0.000010243866264318326`, "TestSize" -> 
                 48, "TrainingSize" -> 96, "TrainingTime" -> 
                 0.006150216149933899, "TrainingMemory" -> 72920., 
                 "ModelMemory" -> 9088., "ExperimentCount" -> 2, 
                 "ModelUtility" -> 4.919682939133381, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.0984649997549814`, 0.0326461105601993], 
                   PlusMinus[1.0984729227652328`, 0.03264653811742901]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.853352060706722, 0.07746624455609222], 
                   PlusMinus[0.8133520607067221, 0.08368838413953156]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.098582779570576, 0.005770183530285556], 
                 "Accuracy" -> 
                 PlusMinus[0.8252479516803816, 0.029513244779800253`], 
                 "EvaluationTime" -> 5.473049582005229*^-6, "TestSize" -> 210,
                  "TrainingSize" -> 15, "TrainingTime" -> 
                 0.006047009296314574, "TrainingMemory" -> 63568., 
                 "ModelMemory" -> 9088., "ExperimentCount" -> 2, 
                 "ModelUtility" -> 5.611276944703274, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.0985820765939753`, 0.008160262510146697], 
                   PlusMinus[1.098583482550359, 0.008160280980589943]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.8121773645251362, 0.038721614726118056`], 
                   PlusMinus[0.83716187832981, 0.03696863129343982]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 5.473049582005229*^-6, "MeanCrossEntropy" -> 
                PlusMinus[1.098582779570576, 0.005770183530285556], 
                "ModelMemory" -> 9088., "TrainingMemory" -> 63568., 
                "TrainingTime" -> 0.013406627305511388`], "Index" -> 8], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 10000.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.0899502883606698`, 0.02277902143184966], 
                 "Accuracy" -> 
                 PlusMinus[0.8605390115051886, 0.06687808406688614], 
                 "EvaluationTime" -> 0.000010398296409006543`, "TestSize" -> 
                 48, "TrainingSize" -> 96, "TrainingTime" -> 
                 0.011005214797125832`, "TrainingMemory" -> 91178.66666666666,
                  "ModelMemory" -> 9088., "ExperimentCount" -> 2, 
                 "ModelUtility" -> 4.941583543582859, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.089556968078784, 0.03218604354211813], 
                   PlusMinus[1.0903447614461768`, 0.03223317693614948]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.893352060706722, 0.06978748062054377], 
                   PlusMinus[0.8133520607067221, 0.08368838413953156]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.0971274953731238`, 0.00575752690796206], 
                 "Accuracy" -> 
                 PlusMinus[0.8252479516803816, 0.029513244779800253`], 
                 "EvaluationTime" -> 5.486625858461335*^-6, "TestSize" -> 210,
                  "TrainingSize" -> 15, "TrainingTime" -> 
                 0.006660738449789342, "TrainingMemory" -> 64320., 
                 "ModelMemory" -> 9088., "ExperimentCount" -> 2, 
                 "ModelUtility" -> 5.616165032307096, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.0970575872120691`, 0.008140936605237025], 
                   PlusMinus[1.0971974322419127`, 0.008142607968438506]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.8121773645251362, 0.038721614726118056`], 
                   PlusMinus[0.83716187832981, 0.03696863129343982]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 5.486625858461335*^-6, "MeanCrossEntropy" -> 
                PlusMinus[1.0971274953731238`, 0.00575752690796206], 
                "ModelMemory" -> 9088., "TrainingMemory" -> 64320., 
                "TrainingTime" -> 0.01899810093687304], "Index" -> 9], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.0001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.04726460795145829, 0.17714260336844237`], 
                 "Accuracy" -> 
                 PlusMinus[0.9581040495277977, 0.0421512741689087], 
                 "EvaluationTime" -> 0.000010651720236187204`, "TestSize" -> 
                 48, "TrainingSize" -> 96, "TrainingTime" -> 
                 0.020185778038550893`, "TrainingMemory" -> 81546.66666666666,
                  "ModelMemory" -> 9088., "ExperimentCount" -> 2, 
                 "ModelUtility" -> 65.05046914056712, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.04388836730863507, 0.03257840081553015], 
                   PlusMinus[0.3921896041309537, 0.32928761720887434`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9733520607067219, 0.04716820181901935], 
                   PlusMinus[0.933352060706722, 0.06009630485396967]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.25859125663278987`, 0.08114399318920684], 
                 "Accuracy" -> 
                 PlusMinus[0.9047085835120791, 0.04286715038459949], 
                 "EvaluationTime" -> 5.6151479422458135`*^-6, "TestSize" -> 
                 210, "TrainingSize" -> 15, "TrainingTime" -> 
                 0.018995002830585757`, "TrainingMemory" -> 72589.33333333333,
                  "ModelMemory" -> 9088., "ExperimentCount" -> 2, 
                 "ModelUtility" -> 22.348331573837815`, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.22460792621241316`, 0.09001162330767364], 
                   PlusMinus[0.30855937483328816`, 0.10914708012067087`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9309335178069486, 0.025885427891852227`], 
                   PlusMinus[0.8560423161521244, 0.03526242397415023]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 5.6151479422458135`*^-6, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.25859125663278987`, 0.08114399318920684], 
                "ModelMemory" -> 9088., "TrainingMemory" -> 72589.33333333333,
                 "TrainingTime" -> 0.0429797814352538], "Index" -> 10], 
            Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 13], "LearningRate" -> 
                Association["Value" -> 0.01], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 4], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 35], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.0985975129254457`, 0.011540641207736395`], 
                 "Accuracy" -> 
                 PlusMinus[0.33289209467790953`, 0.0646997553890847], 
                 "EvaluationTime" -> 0.000013350910266935527`, "TestSize" -> 
                 105, "TrainingSize" -> 15, "TrainingTime" -> 
                 0.06625281288568928, "TrainingMemory" -> 83592, 
                 "ModelMemory" -> 20248, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 4.635843080897108, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.0985975129254457`, 0.008160465657231311]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.33289209467790953`, 0.04574963577673267]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7741284686078894, 0.02469611378083572], 
                 "Accuracy" -> 
                 PlusMinus[0.9163201050868207, 0.04973695931788334], 
                 "EvaluationTime" -> 0.0062253483951983666`, "TestSize" -> 48,
                  "TrainingSize" -> 96, "TrainingTime" -> 0.09516166080164735,
                  "TrainingMemory" -> 1.0857733333333333`*^6, "ModelMemory" -> 
                 289136., "ExperimentCount" -> 2, "ModelUtility" -> 
                 1.1046277692432176`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7653997153212142, 0.024146918287534812`], 
                   PlusMinus[0.7940138038308826, 0.03644618384120058]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.893352060706722, 0.06978748062054377], 
                   PlusMinus[0.933352060706722, 0.06009630485396967]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0062253483951983666`, "MeanCrossEntropy" -> 
                PlusMinus[0.7741284686078894, 0.02469611378083572], 
                "ModelMemory" -> 289136., "TrainingMemory" -> 
                1.0857733333333333`*^6, "TrainingTime" -> 
                0.18044680584766612`], "Index" -> 11]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration[
               "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
                "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
               TypeSystem`AnyLength]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Tuple[{
                
                TypeSystem`Struct[{
                 "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize",
                   "TrainingSize", "TrainingTime", "TrainingMemory", 
                  "ModelMemory", "ExperimentCount", "ModelUtility", 
                  "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                 TypeSystem`AnyType, TypeSystem`AnyType, 
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Integer], 
                  TypeSystem`Atom[Integer], 
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Integer], 
                  TypeSystem`Atom[Real], 
                  TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                  TypeSystem`Vector[
                  TypeSystem`AnyType, TypeSystem`AnyLength]}], 
                
                TypeSystem`Struct[{
                 "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize",
                   "TrainingSize", "TrainingTime", "TrainingMemory", 
                  "ModelMemory", "ExperimentCount", "ModelUtility", 
                  "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                 TypeSystem`AnyType, TypeSystem`AnyType, 
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Integer], 
                  TypeSystem`Atom[Integer], 
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Integer], 
                  TypeSystem`Atom[Real], 
                  TypeSystem`Vector[TypeSystem`AnyType, 2], 
                  TypeSystem`Vector[TypeSystem`AnyType, 2]}]}], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 11], 
           Association["ID" -> 33621171473661]], "MaxTrainingSize" -> 120, 
         "LastReportingTime" -> 3.7650037733390046`17.328340404952847*^9, 
         "PreprocessorEvaluationTime" -> 
         3.487624773023344487005159564319`4.*^-6, "PreprocessorMemory" -> 
         39280, "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 15, "TimeBudgets" -> 0.8800000000000001, 
             "ElapsedTimes" -> 1.3593869, "ExperimentCounts" -> 21], 
            Association[
            "TrainingSizes" -> 96, "TimeBudgets" -> 1.1, "ElapsedTimes" -> 
             1.2500059000000001`, "ExperimentCounts" -> 22]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 2], 
           Association[
           "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
              Dataset`DatasetHandle[33629761408253]], "ID" -> 
            33634056375549]]], "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "NumericalVector", "Weight" -> 1, 
              "Values" -> {{6., 3., 4.8, 1.8}}, "ID" -> 3246226001810280355]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> 
            False]], "TrainingTime" -> 3.339536293317299, "MaxTrainingMemory" -> 
         1691280, "DataMemory" -> 28568, "FunctionMemory" -> 217168, 
         "LanguageVersion" -> {11.3, 0}, "Date" -> 
         DateObject[{2019, 4, 23, 10, 22, 53.4015062`9.480128351163595}, 
           "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association["Input" -> CompressedData["
1:eJx1U0tuwkAMHSCgElQKgXyARdUz9ACZM/QIlWDb87Q34QhIsGLFjiO0EkKg
IlSI33MVQyxFluPxe8/2zMv7x9u07px7vnzB5ZsVNvSvhXW8K+yQf31ebQE/
8uKbOBd7qTvnq+XVxohDL3EC71AXwz/e4JP/fn4DPwDeg8nPwR+hvg1/VHzR
O1J9Up/BB+gn1f6oh/2RX841DM439CeIqS9SnVI3MfpS4NQNXwie31zqt8pP
vcTnOakbK7+c7wNvD/6B5vm/an4S73R+Uld9PzhPiWvI98x8MuUv7/ME/gy6
Wp56mSd+mT/SPZfn173ZP+8j85yb+LXR/7//Mk5cuV/BH5r38WTm3zf9/+j8
2S/7u39/J4bfvq+q/S7yP5D4Xxc=
       "], 
      "Output" -> {
       "setosa", "virginica", "virginica", "setosa", "setosa", "setosa", 
        "setosa", "virginica", "virginica", "versicolor", "versicolor", 
        "virginica", "setosa", "virginica", "versicolor", "setosa", "setosa", 
        "setosa", "versicolor", "virginica", "virginica", "versicolor", 
        "setosa", "setosa", "versicolor", "versicolor", "versicolor", 
        "setosa", "setosa", "virginica", "setosa"}], 
    "Predictions" -> {
     "setosa", "virginica", "virginica", "setosa", "setosa", "setosa", 
      "setosa", "virginica", "virginica", "versicolor", "versicolor", 
      "virginica", "setosa", "virginica", "versicolor", "setosa", "setosa", 
      "setosa", "versicolor", "virginica", "virginica", "versicolor", 
      "setosa", "setosa", "virginica", "versicolor", "versicolor", "setosa", 
      "setosa", "virginica", "setosa"}, "LogProbabilities" -> CompressedData["

1:eJwB+QIG/SFib1JlAgAAAB8AAAADAAAAfPh9HRza3r4chxNU3KMnwHP031/C
B1jA+qTjuh1kRMCXKlF2wuklwIUrd7toSvK+MnOzdwFfRsAhX2lx5kAuwAUl
3sGxFZK+d2Fuukbo/b5On+ZhAe4kwLANd8dIx1jALU6r7Ncuw74rhL2uCvop
wAPGBMiSGVjA3suiJWYIyr7nMTL9tV0pwF3y3bHsuVfAfEEerzWtgL4M1n2Y
S80vwBBnFQi4f1fAwHiMFrKiTMAU8+PdFOw9wGr+////fzy9xm2X6kwRQMBh
Rii//7AmwBzKipn0yei+rtMPGCgbBcDFeDHPwvyyv6KuGxDInTzAYS2WpDS3
JcBjt6RYQ8BIv2oxGJGy2xzApyEvRpUhTMBTUUbBCCA2wDoP9/8V6vC9FZjU
5HsaO78SyQvU4SkfwHfhoazOtFTAfqh1WlBjKMBboYWB7lESwEsGH1PlHoW/
3N+t1+xMOcBU8CQ0LjdWvia8dduxsTHAZfnAsKpMwr6LTIXXLhIqwEGpZIDH
7VfAhm34HuJ1hr6APFHN2DQvwMOEQY7O2ljAqB6nvuV6ur4N+C5O4bcqwNT7
g5ttPVjAiIjKWWj5NMDtBsN/+BUWviQzwajGZjXAfkZ0NucXN8B6XXU36cD8
v9SyXhlxM8e/2/B40UgWOsCTUYGnIEnvv6ZA0s6bM96/AnChDP1rK8BvPkbE
KNPovmrEJ8Wu4ibAkzBXxscWd74IWSzPzUQwwH5hS80aalnAXCtvKjiaYr9l
qmIV41oYwLCA9RYuDVfAJmUorgD5OcCyPZpWkfsUwP+YdG7npHW/uhizIQgh
H8AcEeXcU95rvyIxjOW7QxfACqy2ejIMHsCydXIAFOxBv7+exJ0uWi7AOBy+
f4T1Fr7x+8c27G40wNatmqA2VVrAvek/tvCpcb4rhx3BXokwwH/LQBASNVjA
O7Y8lZ+8R8AcAlrSg7cpwKHj/gQ/2MW+ilEREmpe/r5KwsliKuYkwLEmVdbA
EFfA2pB+yA==
     "], 
    "CountMatrix" -> {{14, 0, 0, 0}, {0, 7, 1, 0}, {0, 0, 9, 0}}, 
    "IndicesMatrix" -> {{{1, 4, 5, 6, 7, 13, 16, 17, 18, 23, 24, 28, 29, 
       31}, {}, {}, {}}, {{}, {10, 11, 15, 19, 22, 26, 27}, {
       25}, {}}, {{}, {}, {2, 3, 8, 9, 12, 14, 20, 21, 30}, {}}}, 
    "ExtendedClasses" -> {"setosa", "versicolor", "virginica"}, "Weights" -> 
    SparseArray[Automatic, {31}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.000060551944771844014`, "SingleEvaluationTime" -> 
    0.001478195841562084`2., "Version" -> {11.3, 0}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.765012251489217*^9, {3.765012300648065*^9, 3.7650123262656813`*^9}, 
   3.765012611309931*^9, {3.76501271449102*^9, 3.7650128060039587`*^9}, {
   3.7650181546669636`*^9, 3.765018177589035*^9}, {3.7650183451058536`*^9, 
   3.765018382793623*^9}, 3.7650184182469997`*^9},
 CellLabel->"Out[59]=",ExpressionUUID->"a566bc2a-24f2-4f0e-9e98-8b78468de718"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Accuracy and Confusion Matrix", "Subsubsection",
 CellChangeTimes->{{3.7650122576923447`*^9, 
  3.7650122680454597`*^9}},ExpressionUUID->"d09689fa-f4ca-46b0-9095-\
c293ef91a885"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"cm", "[", "\"\<Accuracy\>\"", "]"}], "\[IndentingNewLine]", 
 RowBox[{"cm", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.765012273432444*^9, 3.7650122737310343`*^9}},
 CellLabel->"In[60]:=",ExpressionUUID->"9173e202-ef4d-4cac-a243-17b0f3b8ddcb"],

Cell[BoxData["0.967741935483871`"], "Output",
 CellChangeTimes->{{3.7650122743861227`*^9, 3.76501232841954*^9}, 
   3.765012613236661*^9, {3.76501271696938*^9, 3.7650128073382683`*^9}, {
   3.7650181574951286`*^9, 3.7650181792296844`*^9}, 3.765018419934514*^9},
 CellLabel->"Out[60]=",ExpressionUUID->"178c19ca-40a6-4ed6-b9ef-b83f79feefd1"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{1., 1., 1.}, {1., 1., 1.}, {0.8727215581283123, 
   0.5464351221297558, 0.0063368375048964195`}}, {{1., 1., 1.}, {0.8867475, 
   0.6747384999999999, 0.234897555}, {0.9360886438282896, 0.8769398034452138, 
   0.6872946218373447}}, {{1., 0.42, 0.}, {1., 1., 1.}, {1., 1., 1.}}}, {{0, 
   0}, {3, 3}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["14", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "14", "\" examples of \"", "\"setosa\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{14, " examples of ", "setosa", " correctly classified"}], 
         Row[{"Precision = ", 1.}], 
         Row[{"Recall = ", 1.}], 
         Row[{"FScore = ", 1.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"versicolor\"", 
             "\" misclassified as \"", "\"setosa\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          0, " example of ", "versicolor", " misclassified as ", "setosa"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"virginica\"", 
             "\" misclassified as \"", "\"setosa\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          0, " example of ", "virginica", " misclassified as ", "setosa"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"setosa\"", "\" misclassified as \"", 
             "\"versicolor\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          0, " example of ", "setosa", " misclassified as ", "versicolor"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["7", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "7", "\" examples of \"", "\"versicolor\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.875`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.9333333333333333`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{7, " examples of ", "versicolor", " correctly classified"}], 
         Row[{"Precision = ", 1.}], 
         Row[{"Recall = ", 0.875}], 
         Row[{"FScore = ", 0.9333333333333333}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"virginica\"", 
             "\" misclassified as \"", "\"versicolor\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          0, " example of ", "virginica", " misclassified as ", 
           "versicolor"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"setosa\"", "\" misclassified as \"", 
             "\"virginica\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          0, " example of ", "setosa", " misclassified as ", "virginica"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           TemplateBox[{
            "1", "\" example of \"", "\"versicolor\"", 
             "\" misclassified as \"", "\"virginica\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.1`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.125`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          1, " example of ", "versicolor", " misclassified as ", 
           "virginica"}], 
         Row[{"Column fraction = ", 0.1}], 
         Row[{"Row fraction = ", 0.125}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["9", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "9", "\" examples of \"", "\"virginica\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.9`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.9473684210526315`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{9, " examples of ", "virginica", " correctly classified"}], 
         Row[{"Precision = ", 0.9}], 
         Row[{"Recall = ", 1.}], 
         Row[{"FScore = ", 0.9473684210526315}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "14", "\" example\"", "\"s\"", "\" of class \"", "\"setosa\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{14, " example", "s", " of class ", "setosa"}], 
        Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "8", "\" example\"", "\"s\"", "\" of class \"", "\"versicolor\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.875`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{8, " example", "s", " of class ", "versicolor"}], 
        Row[{"Recall = ", 0.875}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "9", "\" example\"", "\"s\"", "\" of class \"", "\"virginica\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{9, " example", "s", " of class ", "virginica"}], 
        Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "14", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"setosa\""}, "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{14, " example", "s", " classified as ", "setosa"}], 
        Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "7", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"versicolor\""}, "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{7, " example", "s", " classified as ", "versicolor"}], 
        Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "10", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"virginica\""}, "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.9`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{10, " example", "s", " classified as ", "virginica"}], 
        Row[{"Precision = ", 0.9}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{2.5, 
       FormBox[
        RotationBox["\"setosa\"", BoxRotation -> 0.], TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"versicolor\"", BoxRotation -> 0.], TraditionalForm]}, {
      0.5, 
       FormBox[
        RotationBox["\"virginica\"", BoxRotation -> 0.], 
        TraditionalForm]}}, {{2.5, 
       FormBox["14", TraditionalForm]}, {1.5, 
       FormBox["8", TraditionalForm]}, {0.5, 
       FormBox["9", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["14", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["7", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["10", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"setosa\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"versicolor\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["\"virginica\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{{3.7650122743861227`*^9, 3.76501232841954*^9}, 
   3.765012613236661*^9, {3.76501271696938*^9, 3.7650128073382683`*^9}, {
   3.7650181574951286`*^9, 3.7650181792296844`*^9}, 3.7650184200751514`*^9},
 CellLabel->"Out[61]=",ExpressionUUID->"f5b79300-5767-4820-a003-a79959814baa"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"fbe4093a-d6c3-4c7c-844c-9d5349e74110"],

Cell[CellGroupData[{

Cell[" IAPWS IF-97 Standard for Steam", "Section",
 CellChangeTimes->{
  3.483202458955147*^9, {3.514308863196991*^9, 3.5143088633311243`*^9}, {
   3.7650185382164884`*^9, 3.765018569763506*^9}, {3.76501921112289*^9, 
   3.765019226044768*^9}},ExpressionUUID->"de625789-4f17-4bae-862d-\
ce8b5c1fca5b"],

Cell["\<\
There are many standards for thermodynamic properties of water:\
\>", "Text",
 CellChangeTimes->{{3.7650185750447435`*^9, 
  3.7650185938104897`*^9}},ExpressionUUID->"2d6ffbb9-7c05-43e6-9095-\
62a4829f3be0"],

Cell[CellGroupData[{

Cell["NIST (Wolfram Alpha uses this as one of it\[CloseCurlyQuote]s data \
sources)", "Item",
 CellChangeTimes->{{3.7650185973573556`*^9, 3.7650186134511766`*^9}, {
  3.7650190837015753`*^9, 
  3.765019088420326*^9}},ExpressionUUID->"78fb91ff-876b-4dab-8c81-\
4542c52d83b7"],

Cell[TextData[StyleBox["IAPWS IF97 (Revision 7, 2007)",
 FontColor->RGBColor[1, 0, 0]]], "Item",
 CellChangeTimes->{{3.7650185973573556`*^9, 3.765018619623108*^9}, {
  3.765018651821469*^9, 
  3.765018678946585*^9}},ExpressionUUID->"07766ea4-e810-49bb-b7d3-\
1500643a8f07"],

Cell[CellGroupData[{

Cell[TextData[{
 "Decisions are made based on ",
 StyleBox["(P,T) combination and the appropriate region",
  FontWeight->"Bold"],
 " specific equation of state is evaluated for Gibbs free energy"
}], "Subitem",
 CellChangeTimes->{{3.7650187678103313`*^9, 
  3.7650187997009983`*^9}},ExpressionUUID->"2c82a933-4e00-49b0-b7e8-\
6b11e9d9a97f"],

Cell["\<\
Once the Gibbs free energy is evaluated numerically, appropriate \
transformations are used to evaluate thermodynamic properties such as \
specific enthalpy, specific entropy, ...\
\>", "Subitem",
 CellChangeTimes->{{3.7650187678103313`*^9, 
  3.7650188436542587`*^9}},ExpressionUUID->"02a4972b-a617-4fa1-90b1-\
a37bd0725a5e"],

Cell[TextData[{
 StyleBox["In this demonstration, I will focus on ",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox["specific enthalpy of water",
  FontWeight->"Bold",
  FontColor->RGBColor[0, 0, 1]]
}], "Subitem",
 CellChangeTimes->{{3.7650187678103313`*^9, 
  3.765018854154281*^9}},ExpressionUUID->"aef9e5e5-0a32-42d8-a057-\
1b7d57728886"]
}, Open  ]]
}, Open  ]],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzs3Xtcz/fj//85RiclFeu8pDWdlJxLKKeck+aYDTk0OX0m3mZzCGEOm4XM
+TRyaogUhrzfOUYImS10YKVY6aDTvvdfr99aq9TrlZeePV/u1z9ceL2er+fr
8TzuedvrZPL5tCHedT/44INZjfDHkM/8us2c+dlcdw38w8N31uSJvhPG9/H9
vwkTJ8zs8Hk93BiDaa/W/+CD/+/vfxERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
EREREREREREREREprvv37wcFBWVnZws9ECIiIiIiIhKx/Pz869evL1q06OXL
lwUFBUIPh4iIiIiIiMTqzz//PHz4sIuLS3x8PF/EJCIiIiIiomqLi4v79ttv
P/zww3379t29e1fo4RAREREREZFYnT17dtasWSoqKv7+/ufPnxd6OERERERE
RCRWmzZtGjp06AcffDB69Ojg4GChh0NERERERERiNX78eCsrKwRmmzZt1q5d
K/RwiIiIiIiISHzy8vLS09MHDRpkamraqFEjY2Pj2bNn//7770VFRUIPjYiI
iIiI6F3Jz89//fp1VlYWmqiSn9IoLCzElNml4FHS/PQGpsGUpR+IJ8LcSk+D
7MJk2VXJKYa5YSRl5lDbZGZmPnjwwNHRUU9PT1NTU0NDY+TIkadOnarlwyYi
IiIiInobx44dmzNnzkcffbR27dqoqKg3TRYTE7Nz5057e3tEU/fu3fGXxYsX
R0REVDn/S5cuBQQEYPouXbq4FAsMDLx9+3bpaZBj58+fd6lK//79PT09/fz8
9u/ff+vWLTks/DsTHx8fFBTUvHnzhg0bIjDr1KmD9Yb1wF/DJCIiIiIiBbZ6
9eoBAwaoq6tv3rz5zp07b5rsf//737ffftusWTMjIyNTU1P8ZeDAgStWrKhy
/iEhIR4eHpjewMDAzMxMT0/vm2++uXLlSulpUlNTjx49alYMqav3BpKntrGx
6du376RJky5cuJCSkiKHVfAOoH+nT5/+4YcfqqmpITBVVFRsbW29vLzy8/OF
HhoREREREZH8FRUV5eXlTZs2De3TqFGjgwcPJiQkvGnic+fOLVy48IMPPlBW
Vm7SpEm9evVat249YcKEgoKCSj5XmJubGxQUZG1tjenxQA0NDfxlxowZFy9e
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
U547d670j5i8CXIvNjb2k08+Qc317t0bZfemX5wso8LARORiDpLIVVNTO3bs
WExMTHh4eMuWLdGSWISSeq2xwAwKCvLw8MA4raysBgwY8OWXX27cuHH79u0/
/fTTtWvXHjx48OjRI5Rmu3bt+CU/RERERESk8P7880/kmOQtplpaWm8KTERZ
QECAqakppnFxcZHy5Uvk1dGjRzFntJWPj4/0o6owMCVKfioF49m2bRv+bNq0
qYWFhbe3d8n3ytZYYI4ZMwbzwWAWL15c4e97Iqj5LbJERERERPSeSEpKQhl9
+OGHysrKDRo0QNZdu3atzDTPnz8/e/asg4ODmpqatbX1nj17pHn58q/iXz9Z
sGBBvXr1hg4dumHDBulHVUlgbt26dcSIEbhr0KBB6Dv8qaKi4urqeuDAgZIv
v62xwHR3dzcwMFBXV9+/f3/57y968uTJL7/8ghzGNKhgBiYRERERESm2X3/9
dd++fVpaWqqqqgilzz//PDg4uOQHHwsLCzMyMs6cObN06VJtbW1Emaen5507
dyQfdawSom/8+PFInqlTp4aGhko/qkoCMzw8fM6cOQ0bNmzTpk2HDh3wJyoS
yRkdHV1QUCCZpsYCE89ramqKwl2yZMnx48fj4+NTU1OfF7t+/frOnTtnz56N
9YbVyy/5ISIiIiIihYcOCggIUFJS0tDQ+KgYmujcuXOSe/Py8hBrX375Zbt2
7VAu/fr1++6776Sf+caNG1FweOCKFSvu3bsn/QMrCcy4uLhNmzZplmJsbIyw
Sk9PLyoqkkxTY4Hp4+NjbW2NcXbq1OmLL75Am1++fPlaMVRw9+7dsVZxr7Ky
MgOTiIiIiIgUXnh4+PDhw+vXr+/k5LRgwYIZM2aglbS0tIYU69u3L/JNTU2t
efPmXl5e0dHRUr52idZ78eIF+ktXVxdzOH78eMnLi9JA4WIwFQYm5oOSatOm
jYqKSp1ivXr1Wr9+fUld/lUcmFgQ1CXunT59evnA3LdvX9OmTRs0aIClfpvA
vHDhwtdff42KbNiwYaNGjVRVVQ0MDLDITZo0ady4MaLSzMzM19e3ffv2ko+4
oprv379fveeqEgOTiIiIiIiE9fPPP7u6uiLWhg0btn///lOnTs2aNQuN2aVL
F2SRnZ3dJ598ggm8vb1DQkJSU1OlnC0y8Pfff0fc2djYuLu7R0VFyTSqS5cu
rV271sTEpHPnzuPHjy9zb2xsLG60trY2KTZz5kwsRekJkpKSli5digjFvYsW
Lbp69Wrpe58/f37ixAksWsuWLbHUkZGRUlZzeQkJCaGhoePGjcNzmZqatmjR
wuRvHTt2HDt27LJlyySrtGvXrliTCMwbN25U77mqxMAkIiIiIiIBFRUVISqR
WlpaWl988UV0dDRuPHnypJ+fH8rO1tYWEefm5oYs+uWXX2Sac35+Pub29ddf
Dx06FL1T/gtwKnf79u29e/fiqb28vBYsWFDmXvTjli1bRo4c6VZs+/btkpGX
ePHiBW4cMWIE7g0KCrpz507pezMzMxGwePiAAQNmz56Nx0r54ykVSklJOXv2
7OTJkzG3TsW6d++O5/3qq6/CwsIwEkxz9OhRPBFuXL9+/ZUrV6r9XJVjYBIR
ERERkYB+++23gIAATU1NExMTf3//Mt8Nm5WV9fLlS6HGJjqo1PRi1X7D7Vti
YBIRERERkYB++eWXmTNnKikptW3b9ocffijzQl5+fn7JD39QlQoKCnKLYb0J
MgAGJhERERERCWjnzp1eXl5IEldX1x07dgg9HHorDEwiIiIiIhKQn58f0hJJ
8tlnn4WEhAg9HHorDEwiIiIiIhKQu7u7ra0tkmTx4sUXLlwQejj0VhiYRERE
REQkoGHDhjk7O5uamu7evfv27dtCD4feCgOTiIiIiIgEFPC3uLi4tLQ0oYdD
b4WBSUREREREAvrjb7m5uQUFBUIPh94KA5OIiIiIiIjkgoFJREREREREcsHA
JCIiIiIiIrlgYBIREREREZFcMDCJiIiIiIhILhiYREREREREJBcMTCIiIiIi
IpILBiYRERERERHJBQOTiIiIiIiI5IKBSURERERERHLBwCQiIiIiIiK5YGAS
ERERERGRXDAwiYiIiIiISC4YmERERERERCQXDEwiIiIiIiKSCwYmERERERER
yQUDk4iIiIiIiOSCgUlERERERERywcAkIiIiIiIiuWBgEhERERERkVwwMImI
iIiIiEguGJhEREREREQkFwxMIiIiIiIikgsGJhEREREREckFA5OIiIiIiIjk
goFJREREREREcsHAJCIiIiIiIrlgYBIREREREZFcMDCJiIiIiIhILhiYRERE
REREJBcMTCIiIiIiIpILBiYRERERERHJBQOTiIiIiIiI5IKBSURERERERHLB
wCQiIiIiIiK5YGASERERERGRXDAwiYiIiIiISC4YmERERERERCQXDEwiIiIi
IiKSCwYmERERERERyQUDk4iIiIiIiOSCgUlERERERERywcAkIiIiIiIiuWBg
EhERERER1TZFRUUFBQWFhYX4izQTY8qCv0n/qOo9sBIMTCIiIiIiolrl6dOn
165dmzhx4p49e+Lj4yufOCMj4/79+8HBwdOnT/cuFhgYeO7cufT09Cqf5dKl
SwEBAVOnTvXx8fHz8/v5559jY2PfZuQMTCIiIiIiololMjLy66+/trS09Pf3
v3v37psmKygoyMrK2rlz5+zZs3v37m1jY9O6WNeuXUeMGDF37txHjx79+eef
5R+YnZ0dHR2NmY8aNapTp07Wxezs7Nzc3BCbW7ZsycnJqd7IGZhERERERES1
geQNqykpKUFBQZ07d65Xr56vr29MTMybpkddPnjwAJGIqGzcuLGOjk7zYqqq
qlpaWoaGhidOnHj48CHmWfpR+fn5ycnJ69evb9eunaampoaGBh7SokWLZs2a
KSkpGRkZ9e3bF2WKmVdjERiYREREREREtUFubm56evrYsWOtra3RaKi/r776
qpK3yN6+fdvDw6Np06ZISxcXl+Dg4Ihio0ePlszBzs4uMDDwxYsXpR/1+++/
79+/X7MYytTPzy88PPz06dOo2rZt22pra+OBU6dOPX78eDUWgYFJREREREQk
uMePH4eEhPj6+pqYmDRr1kxVVbXywExOTkZR6unpffLJJ15eXhcvXkxMTEwp
du3atYCAgE6dOmloaPj4+ERGRpZ+YFhYGKKyQYMGvXv3/uabb+7cufPHH3/g
UXiiHTt2eHt76+rq4rFr1qzJzMyUdSkYmERERERERALKzc1F3+3duxd12bp1
azMzMzSmgYFB5YF59epVVCRSrmfPnqtXry5z75kzZzC3OnXqDBo0aNu2baXv
+vHHH4cOHVq/fv0vv/wSsVn6rt9//33Tpk3t27fX19efOXMm/inrl8oyMImI
iIiIiASUkJAQHBysq6urpKSEqFyzZg3izsXFpfLA3Lx586effoqUmzt3bnh4
eJl7Hz16FBERUbduXQcHB5Rm6bv+85//WFlZYeYhISEZGRllHohu9fPzU1ZW
7t+/P0bFwCQiIiIiIhKRBw8eICq7d+8+adKkY8eOJScn7969e8iQIZUH5vLl
yxGhSLmgoKDyvy2SmZmZmJhoYGCAluzdu7fkxoKCAtzo5eWlr69vaWl5/vx5
3FJ+MNu3b1dTU3N2dsaoynxBUJUYmERERERERAJC9B08eHDlypWHDh36448/
0HSHDx8eOHBg5YE5b968Dh06NGzYEI9NSkoqc29eXt6rV68++eQTc3NzOzu7
169foyXxZ0xMzKBBg3R0dFxdXa9evVp+tpKPgqqrq2PmeHYGJhERERERkYig
+9LT00un3P79+6t8i6yPjw/6EdOcO3cOLVnhNA4ODpKPc2L+ubm5OTk5ERER
3bp109LS8vb2vnPnTvmHoFUxTZMmTaytrTFN+Zc4K8fAJCIiIiIiEpDk5y9L
3yJNYI4dO9bU1NTY2DgyMlKOgZmamnrlyhUjIyMbGxtPT09ZAzMsLGzKlCkI
THd3d5TmOtlhqDI9Y4lff/01JCRkApHYTJ06FQeL0KMgOZg1axa2ptCjoLKw
UebMmfPo0aPyXztARET0npAmML28vD4qJvfAvHbtGrrV1tbWw8ND1sCUJB4C
s0OHDoMHD548efJnUhs3bhymxzVAXl6eTE8q8b///e/bb7+1trbGsEcTiYST
k1OnTp1wvGC/HT58uNDDoWoaMWIEtmDHjh2xNbFNhR4O/QPbpW/fvvhPamxs
bFpaWjX+40JERKQAxBuYGDkGhsDE87Zt27ZXr17t27dvJ53OnTtjeozqTYtT
uZ9//tnHx6dOnTqenp6TiUSiZcuWONLr16//6aeffvbZZ0IPh6oJ2w5nngYN
GmhoaJiamgo9HPoHjiz8x6h58+b4T9sff/xRjf+4EBERKQDxBqaAn8FEYP7n
P/+xt7f/7bffavJ5id5G7969P/nkEz09PclBKvRwqJoSEhJwdlVRUfn444+H
DRsm9HDoHziyli1bhu3CwCQioveZNIE5depUa2vr5s2bnz9/vpLAbFVMcu0K
CMC+ffviavZNgfns2bMLFy7o6ura2NigYcUVmH5+fhYWFg8fPqzJ5yV6GyWB
mZiYWL3X7qk2+PXXX/ft26esrGxlZTV27Fihh0P/SEpKWrRoEQOTiIjec9IE
5rx58zp27NikSZPTp0//+eefZe4tLCzMz89v06YNrl3x58uXL18Xu3nzpru7
u7GxMS6Bbt26VX62CQkJJ0+exGxtbW2nTJkirsD88ssvP/roI1zp1eTzEr0N
SWB++OGHv/32W/kDmcTizp07gYGBjRs3trOz8/HxEXo49I/ff//9m2++YWAS
EdF7TprAXLt2bb9+/ZByO3bsKP+mUBQlbtTS0rK0tBwwYIDkRlRnenr6mDFj
dHV17e3tKwzA+/fvBwUFqampOTo6BgQEiOh3MBmYJEYMTMVw6dIlPz8/JSUl
Z2fn5cuXCz0c+gcDk4iI6C/pAhNdOXr0aKTc0qVLkXVl7k1KSkLf4WrHzs5u
/PjxkhuLiory8vJmzJjRqlUrfX39w4cPl/9NkCtXrsyePVtZWbl///4HDhzA
Q2QaOQOTSCYMTMUQGRnp4+PTsGFDNze37du3Cz0c+gcDk4iI6C/pAvPkyZPo
qfr1648bN27Xrl2ZmZklrzbm5+ffuHHjxx9/rFu3rpOT0/z580s/cNmyZV26
dFFTU1u5cuX169dL34XeDAkJGTJkiLq6+pgxY6KiohiYRO8UA1MxnDlzBudM
BCbOn4cPHxZ6OPQPBiYREdFf0gVmcnLyvn37MI2hoeHw4cPxn86Sr6B88eJF
UFCQvb19nTp1cNeRI0dKPxAhNm3aNDSgo6PjggULSt+FaMVdmKeJicnXX39d
/vXNKjEwiWTCwFQMx44dw0lb8nMzERERQg+H/sHAJCIi+ku6wMzLy4uOjh46
dKiurq6enp6rq2tAQMC6YmPGjGnXrp2KikqPHj02b95cphNxHRscHIyHNGvW
DP/N9fHxCQwM3Lhx49KlS5GcRkZGuEaaPXt2WFhYfn6+rCNnYBLJhIGpADIz
M/fs2dO+fXsNDY0vvvji7t27Qo+I/sHAJCIi+uvvwEQhIvTi4uLeNFliYiLa
EC1pYGCgr6/fq1evAcXMzMyMjY0NDQ2XL18eFRVV5lEvX75EmXp6emKy5s2b
W1paDhw4cMiQIahR/BOzsrGxQaw9ePCgGiNnYBLJhIGpAFJTUzdv3mxlZYVT
qJ+fX0JCgtAjon8wMImIiP76OzCRaT4+Pjdu3HjTZPn5+enp6aiqrl27ampq
1q1b94O/mZube3h4PH/+PCcnp/wDMzIyIiIihg8f3qpVqw9KUVdXx6wCAgKy
srKqN3IGJpFMGJgK4PHjx999991HxRYtWlSNDxfQu8PAJCIigmfPnkVHR4eF
haGV8vLyKpmysLAQtYhL0/DwcFzhrCh2/PjxmJgYXOTg3gq/pQc35ubmJiYm
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
Xh6WpX///g4ODk5OTgjn8i++/8XAJCIiev8wMKVUk4Hp5uZmXwzXZu/uWaqU
m5uLSIyOjr5WypUrV4KDg9E7uFzE9TmunK+Vc+/ePTyw/CtxkJiYeO7cOVyy
Yg7Lly+v8HkVPjAPHjyIoqxXrx72qBMnTlQyJfY6rE/0uKWlpZ+fn5SfLnwX
UH/lN/TChQvt7OywNb29vQ8dOlTmXqQlVlHlr7/jOHrw4IHkf0qMGzeuzL3S
BCbOWkuXLsWaR8wi26VfopoJTBzCGCHOcr169ZJpeO/C06dP4+LiymymsLAw
rFs0ZqtWrbBD4gAvv6GfPHnypg8IY+kk/wVZuXJlhf8FYWASERG9bxiYUqqZ
wESb4LrXzMysa9euuMRC4r2LZ5ESCvH169dp//bs2TMEJq6WtbS0JkyY8Msv
v6SVg2tRPLDCT8NlZWXhYhUPd3R0REfjSrJ8RCt8YOJYQ9o0bNgQ1+To90qm
vH///oIFC7S1tZ2dnVFw1X6zdHZ2NnZgXKtXWP3SwMPLbGVsx2XLlkneRbl6
9erHjx+XmSA9PT0zM7Py77TBfoI5DxkyBIFpbW19586d0i98SxOYp0+fRiFi
zWMm27dvl36JaiYwz58/7+/vr6qqOnfu3PDw8Hf0LFLCboA9tsxmunTpEjYf
RtipUyfsbKmpqeWPaBy2Fb46+VfxJzGx2rGB+vbt+/3332MfK3PgMzCJiIje
NwxMKckUmLjEwnU1psG1GS7YcHlW8msj+AuyEbeUv/DGLdevX8fmwEXvoEGD
Tp48WeVvlEieKKcY/iL5J2aOS3HJFT7mUO2mqBAGj+tJ9I6mpubChQvLv62x
SrjK9fPz69ChQ8uWLcPCwsq/UVZRA1NyeY/9YerUqegpZWVlrElscewnGRkZ
5S/gcUtkZCSeTldX19PT8+7du7L+Zg122uTkZBxfV65cOXfuXGhoKAoOV+/P
nj17+28KwkwWL16sr6+PMMHiV3s+2D/RHY6Ojurq6phP6daTJjDRiWPGjMGa
Hzt2LA4Z6Z9XpsDEtsDmSy+GjVX610bQyLnFyjwEE+DGwMBAlK+amhq2NRq8
ylFhbWArlz5jYCbodOw2kqeWHObSL2aVsAficMPeiD0Ng6zG6QK7Fg5VExOT
yZMn4+BlYBIREb3nGJhSkikwJW8uPXToEPpo06ZNmB5X45K7UlJSHjx4UOEc
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
q1f/Twn4ui/9yLkmCgoKPn78iJw2LS0NCcPLly/xQWTs+ixDT8GUndDQ0EGD
BuEU7N69W/vlHh0EMyEhYfr06SYmJnBYLRNjbtu2TRGDSJUrLi5GPEFBQba2
ttbW1mfPnlXNWt+8eYN0t1GjRg4ODj4+PviIpFmOKZjGSHp6ur+/v5WVVZs2
bXbt2iV14Ru5OHny5PDhw+vUqbNo0aLbt29r2VIhmGiccNIyr2BifBZ6CoQU
PeXGjRuaruMjBnSTn376CZ4o6XceDKRdunRBT4mIiFBdBgsRJiYm2tvb44yM
GDEiMzNT/JRZaOEhISGInIJJSNWBgkmIUQM3/FyC1LVFYJq6fVAVCqbsLFu2
DMlh7dq1jx8/rn0dLh0EMyYmZty4cdWqVVu1atXNmzdVN4D0oR0ihq5duyKG
6OhokfN4IEdFHjh+/HjkzG5ubkibVe/Tfvbs2ZEjR+rVq4ew586dK6bY0lAw
jQ60Cpz07t27CxfL4uPjxd+NKSMYSHfu3NmnT5+6detu2rRJ++88CsF0cnKa
N29emYKJOoF0jx49Go0ZPR2Fa1rodvPmzb169YLkbtu27eHDh+LjDwgIQB9E
/71+/bpq/8W4cfXqVcGIp02bhi8OTfNUqwIX3r59O/ovBZOQqgMFkxCiJxRM
eUFmKywRgvzt4sWL2rMpJIoeHh6CYCJ1F5N6Qc2GDRsGwdy3b5/atLmoqOjd
u3dTp05FDGZmZpBQkZOWQCfv3LkzdOhQBNOvXz/V+2NBUlLSxo0bkTB7eXkh
eRZTbGkUgnnw4EEKplGQl5cHKWjTpk2zZs1w0mEKRvFME7rh4sWLO3XqVL9+
/fDwcO0P/OLdkJAQdFgYND5V5i2y6CkY4pCqYazz9fV9/vy5phgwFKDMevXq
RUdHi1/zHR/08fFxdnZGSChcdR3bjIyM2NhY9CNIKEZ7kcUK4ISGhYVh2EHh
M2bMoGASUhWgYBJC9ISCKSPIPJFGent7w9Hc3d3LXHZEsUxJ06ZNIYxiJlbF
t0PHjh21CCYU6dKlS+3bt4cRIPsVP1krPDQyMtLT07N58+bBwcFqTyJKRpm1
atUaPXo0/hZZsoLhw4dbW1ujcV65cuX169dSP15BUDC1kJiYuH37dpyyLl26
KK1mXpmBo6Ghurq6tmrVClKjfZJVxTIlgjCW+YNMTk4OtndxccFHNAkmNByb
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
KJiEEJFQMAlRCgkF88OHDzt27DA0NFRRUVmyZMn9+/dLS0vLysoasg6E1DcU
TBkNJpgFBQWJiYlIBjZt2vT06VP8t/72JZ+cnJybN2/a29vr6Oj0/G+MjY1N
TEzwb8/qQCtNmzYNR1FUVFS1WKQZwcHBGLrXr19fU6pDwZRBwSSEiISCSYhS
SCKYJSUlhYWFx44dc3V17dSp05AhQw4cOJCUlNQweyekIaFgymgwwcRgguHF
xcUFQhEVFVWtozUM2dnZN27cgGCiA/T5b3r16qWhoaGmpqanp4c2qbTUyspq
yZIlaWlpP378qFosOtKbN28wdE+aNGnz5s0YTjGoVlqHgimDgkkIEQkFkxCl
kEQwke9lZGTALoX3gK9duzY8PLxhdk1IA0PBlNFggommdnZ2trW1XbNmDYaa
0tLS+tuXfCCY9+7dc60OtAMcs0ePHqjqhAkTKi1dsGDB3r175RcOY4KHmpub
V/twAQVTBgWTECISCiYhSiGJYEZGRnp7e3fp0kVTU9Pa2prPXZJmDAVTRsMI
5s2bN1evXo00AFb17t27etqLUpRVx8iRI01NTXV1dePj47OysqpdR36x6FEr
V67EKIrh9Pnz55WWUjBlUDAJISKhYBKiFA0vmLGxsceOHRs2bFj37t0dHR19
fX2rvQeMkOYBBVNGfQsmRpK0tDQvL68RI0b06dPn3r17379/r/O9iAf1zM/P
x8BrbGxsaWkJu6zdTbwpKSlIdezs7DCcnjp16tu3bxWXUjBlUDAJISKhYBKi
FA0pmGVlZcisrly5smzZMtilnp6eh4dHVFQUJ/YhzRgKpgxlBbO0tLSwsDCv
HBiZbBIwfMBIUlxcXGlaMKzz7t274cOHGxgYuLi4YExTpFbCuIT6YADEjv4u
nyMoOzsbcpqamop/sUjYV22PuzLYC3qCqqqqkZERaiumKAynM2fOxHDq7e39
8uXLiosomDIomIQQkVAwCVGKhhRMpFXYi6Ojo4aGBoJ09+7dCNh63SMhkkPB
lKGsYKakpISHh588efL06dOBgYHQPSgkvs/IyIiPj3/z5k2lZw+TkpK8vLz0
9fUtLCywPpYqUiuMSyjN3d1906ZN2NHf5TfZbtu2TXiKE/9iUWRkZB3+GPr5
82ccV+vWrc3NzefNmyemqOjo6DNnzmA4HTVqlK+vb8VFFEwZFExCiEgomIQo
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
jPy7imCi5NjYWA8PD+GddBVBhjxr1iyEVUpKSt0fNiHNFAqmDJlgQnya33OR
jQ0KpgwKJiFEJBRM0tjIzs5W6m5S6FtYWBi0UVtb28DAwN7eHnlp1Zl8vn79
it6urq6uq6trZWWVmZlZWFj408IfPXq0Zs2atm3bbtu2TXh4s5Jgoqpnzpxx
dnauZJfYxezZs8+ePSubHYgQoggUTBmCYGLI2r59exypZ+7evbt161YK5t8U
TEKIaCiYpLHx8eNHuJtSmyQkJLi6uvbs2RNmB9dDCTWtaWtra2hoCBVF7pqa
mvrTkmNiYnbs2IFiPT09b968+XcVwUQh2GPv3r0rCebGjRuRrih1FISQvymY
FRAEE+PJ5MmT/y+pZ1avXj1+/HgK5t8UTEKIaCiYpPGQlpZ269atOXPmbN68
OSsrS/GZDNPT00+dOmVmZta1a9cBAwbACmtac+HChZaWlp06dTp9+rQcD61Y
8smTJw0MDJDmnTt37u//FsygoKANGzZ07NixW7duMrW0sLDApfnTp0/5+fkK
1p8QIoOCKUMQzNatW3fu3FmV1DMYxoXXWjk7OyMjkvrkSwkFkxAiEgomaTwk
JydD4oYOHbp48WJ8VvyZo9zc3OfPnw8fPrxHjx5GRkbo1TXN0g91FaaT3b17
9+vXr39ackFBwR9//GFqajpp0qQzZ878/b+C2bNnz8DAwLVr1yIVQWkQWzU1
NXyJKzICChUQppwlhCgLBVPGixcv9u3bN500LD4+PiEhIVKffCmhYBJCRELB
JI0HXNT8/f3Nzc2nTp36559/FhcXK7hhSUlJRkbGrFmz9PT0VFVVkRvUNK/O
sWPHxowZ065dOy8vLwU7PDqqtbX15MmTKwqmhoaGu7v7gAEDZH/9htuiM+/f
vx9ZsYLVJoRUhYIpIzMzEyPhf0jDEhcX18JnZqNgEkJEQsEkjYdaC6bAiRMn
3Nzc0Jk3bNhQ6TUlMq5cuQJVbN++Pa6ewqywP+XOnTvOzs5TpkypKJgwSrVy
BLvU0dEZMmQI1kxNTS0rK1Oq2oSQilAwK1JGpEDq0y4xFExCiEgomKTxkJyc
fPbsWSSWuK69evVKkVleK/LgwYNNmzZ17NjRxcXl4MGD+fn5VfOEAwcOjBw5
EutcvXpVwamEnjx5Mm/ePC8vr1u3bv1dQTBVy990CczMzNzd3f/9739//vy5
5Tx3iRMUHh6OZoyIiMCJk7o6pPlAwSREWiiYhBCRUDBJ4yE1NRXC0qdPHwcH
h9DQ0Jqeo6wJ5KVnzpzR1NQ0NTVdtmxZYmJixac4IZslJSW//vqrvb199+7d
o6Ki0tLSFCn2zZs327ZtO3369MuXL1GCs7MzUl/YJQqBXaqpqbm6ul6/fr3S
mzebMWhVePT+/fsxdMydOxcur8jTrIQoCAWTEGmhYBJCRELBJI2H7OxspJT2
5eDqlpGRoWwJkEEIYLdu3QwNDd3d3Stmp1lZWX/++SfstW/fvkOHDlW8zKKi
ItQEfiqUYGxs3KtXLxUVFUTN4MGDvby8lK1kUycmJsbf3799+/ZogdatW6PB
g4KCpK4UaT5QMAmRFgomIUQkFEzSeMjLy/v48eOgQYPMzc2XLl2qyHsqKwEB
3Lhx4z/+8Y/u3btbWlr6+PhcvHgxIiLi5s2b+/fvX7x4cdeuXf/1r3/5+voq
XmZpaSkcMzc39/79+xs2bIBdQmA7dOhgZ2eHqIHSKlvJJs2XL1+OHz/u5OSE
luzcuTP+dXFxQSxLXS/SfKBgEiItFExCiEgomKTxUFhYiOva8OHDTUxMcGlL
SEhQ/E0lAkhHAwMDTU1NO3XqpKqqCpdcvnz5vn371qxZM2HChD59+qC/4fPD
hw8VL1O4t/bt27e7du2ytbWFXcJeNTU1FZ+HtnkgtMOtW7dWrlwpmztXXV3d
1dUV/i517UjzgYJJiLRQMAkhIqFgksbGnDlzhIccHz16pOyPmBDSjIyM8ePH
6+rqogQHBwc7Ozv0MTU1NQMDA2tr60uXLn348EGpMoVbZKdMmWJsbPw/5ZiZ
maGSShXSDBDaASkHPJ2CSeoPCiYh0kLBJISIhIJJGhs7d+4cNWpUmzZtfH19
nz59qtS2ZWVlcMz169cPHjwYJSxduvTQoUP379+/evVqeHj469evYazKzh0U
FRWFmmhra3fv3r1r167QzLVr1yr1G2jzICYmBu3wj3/8o1u3bhRMUn9QMAmR
FgomIUQkFExST/z11185OTnKvssSnD9/fu7cueiT+Befa1HC8ePHp0+fjhIW
LlyIElANpKnZ2dnKlgM+fPiA0iC8nTt3hmDq6OhAWgMDA1ta3ovjvXbt2tix
Y6HYQjtQMEk9QcEkRFoomIQQkVAwST0RHR396dMnYf5VpTZ88eLF5s2bhTtR
f/vtt9qVgAQVJQwaNAgdW6ltK7Fp06Zhw4ahKBUVFeEmW+GgxJTZFLl79+7a
tWsFqdTX10c7qKmpUTBJfUDBJERaKJiEEJFQMEmdk5eXl5iYuG3bNj8/v7dv
35aUlCi1eVpa2oULF/T09LS0tObNm4cSlJ3qB3vHrrt37967d29cH/Hf0tJS
pUr4u/wXWDiys7MzvBJFQaacnJzgm4WFhbUorakD04dot27dWkdHB+3g6emp
oaFBwST1AQWTEGmhYBJCRELBJHXLn3/+ef/+/X379o0aNWrVqlWhoaHK3uNa
UFBw7949bK6mpgapOXToEL5RqoTMzEz0rgEDBvTs2XPatGmPHj1Stg4pKSnP
nj3bvn173759e/To0alTJ3t7e0RKWFiYsj+nNnWysrIiIyPHjRunr6+PgWLk
yJGwy+PHj0P/KZikPqBgEiItFExCiEgomKRuuXbt2q+//orT2rZtWwcHB39/
/8LCQmULiY6O9vLygr9oa2s7Ozv/9ddfypbw+vVrd3f37t27Dx48GHVQVlFf
vny5Z88eHAXssnPnzggQDw+PlqlR8fHxyDSg6sIMuuvXr79w4QIy/169elEw
SX1AwSREWiiYhBCRUDBJnZCcnBwWFjZjxgwYWYcOHaAeS5cuPX/+fFpaWi1+
8isqKvr+/Tv8VENDo1WrVlu2bHn06JFSJSAvvXv3rnY5o0aNysrKUnDDjIwM
4fdTfX19HMUvv/xibGy8ePHizMzMFnhnLDJ8iDbOKdpBT09vypQpqampKSkp
+L5jx4440RRMUudQMAmRFgomIUQkFMwWBVwvPT09Pj4+OjoazZ6TkyO+zPz8
/Hfv3h08eBAWhpwQGmJra7tq1SpIx4cPHwoKCmohmCUlJdhw8+bNTk5O6Jwj
RoxA/1Sqn2RnZ2PvqImurq6BgQEyVRjrT7eKjY29fv36/PnzcSCampoQTHt7
ew8Pjzt37sB5lT2KJg1sGmf20KFDkEqIpIqKirOzc0BAQG5u7tevX58+fdqh
HAomqXMomIRICwWTECISCmbzBnIHWSsuLoYX/PXXX2lpaa9evbp27RpMITg4
GKYgpnCUjGITEhJOnDgxfPhwbW3tzp07C0b2+PFjZe9Krcq9e/dWr14tvB/E
zc3t6tWrhYWFCk4ZhEPOysqC+xgZGbVu3TooKOjTp09y1hd86sqVK56ensJc
qT169NDR0Vm7dm1ISIjIA2mKoKk/f/48Y8YMQ0NDNKCJiQkyDXyD9v/y5Ut4
eDgFk9QTFExCpIWCSQgRCQWzeZOZmYlsDXkaLhaLFi1ydHSEOrVv375jx47O
zs5PnjypdckwuD///HPbtm24BglGZmZm5uXl9eHDB1hnXdX/5cuXKBO1VVFR
QVcJCwuDzyq+ub+//8yZM1E3yKl8wYR6Y2XYser/Ymdnh0ZLT08XewxNk9jY
WJgjLLtt27ZojZMnT0ZHRwuLKJikXqFgEiItFExCiEgomM2MgoICpGRPnz69
cuXKoUOHPDw8YFijR4/u16+fZTkODg4wwd69e1tYWAQFBdXulY6wD5y+JUuW
2Nra6ujoCEYGOzt37lxKSoqybxWRA7zvzZs3w4cPR4W7dOni5uYGDYTDKrh5
VFTUrVu3jhw58vnz5+zs7JpWi4yMDAgIcHJyEp67BOPHj/fx8Xn//n1LuzNW
AF5/8OBBPT299u3ba2trz507F2chMzNTWErBJPUKBZMQaaFgEkJEQsFs0pSV
lRUWFv7111/fv3/HFSEuLu7Vq1dQqm3btrm7u//rX//65z//aWBg0LNnT2Rr
gwcPnjBhgpeXF5QTMgVxOHr0aHx8vOK7gznm5+f/+eefZ8+e9fT0hI7plIOT
CNGAbP7xxx/18ZPf1q1bx44di6NAnefMmQMZxPEqcgtuTk4OFBUtU9P8PCUl
JViKdpg9e7agltgLBHznzp0PHjyo6+NoAqChYOJ+fn7Tp0/HsNC1a1d0m9On
T1f8QwQFk9QrFExCpIWCSQgRCQWzSQO7hO7dvn37xIkTMEdHR0cTExNYUuvW
rdu3b48PEEmok7e3N1I1pG3Cj1CPHz/evn07TvqaNWtgCorvDvIYExMDocBZ
wy5Q/vz582F/kFmon5aWFhahPvVxpKgzDrBVq1YdO3bs1auXv7//+/fvxReL
BkGx0PBffvlFEExra2sU3mLT2tzcXHSJkSNHQi3RQ9B/fH19K61DwST1CgWT
EGmhYBJCRELBbEKUlZVlZ2cjvY+Kirpw4YKPj8+yZctGjBjRr18/Y2NjXV1d
4Q7YSZMmbdiw4eDBg1euXHnz5s3Hjx+RsGHDgoIC4ebVz58/o/FhEFOnTj18
+LCCe0cJZ8+edXNz09DQ0NfXHzBgAHbx/Pnz2NjYGzduDBw4UE1NDWfzwYMH
tbvtVj5ZWVlQV8jsuHHj9PT0cLwzZ87cs2fP169f8/PzlS1NaMnr16+jB8Iu
ocbdunWDXXp4eFy8ePHbt2/FxcV1fgiNH/SQuLg4CCP6EkT+H//4x5EjR9CF
Kq1GwST1CgWTEGmhYBJCRELBbOQg58/MzIQSxsTEREREwImOHTu2c+fOuXPn
jhw5EpYH1TI3N7exsRk2bBh8c/Pmzb///jssLzo6Ojk5udpXhPz111+vXr3S
1taGnK5fv17BmuTk5KBkJyenPn36TJkyBRng27dvUbfCwsL4+Hh8gwK7dOkS
EBAApa3TNvj/QXc9cODAnDlzUAccO2QTu0O/TUhIyMvLU3yCWbQAnAg6aWtr
K0wYC2VGe16+fFmpe4abGZ8+fQoMDOzduzd0W0NDA8375MmTqn8uoGCSeoWC
SYi0UDAJISKhYDZyIImQQX9/f5ymSZMmobmEexeBlpYW1BLpPS4Ef/zxB5Ix
SJaCxSYlJVmXA1lTvDJXr15dunSpl5fXixcvKi1at26dlZUVagVrCw4OVrxM
ZcnPz0eboA6DBw8WbmqdN2+en5/fn3/+qeBPmcKNvjh2OJRwo6+Ojs7QoUMh
TWlpafVX88bPqVOnpk2bhpPYpUsXGxsbyGa1Lw+lYJJ6hYJJiLRQMAkhIqFg
NipgiMjeIyIiLl68uHHjRhilg4PDP//5T6hQz549dXV1hw0bNn/+/M2bN0Pi
nj9//vHjx5SUlMzMzJycnMLCwoq/VyYmJoaGhuK0Pn78uOqOIA6enp6mpqb9
+/ePjo7G5opULzc3NzU1FRaGfVVaFBQUtGzZMnQkaCaqV7vDx7HAlKGoM2bM
cHFx2bdvH0QmKyur4nEJb/ZEHVBtHODy5ctHjBjh6Oi4Y8cORR7/RIfftGnT
wIEDNTU11cqxsLDYv39/ZGQk/FTB30CbHwUFBWj5iRMn/uMf/xDeOnrkyBH0
imobBKfp5cuXHTt2pGCS+oCCSYi0UDAJISKhYEpIaWkpTA3penx8PAQHunT2
7FmM6qtXr541a9bw4cNtbGzs7OyGDBmCcR45/4oVKw4dOhQYGPjo0SP4I7xS
zkyqHz58OHHixJgxY3bt2lV1PhxY2+HDh/v162dkZARXhTaKPJbXr1/DB7t1
6wZDmTNnDs6p4o8xCnPhPnv2DBWGPqPOOGQzM7Np06ahksnJydXOAQv9wUUQ
ld+zZ8+2bdvwQX4uinZGI6PLjRo1CpVUVVVF30Pzbt26FT1f9g6OpgsaHP3h
r7/+QoslJCTExMS8ePHiyZMnd+7cCQkJiYiIwKKaWhJujpaHa0MY9fX1f/vt
Nzhjag2g5Nu3b8NDu3TpAkOfMGHC+fPnhUUZGRkK/rGCkJqgYBIiLRRMQohI
KJgS8uPHDyTkyPyvXr2KwXzSpElWVlYV54Dt37//1KlTvb29IZU4O58/f1a8
cBgfyuzQocPo0aOPHTtWaWl+fn54eLiDg4OOjg5WU6rkaoFWQGRwNlFze3t7
VDg3N1fBbUtKStAOa9asge7hqAeW83/KWblyJdxH/g+L2BHU6ad7gW3hSCFQ
qv8L9rJ06VLsunm87BLt8P37dzQXgvrGjRv+/v7I0j08PFxdXZEnwBmxqNpX
lH758iUsLExoE01NTWtr65MnT/6nZkJDQ1G4lpYW1odgOjs7HzhwQFj08eNH
lNbwx06aExRMQqSFgkkIEQkFs4GByj19+nTPnj3Lly93cXExMTHp1q1b27Zt
27Rpo6ura2NjM2XKlL179wYHB8fGxhYWFhYXF0MKSsuR3SmKz9CiyMjI69ev
b9y4ceHChT4+PvimoogJt5KOHz/e3Nwc1oCVU1JSZEuxKD09ffHixaampqNG
jYKNij+0T58+4YTCO3Ag06dPr7g7+aAD/Otf/0I9J0yY8Pz588zMTBw1pA+6
BHOsdp4ixUE5aBlUbMSIET169JBpFLo9TkS1wtVoSUxMhMHhVF69evXEiRO7
d+9esWIFmhppAKTewsLCpBxjY+N//vOftra2/y97Zx5WY97/8YeQNmulVGRU
ptK+iUSLBlG0oWwlMRPGMiMlDQmPDFK2SLK2EB5LUrSo31OYRFIxGqVpmTZK
CmF+76v7mnP1tBynUzmpz+sP1+mc+/5u93f5vNybsbEx+piLi8uWLVvOnz+P
dmjxDCYGPoY/JgEhISHGGcXExMRbR6wBlqdjezQs85OsrCy6EzLqmY/hJToE
EkyC4C0kmARBtBMSzE6ltra2vLw8IyMjLi4OEX5AQIC7u/uSJUsmT56M+F9T
UxNGCfGxsrJasWIF5vPAwEA447179549ewbPYrkVkw78IiEhAe4ZEhLi7e0N
cZg9ezbMQl9fH7s3EUwGbGZqaiogIABpRbKs75FyXV2dh4cH9oVjItnmt1W2
leLi4tOnTyMshGhoaGhkZmZychITnovGgZjMnz9/3759SITlJq9evSooKEDr
3b17FzEnF68jgeTevn0bOq+np4eeBhsaPnz4hAkTFi5cGB8fjzW0zZXsNCDC
zEW/qCks8s6dO7GxsZcvXz5z5szBgwcDGti0aZObm9vatWuXNODs7Iw+4OTk
tHjx4u+//x6RwPr167dt24b6+vv7Hz9+HPui112/fj05OTknJwdHvEVbx8DH
LizB5I5Bgwb1799fQkICVkuCSbQHEkyC4C0kmARBtBMSzA7kUwPMrXBwK4TZ
ubm50LqgoCConIODg5aW1ujRoxGEIxqXkZFRVVW1sbGBA8LLHjx4UFpaynoM
LHP+kUmnurqaSQemAMWATUydOhXpIKqHOYqIiCASg2hASJsLZlRUFLbv16+f
paUlXKPJCTs/Pz9zc3MUBtLa/pdXwo9QC+jb0KFDkWZMTExhYeFn94JKnzp1
Cj0QZgSrQhWgWnDJqqoqxJnQQ7Qe7BiqhT8bn8ZlD9JBIuje27dvV1dX79On
D9pKVFQUn11dXc+ePdvOyrYJpmOgSGh/1A4uj7LhWOPIopo4cGh8qDS8Eq59
5cqV0NBQHJqNGzeiqHZ2dpMnTzYwMJg4cSK0XVNTE71IR0fH1NTU1tZ23bp1
np6eqOPJkyevXbvGXEddVlbWphshU1JS0MJoooEDB4pxButcMOsMJkA3g79P
mTKFBJNoDySYBMFbSDAJgmgnJJgdCHM1ZmJi4vHjx93c3HR1dRkNRPMydsO8
FmTLli2xsbEIouAXrSUF74BUHjt2DBsvXboUrSQpKQlrY15Qws/Pj6SgHmvW
rAkMDEQYVlRU1FpSkCnICIqxfv16CGDjn+CAMF8k6OXl1eLDZrnghx9+UFFR
QZrLli2LjIz87PYZGRmHDh3C9kuWLAkODkatIUp79uyBPUlJSQkKCrLeyYIq
l5eXs3muUWPQvGgZeXl5RoJ69erFpHD37l02bdVJMB3j+fPn9+/fx6GPiIhA
2Xbs2OHi4mJtbW1sbIyCIZz+5h8UFBTwzcyZM+3t7bHNvn370KOwFwQcgwVJ
tfOy4SY8efLkwoULyNHQ0NCUA6C62BheybQtCswIL7C0tFy5ciUJJtEeSDAJ
greQYBIE0U5IMLnm48ePNTU1mIehSFeuXNm7dy80bcWKFVOnTtXX11dWVkYQ
jlAcfyLk9vb2PnjwINQpOTkZ28NxsGNxcTFSaHzasbCwEElt3bp11apVDg4O
SEdVVRWWBDmCnw4dOhTJOjo6YuY/d+5cXFwcArCnT59Cu9hcPpqQkODu7t6v
Xz8LC4uAgIDGP+Xk5MDphISEFi9efOLEiQ5plgMHDlhZWaFHGRkZoU1QQfY2
VFJScuPGDdRLXV3dwMAAtTYxMdHT01NSUho/fry5ubmTkxNKrqmpCaNBrVFm
NqmhMZHjpUuXNm/eDHGTkJAQERFB3bG7q6srdmffVlzz9u3bV69eMVe34qDg
IMIH0aT+/v4oCSwedg/jRjvPmzdv4cKFCxqAPKJUa9asQTi9c+dOPz+/I0eO
YK+wsDB0lfj4ePSW1NRUpPns2TPm1GR1dXWHP5KoqqrqxYsXyBEH4iYHnD17
1tfXV1hYGD0HBwXHa/v27cxPKDMUHiVs8WZPguAEEkyC4C0kmARBtBMSzDZR
X18PPUGcj+kXxUaLRUZGQqngg2ZmZrq6uoqKiiNHjkSlEB3NnTsX32/bti02
Nvbhw4esE2eQIKRw7969lJSUysrKxpetPnjwwM3NTUdHB1IpJSUFr0RqSAr+
hT8RzGPChxJCKiEFHD6gJisrC8LCnPRcunQpcmcZX0VFRUxMDCxs+vTpWE06
pIlQ2XXr1iE7OTm5tWvX5ufns3cNtCdKiIKpqanJyMig4mg9NCPkGmK+a9cu
tDC8GNKKNH18fNBjW0vqzZs3zCsaYW1Qe9bzfEaMGIFV8sKFC5w8bLY5zNWt
kCbmolYcOwS9yAhVy83NxbFgpDIxMRECCz3cv38/c6fkDz/8MH/+fLTttGnT
Zs6caWpqik6CP+3t7R0dHb///ntUB1U7efIkGg0pwJ3Rr3BQWFdKd01goyhw
/wboPZhEh0OCSRC8hQSTIIh2QoLZJkpLSzMyMgIDA9evXz9nzhwUHjE2cw2n
tLS0qqoqJGLv3r1wGYRGrYnVq1evkIK1tbWDg0MTwYyOjoYGiomJKSgoICkc
mpCQEKgotoebwLAQzN+6datNZa6rq4OzMNdeamhoIMfGz/N5/PixVgOwIe7a
pAmQuIiICOTVt29fVAGfP3vGjXlNyenTpyFcULPjx4/DX+BujS+zPHLkCNJE
s8fFxbWWzv379w8fPoy6CAkJIXdGMNFuaD0OL6xtEeYCVwS9zAWuKImfn9/2
7dtdXFygvWwucF28eDGqA988e/YsdoT5Mhe4cl2SLgIJJtGpkGASBG8hwSQI
op2QYLIBZgFdQpBz6dKlAwcOME9tnTRpkkIDysrKEyZMgGIsX74crXf58uXb
t28/ePCgoKCAuZSxtUtDEZ9PnjzZ3t4ekgK7bLwZmgI2FBYWFhMTg6SePXtW
XFyMMsBQzM3N+/XrN3XqVEhom2oBz0VFsCPKLC4uDjVo/PTUvLw81EtOTg4y
+OTJk/Y/Sxa2mJqa6uTkJCIioqSkBG/97Pk4tADaoaSkBIWBV6LKsLDa2lpW
y6ApNmzYAO8OCgpqchspQ3l5OdrNzs4OZjd8+HDY5YABA5A7jsuNGzcKCwvZ
n0VlnrGD6iPxpKQktLa/vz9sd926dTi48EQ4FA49nBHNOGPGjDlz5qCCaLfV
q1e7u7sjF1gnBPnChQvXr1+Pj49Hn8nIyMjOzkZ10NoIkpEFugQq9XW9GKVF
SDCJToUEkyB4CwkmQXztIPJ/+fJlUVERJxfvITRFrI5oOT8/HzEePtTV1bF/
B/1nIcFkAQd5//49DgQEB0VKSUlBFH3x4kVvb29YxqxZsyAvqqqqY8eO1dbW
NjMzmzdv3qZNmw4fPgytgJhUVFRwcpoMhxspy8jIrFixIjw8vMmv0BAkhbm9
cX+AZyGARxgvICAwfvx4FKmtkoIUli5disILCQnBlB8/fsz6CZXFoZeXl9fU
1IQccXcRaROePn26b98+CQkJVBMqDXfj8AQiOjN6OLQaESYairmxEda5Z88e
+DgEGQqP1BpvX1pamp6efv78eWtra+aRSkBaWlpfX3/NmjUIUJn3niAdHCBs
jNRwcNEC9+7dgwij/ycmJuIInjx5EocyICDA19cXXonmWrBggY2NjZWV1ewG
UAB8A9lEsjjuO3fuREtiLxyO5OTkR48eoczICxl1xj2eXQoSTKJTIcEkCN5C
gkkQXztlZWVYQyMjIx8+fPjZjV+/fp2bmxsREXHs2LHg4GB8wCTQztu1SDBZ
MFdCwu+gDMzUCqMcNWoUcwVs37598ScsBn6Blk9LS+PkHRzNgdfAYiBBULDs
7GxOdoEeopO4uLgMGTIEzXX8+HFYTJsyRQqokaGhIT8/P9JJSkpi/QSjhCxo
aGjAMbFNSUlJ2+rTEmhGFFhJSYnRPc7fOAk1Qw9HV0QTMbEl2jkwMFBKSkpd
XR0i0+SkMLwVhXdyclJUVMQxEhYWZnKEGB46dIjZBpaK8kBCoYHYmHl8Kzoe
UjM3N29ygSscXE9Pz9TUFEbZ5AJXWDOOeDe4wLX9kGASnQoJJkHwFhJMgviq
KSoqCgkJGT9+/KxZs9g/w7OmpgYm6OzsrKOjIyEhId4APjAPQomKiuL6wZI9
XDARvUDtQ0NDoRLz58+fNGmSrKyspKQkwmYFBQUcGktLy61btwYFBSGERlxd
XFzMvGQQ2sLdtY4QlpkzZ0JkoqOjOTxqHSKYKD/sGJo8bdq069evs356//49
KmVlZQUftLCwePbsWdvq0xIfP35E+9jZ2aENe/fu7eHhcfPmTU52RNuiV0yc
OHHEiBEyMjIqKirKyspycnJI6ujRoygnqzpoAdTIy8sLaiktLS0qKjpw4MBB
gwZhUKBt7e3tlyxZsnDhQtQL9cVhxaHEYBk3bpyRkRGqiQ0wmtatW+ft7Q3l
PHfuHNoE3v3kyZOCggKIJPJC3ygvL0dG1dXVb968QUPhiNPDUf9uJJi9evXq
06ePmZkZJ++jIQgOIcEkCN5CgkkQXylMBI6wdvny5YiNMYqPHTvW2sYVFRX3
79+Hi6mpqcF9IALQTE1NzdGjR0Mz8dnV1RWB8cuXL7koSY8SzNraWrQSDCI9
PT0hISEiImLfvn0bN26EbsBBdHV11dXV9fT0GAdB2Xbu3Am1hHdkZmZyeA6O
DdCiqqoqd3d3bW1teGtKSgrnO7ZTMMGdO3cWL14sKCiIap4/f57ltuiKsKfv
v/8eHQkdDLrdUW8w9PT0RMcWExNDIyN3TnaByqWlpeGIzJkzh5FByPiiRYtC
QkIwBJhtUPfnz5/jG3R7HDXmlCVahrkiF0Ep9po3bx72Qn1hkTBNR0fHVatW
QSfd3Nx27Njh7++Pw3rmzBn0QJgvcnz69Clz52yHvwGkWwIBv337NuYfWVlZ
eXl5tHNb7wsmCDaQYBIEbyHBJIivFOZqzPnz58MWIXfQmZMnT7a28aNHj44e
PYooum/fvsOHD4dobNmyZcOGDba2tiIiIvz8/PgpMjISQTIXJelRgllaWpqT
kxMbG4vKQu21tLQg7MLCwqj+gAEDEDCbmpqibYODg7FNh78w8cOHD7m5uRAf
hOUwHUgrhzt2iGAia6wUTAqoYJMUUGsTExN0JNh0TU1NWxNvkdDQ0NWrV6OR
ExMT26Tn2Bi7/LuBU6dOoe6NTxajt1y5coV51m7v3r0ZwRQVFWUucDUwMLBt
YOnSpdidsUi6wLVjQcyPgzJ9+vQZM2bY2dmhne/evcvrQhHdBxJMguAtJJgE
8TUCxzl27Ji+vr6goGD//v0HDRo0a9YsNoLp7+8/derUXr16wU2wGXOpHsCH
AwcOzJ49Gz8tXrz4/PnzXBSmGwsm83qOW7dunThxYtu2bYiHofMwkX79+qHN
paSkIClz585dv349NOT+/fsFBQUQfzQsTPDjx4+tPQO2PeU5evQoDGj48OFh
YWGcOxdLMJlTdXv27Hnx4kVbc0dTIGZj7jRsLphxcXEeHh7oSL6+vqmpqW1N
vEXQjGhMNGlbGxMbYxemkzPH4u+G1nv58qWnp6eZmZm4uDjagZ+fv0+fPqNG
jVq5cuXp06dLSkqgxsju/T+wdmcKwNAhVevhMAeocTvTlcNEB0KCSRC8hQST
IL4uEORHR0evW7fO0tISsjNhwgQVFRVYA0YxYv7m2yNswy5r167FZhCigwcP
Nn7+J0hPT/fx8cFPenp68A4uzrh1P8FkvBIGB/v29vaeN2+eubn5pEmTNDU1
tbW14fXQecyZaDe0+aVLlxISErKzs8vKyjr77fbQHy8vL11dXTk5uZs3b5aW
lnK+LyIudBtJSUn0Fkz7XJytRrPs3LkTva5FwczMzPT39xcQEFi1atXFixfb
mnhnk5WVdfnyZXRRHD60HnPWEmqJbo/jeO3aNWyACpLmEEQ3gASTIHgLCSZB
fF3AC2CL0tLSQ4cO1dDQgNnZ2NggVJ48eXJgYGDz7evr67GLnZ3dsGHDEEu3
eNceAm/8hASRcpuchaH7CSbU6dmzZ9bW1uPGjYODCAkJDRgwAO0DwYRarly5
8sSJE8zbKzowU06orq52cnJSV1dXUVFJT09v02WuL1++3Lx5M9oKvWXr1q2P
Hj3iogD79u1DI6BNjh071iT3kpKS8PBwMTExKyurgwcPcpF4Z/DhwwdoY1VV
1enTp1esWIGmQ0cVFBTE0ZSRkTEzM0Ofz8vL66hregmC6AqQYBIEbyHBJIiv
i7t372ppaUEn169fn9vAnj172Agm8xYGIyMjRNQuLi4t3rWXnJyMn/r37w9X
xcZtvQiw+wkmc4MYGgQNy7x648KFCxC6yspK3j7CBQXA0R8xYgQsD5/b+iwd
Pz8/GFY7BVNDQwMpHDp0qLneotFMTU0VFRXh4Fwk3hmgmnBhW1tbcXFx5qwl
OuqQIUOUlJQiIiI65IG3BEF0NUgwCYK3kGASxNdFUVHR8ePHr127lpaW9vr1
a+YN8mwEs6am5syZM/r6+sOGDfP09GzxwkgswfhJUFBw+vTp2LitVwmyBNPb
2zshIYHLinFF510iW15eDo9TUFAwMDCAlefn5zN2ycNLKJF7QUEBQqYxY8aY
mZlxUZh2Cib60vbt25kCnD17trne5uTkYCmRlZW1trZ+/vw5dy9h6RBqa2sh
j+Hh4Y6OjhgaI0eOhFQygmlubu7h4REaGoqxU11dzasSEgTReZBgEgRvIcEk
iK+Lt2/fMk+SYf588eIFe8FECH3w4EFtbe3hw4fv2rULy27zbTIyMvCTkJCQ
iYkJNuZCMGF5fHx8rq6uJ06cyGkL2dnZjx8/LikpgSxz0Rqd+pAfNBpzsvjD
hw9d4dEu8LunT5/ClVRUVGxsbLhIgRHMAQMGeHl5sd7ZwTllZWWenp6jRo3S
19dHyzffABru7+8vIyODRouPj4enc1HIdgLtLS8vf/jwYVhY2OLFi6WlpYWF
hdE5JSUl5eXlNTQ00AhJSUmklgTRjSHBJAjeQoJJEF81nxXMqqoqjHE1NTWE
/digxWeHQvTwk4iIyMSJE7ExF4K5ceNG5pEpSkpKWm1BVVUVerh9+3b4CBfV
71TBdHBwQAmHDRtWWVkJr+/w9NsKvAnBEtoZkgh14iIFuBV6wr/+9a/ly5dH
RUW1dXfmNSXi4uK2trY3b95svkFFRUVsbCw8DocVHYmLN6G0Hyxq6MxTp05F
r0BNBw4cyJy4xABBL+XiCnCCIL46SDAJgreQYBLEV02XEkxLS8uVK1f++uuv
v3CMl5cX9r169Wp2djYX1e9Uwdy8eTNaVVBQMDU1ta3P83n//n11dfX9+/f/
+9//JiYmFhUVtf8xMu0XzODgYDMzM2gXdj937lxbd09OTp4/f76wsPCqVata
vNm2rq4uPz8fjQbBhIR+ybjuzZs3aBz0vSVLlmhra48cOZK53VJSUpK5YfnO
nTsQZHqLJUH0BEgwCYK3kGASxFdNFxFMd3d3eMeKFSsOHz4MDYluI1lZWdzF
AJ0qmCEhIVDmvn37hoaGook437GioiIjIwNl27Zt26ZNmzZs2ICkoJktXp/M
OSzBVFJSmjNnDhy2rUfq5MmTFhYW0K6FCxeGhYW1ad9Pnz6hRrNnz4Zxb9++
PT09vfk2Hz58eP36tYODg66uro6OzrNnzzr7mUgoFdTy6dOn8fHx6Lrm5ubK
ysrMKcthw4bJyclZWVkhzkQfa+sDkQiC+HohwSQI3kKCSRBfNV1EMLvZU2QZ
7t+/v2zZMj4+Pjc3t6SkJM53vH37toeHB0rVq1evfzWAA2RtbR0QENCe8rAE
U0pKysjIiIunyLZTMNFJzMzMhIWFIyIi2Miyj4/PtGnTUE40WllZWZtyaSv1
9fW5ublbt26dOnXq4P9FU1MTBw4izMWbdwiC+KohwSQI3kKCSRBfNZw85OfQ
oUPa2tqcCKapqSk2JsFkgJjAlUaOHGlvb3/9+nU2W8Jxdu3atW7dut27d6M1
JkyYoKWlNWnSJGdn50WLFtnZ2eEADRkyZNSoUdA6rs9jMg/5kZWVlZCQwAH9
8oKJuqBqY8eOxcLB5orfK1euuLq69u7dGz0zNTW1TblwCLooevKFCxe2bNky
ceJE9G30XsYrpaWl8Q36c3JyMvT27du3Hz586IwyEATRZSHBJAjeQoJJEF81
nxVMiEBoaOj48ePZPEX2wYMHMCkhISFzc3NsTILJ8ObNm4CAAHV1dbQtmoXN
1Z7p6ekODg4wytmzZ3t6ehoYGODPffv2RUZGRkREnDp1atq0aRBDAQGB5cuX
3759m7sLR7EXZmxFRUUcSpQqLy8PJWxTCizBtLW1DQoK4nxHOFpdXR3aAXVE
J0G+bF5Bcu/ePXgfPz8/egUXjxL6LIWFhXfv3vXz84O/GxkZSUlJDRgwQFBQ
EN6NPx0dHdHy6NKdffKUIIguCwkmQfAWEkyC+Kr5rGDCC2JjYxF4i4uLu7m5
PXnypPk2ycnJLi4u/fv3t7Gx4eIxm91VMP9uMDITExOkf+DAATbPRE1KSmKe
Nwuw8aJFiyCkrF8h7Dg0pqamfHx8+PXEiRNVVVXclaeyshIZjRgxQkVFBYHT
y5cv21odRjAhvLt27eJ8R/SiiooKFB6LxZo1a9hvjGXl8OHD6JOw7NOnT7ep
hJyQkJDg7e2NwsAre/fuzZy4FBUVxTfbtm37wm9iJQiiC0KCSRC8hQSTIL5q
PiuY7969wwqLMT506FBYZGZmZvNt4uLibG1t+fn558+fj41JMFncvHmTqZqn
p2deXl5rmzURzDt37jQ5fQYx3L59u7q6Oo7Uxo0buW6l6upqHMQxY8ZISkpG
RERgAm/T7jjQmzZtQnUMDQ1RI853fP78eUxMDHZED7l06dJnt8fGzGtoYHxt
KiEbYNO5ubnwdEVFxSa3W6I6WMLwa21tbUdlRxDE1wsJJkHwFhJMgviq+axg
Mk9BWbBgwahRoxCcQzGavGK+qqoqPDzcwMBAVFR0zZo1hYWFbS1DNxbM1NRU
VApVW7VqFbSRzWZoWyi8lJTUhAkTnj592uTiVYjP4cOHzczMmKtkOXG0Fqmp
qXFzc1NVVRUXF9+3b9+zZ8/atDtiraNHj86YMWPz5s0XL17kfMdHjx6dOHEC
Vuvl5cXJC2Vg3MgF0R06BuS6Pa+efPv2LVKIj48PCQlBsZWVlWVkZBivRGsj
C1tb2927d1+/fp2Lm1IJguiWkGASBG8hwSSIr5rPCubHjx9fvnwJC9PQ0IBj
njlzBruwAn58wELs7++Pn+Tk5Hbs2MFFGbqxYGZlZYWGhvbq1WvhwoVsrDAt
Lc3Ozm7gwIEjR46cM2dORUVF823OnTu3aNEitJKNjU2LR4oT4K2+vr46OjpD
hgxBxeF9bdodrRQbGxsUFJScnFxQUMDhXugkOMQ+Pj66urqnTp3iZBcEdfBo
aWlpJycnZNrWu3pZ+dbX15eXl0NpPTw8Zs6ciV46aNAg5olJYmJikE04O6qT
m5vLRfoEQXRXSDAJgreQYBLEV81nBZPh7Nmzjo6OsBtopqurKwLyt2/f1tTU
4IODg4OSkhJ+Wrly5dWrV7koQzcWzMrKStgNmtfIyAh1bG2zjIwMFxcXWI+e
nh6OQotPWH3w4MHRo0fRSpMmTfLy8uKuPBAuxEvz5s0TFxfX0tKKi4vjLp02
8fLly927d48ePRqLBYdPhUW3jIiIQCENDQ3RIOhsbc2U6Zzr1683NzfH8e3d
u3f//v1xINCAUlJS+vr6SBb63/baEATR/SHBJAjeQoJJEF81iOR9fX35+fmh
LWwEEwZ07NgxmQbgmD/88IOPj8+WLVvwQVFRcdSoUQoKChcuXGjxEUCfpRsL
JsyotLQURjN+/PglS5a0thlLMOFT58+fb/FOQJZgQo5QZu7K8/HjRwRL2F1J
SQn6hgTz8/O5S4pzioqKIiMjsUbcu3evuLiYk13Ky8tTUlJwXLS1tdetW8f5
rZHv37/HvhBndFfsqKurKycnJyEhISQkxFwTO3PmTDc3t5CQkEePHrV4ppgg
CIIEkyB4CwkmQXzVQDB37twJwTQ1NWXz4ok3b95AcLDN8OHDRUREREVFlZWV
sfjiA/5kbmQrKCioq6vjogzdWDD/bnhKEhxcR0dn9uzZHz58aPF2QpZgGhsb
37hxo8VmZAkmpKnJg1iRRU1NTWVlZVlZGaTp1atX+IbN2xv37dtnZGSEpDw8
PJKSktpfR/agj929e/fKlSvsN0PLoMxQ8tevXxcWFiKuQ79C01lYWFRXV7O/
DRO/YseqqiosSXfu3PHy8rKyspKVle3Xr5+AgAB66YgRI5AUmi4gICA5OZnr
x/ASBNETIMEkCN5CgkkQXzUI/k+cOAFzXLdu3bVr19hsCWfJzc3dsWPHvHnz
tLS0FBQUxowZgw8rV648c+ZMe57E0r0Fs76+HvLInEpDAzZ5RBIDSzAnTpwY
ERHB/gxm80tk4+Pj/f394fj6+vpTpkxBUgkJCWxOTTLv6UBSZmZm3N022xmg
ZfLy8mJjY318fBYvXoyuxd/A4MGD8T37k5gQRuy4evVqExMTbM/Hxwe1ZJ7k
M3LkSCSF9kGt0Uu/WHUIgvh6IcEkCN5CgkkQXzXMrWoxMTH37t1j/9KKjx8/
QgEePXoEnQkPDw8KCgoODsaH1NRUrMXQTxLMFoFgbt++3dDQcNiwYbdu3Soq
Kmq+zbNnz7ANNtDR0Tlw4MDr16+bb8N6RcjMmTP9/PzwzatXrzIzM3fu3Anl
n97AtGnTJk+erK6ubmVltX///tLS0hYPSklJCVKTlZVVVlaeO3cuNuPJ01OR
6fPnz+/cuRMVFYXSurm5OTk5QZA1NDRUVVVhhVBpGxubtWvXoqYtnpBFr0ML
oBOi9WbNmqWtrT169GhIpbCwsKioqIKCwsKFC7dt23b16tXs7GzUGtt/+WoS
BPHVQYJJELyFBJMgehowpqqqKohScXExPnD3hM/GdG/BhBmdOHFi6tSpQ4YM
OXnyZItvBsnPzw8MDJSSklJRUYFFtngBZ2RkJPyLj49vwYIFp0+fxjc5OTlh
YWFQV8bFlixZgnkYsolE4Flr1qzJy8tr7egUFBRg3oZj6unpQfG+zCWjrCtg
4XovXryA9KFSe/bswSGAHTOnxSUlJVEqfLa1tfXw8Dh48GB0dHRj/0WN0AMr
KyvRA5HC8ePHnZ2dDQwMmPOVaGR4upycnK6uLlIIDg5GfPgFqkYQRHeCBJMg
eAsJJkEQ7aR7C+anT58QosD+4I9ubm4t+g5LMCUkJExNTcvKyppvAxFTV1eH
Q23bti0zMxPf+Pr6wstQeHgrq/yw/tjYWIRG4eHhbK5brq6ujoiIgIWJi4u7
uLhw93SmtoLyZGRkREVFoR0sLCxUVVVRnX79+sGa8cHExGTZsmVoh9u3b7N5
b0htbS38FJuh2BMnTmycAhg+fDjk1MfHB43wBWpEEES3hASTIHgLCSZBEO2k
ewvm3w3Xsrq7uyMXa2vr+Pj45huwBFNISEhWVvby5cuNDevjx4/R0dH29vZi
YmIzZszAr8yNnGvWrBk3bpyVldWdO3dYbzZ5+/Yt/DQnJ6ewsJDNha/19fXY
ACno6OiMHDny1KlTnfEuSFQcDRsTExMUFOTp6blo0SIYMcoMU9bU1ITeojoo
w65du86dO5eUlPTw4cO8vLyKioo3b940SQoVhDufP39+586d8FDIqYKCgoyM
TN++fQUFBYcMGaKoqLhgwYLt27fDT58+fVpaWtrh1SEIoodAgkkQvIUEkyCI
dtLtBfPvhrONampqcCvoYfPbCV+8eHHs2DGInoCAwODBgz08PGBSz58/h1Lh
pydPnqxfv37ChAni4uLe3t4PHjxg9sKsC0eDYF6/fh3bPHv2DF7JfMBeJSUl
L1++ZH9jLLzS0dFRWFh469at7X+cLES4rq6OuXgVZYAt3rx588SJExs2bIAd
GxgYwAoRsMnLy+MzXHv58uWwxWvXrj169AjK3OJdlnDk169fQ35TU1NxsLDL
1KlTkQh6C7wSbSUqKjp27FgjIyMnJydoLPpSO2tBEARBgkkQvIUEkyCIdtIT
BDMkJMTS0hJCBAlqfsMjjCwiIgKiNPgfoGBubm6HDx/evHmzs7MzGkdaWtrY
2Ljxc2ghrWZmZtjY1NQUBufi4jJ37lwHBwd88PHxgbHGxsayeVkJgLuhwbW0
tLALtm9nHWtra1G8q1evBgQEIEF9fX24JIrXq1evQYMGoZGZ2yqREWK2Fi8D
bk5paSk2XrlyJWqKFNAOcHCkxgjm8OHDkWZgYOCdO3faWXiCIAgWJJgEwVtI
MAmCaCc9QTCvXbu2Zs2aPn36eHl5sU5BsqisrExOTlZXV5eTk5syZcq6desW
LFigq6sLQcM3CgoKRkZGO3fuTElJqaurYzljRkYGvHXcuHFjxoxBFbDxNw3g
g6ysLP6FsQYHBzfPjgWSgq6mp6ej+iUlJVzUq7CwMC0t7fTp05s2bVqyZAnK
qaKigvIgdw0NDdRl0aJFOKxnzpyJi4vLzs7Oy8tDRhBbNpfv1tTUYDNsv23b
NqQ5ceJEiKS4uLiYmBg6Cexy1KhRFhYWCP9CQ0ORZnFxcYsvfyEIguAOEkyC
4C0kmARBtJOeIJioIwwRdVyxYsWNGzea/Prq1SuEMZqamoqKira2tpGRkf7+
/lAzfX19ExMTS0tLTLNJSUmsGy0ZXr58CTf09PSEjVpZWcG58K91AxMmTIDl
DRw4cOnSpRcvXuyot5C8e/cOZSgqKnry5Amyvn379vHjx6GBKCrKqa2tzVgt
io3CoKZbt26FAsNAIYwtvnulMUi5tLQUB+LWrVunTp1CvaZOnQpdZR7jg7pI
SUmhfZDRwoUL9+/fHx8fj2Q7pF4EQRCNIcEkCN5CgkkQRDvpCYIJIwsPD0cd
4Y9Hjx5t8msTwSwvL3/79m1lZSVUC98j1GGfeHV1NUKg3NzcsrKyygYSExO9
vb21tLRGjx4NAcQ3HVILFAwViYiI2Lx5M6QS6TNXqwJJSUl1dXUUHgfx0qVL
KEx9fX2bEkfKMTExWFBMTU0R1w3+X0aNGoXs8Ou1a9eeP3/eIdUhCIJoERJM
guAtJJgEQbSTniCYVVVVGRkZ0tLSU6ZMcXNza/IrSzBHjhypr68PO6utrf3w
4UNNTQ0+vHv3jn3izKshsdmHf3jz5g1EbMGCBcOGDfPy8uJOMJEgip2VlXXj
xg1I8ZIlS6ZNm6ahoSEjIzNixAg0GozP2toak39QUFB8fDwq+OLFC0gohBf7
sn++EFNspH/v3j0Y69q1a42MjODXwxqAt/Lx8Q0cOBC5TJgwAVU4e/Zseno6
DJr95bUEQRDthwSTIHgLCSZBEO2kJwgmhAvypaqqCl1avHgx/oResX6FSObk
5EAtmfN0T58+bf6ejhaBbaWkpMTFxUHT8JmVJiKiU6dOYWaGD+7du7fJtbVs
QL4wxLy8vLt370ZHRyORrVu3rly50s7Ojnm9iLKyMj5YWFigFvA+iOfly5cz
MzOxV11dHSdZQDyxMeqYmpoKtfTx8Vm2bJmBgQHsW1hYGN1g6NCh+CwvL29p
afnDDz9giYmNjUX7cF4LgiCI9kCCSRC8hQSTIIh20hMEE1RUVJiamqqpqZmY
mFRWVjY+DYfP+MbMzAzxTJsEMzc318XFZcaMGatXr8Zn1rnOpKQkNOngwYOd
nJwuXbrEeSELCgqYU4qrVq2aPn06WqZ3797MRbD4bGhoaG9vHxgYiPThy22q
Pov6+nrEbIcPH0YWqCxcknUdLCOYUlJScG3UKz4+Pj8/n7tcCIIguIYEkyB4
CwkmQRDtpIcI5uvXr7ds2aKpqSknJ5eenv7q1SvWT1wLZllZ2alTp6BjkDIF
BQXYn4ODw9SpU/FZW1vbwsLiyZMnL1++bG135ILY6eHDh8yZyjlz5sB/R4wY
AdeTkJBQUlIyMjL6/vvvMcmHh4cjqcLCQpQTezGX43Jed1Q2Ly8PuXh4eFhb
W6MFxMTEREREREVF+/fv37dvX+TIXHDr6+t79+5deCV2aWsuBEEQHQIJJkHw
FhJMgiDaSQ8RzNra2uDg4AkTJkhLS1+8eLGoqIj1E0swR48eDfmC8TV/V2aL
1NTUwFU3bdpka2urq6traWkJR5s1a9a8efPc3NyQHdJpfKr006dPELeCgoKs
rKxbt26dPHlyz549aHyoJXLX0dFRV1fHv8bGxs7Ozhs3bjxw4MClS5eSk5Nh
l/DKNj23B3rIXAobHR2NjHBwkQuMlXndJz8/Px8fHzRWWVl54sSJTk5OO3bs
wGboDNjrs7edEgRBdB4kmATBW0gwCYJoJz1EMCFNsbGx8DhxcXFMm41zZAkm
c71oSkpKWVkZ5ynD/mCsLi4uc+fOdXR0hFpeuXIlOzu7+ZYfPnzIzc2Ni4sL
CQnB9uPGjZOSkmKugBUUFEQ7zJgxY+XKlYGBgY8fP25TGZoDk83IyIiIiLC3
t4dCInHkIiAgwFwNC8Hs27cvvnRwcEBrIIqjd1kSBNFFIMEkCN5CgkkQRDvp
IYL58ePH8vJyJyenESNGLFu27MGDB6yfGMGEG5qYmBgbGyOkaZPcffr0CeaI
ROCw7xvAn8xDXF++fAnTvHnzpqenJ9KHw0pISIiIiPTv319UVFRbW3vmzJnr
1q07ffp0UlJScXFxbW0tdq+vr//UQJsqiB2RHez4xIkTrq6uGhoao0aNgk0j
o6FDh0IqcYiHDBkiJyeHOuKIHz9+HDnW1NQgu8aPPCIIguAtJJgEwVtIMAmC
aCc9RDDha9C3NWvWKCoqQutSU1NZP8EH8VN4eHhQUBDsrKioiMN7MJsDx4Sr
wl7j4uIiIiJ8fX3RtgsWLDAwMNDT04NRTpgwwdzc3N7e3s3Nbf/+/aGhobGx
sZmZmZjMUYa2ih7zKhPmrCjKv2/fvlWrVtna2mppacnIyMArmVOW+KysrGxq
aurs7Ozt7Y06ItOMjAzmbSzc1ZQgCKKTIMEkCN5CgkkQRDvpIYLJsHnzZh0d
HQ0Njfj4+CanCGFqXLyJA4nACqFpzKswKyoqsrKyIKru7u7W1tby8vKioqJ9
+vTh5+eXlJRUVVV1dXUNCAi4evUqIijuXvzBypE58Qq7jIqK2rBhg52dnaam
5rBhw4SEhHr16jVo0CBhYWFkLS4urqamNn36dBzf6OjovLw8LjIlGoNjzZyq
5nVBCKJ7QoJJELyFBJMgiHbSowQzIiLC2dkZlQ0MDCwsLGxnahANKF5qampo
aKibm9vMmTOheIMHD+7duzeMEh+MjY2XLl26c+dOhEnPnz9n80RZDoFdIsfk
5GTmLk4TExPmoT0s+Pj4+vXrhw+QSktLS5QqJSUFK0U78yUa4+HhsWrVqpUr
V/K6IATRPSHBJAjeQoJJEEQ76VGCydwOicp6eXnBvLhI4fXr10VFRWi0c+fO
HTp0aOPGjQ4ODtOmTdPW1tbQ0NDV1TUyMpo/fz7mZB8fn/PnzyNHJkaqqqp6
+/YtFzm+f//+zZs36enpMTExZ86cQY5LliyxsLCAWsrIyIiJiTFqKSoqKiUl
xdzXuWbNGpQtMjISKlpcXIwyc5Ev0RqrV69evHgxjjuvC0IQ3RMSTILgLSSY
BEG0kx4lmGlpaQEBAb179162bBns77PbM9ejQgyheDDEsrKyrKys+Ph4X19f
R0fHKVOmyMvLDx06dODAgfA7dXX1GTNmoEZwT7RkXl4e1w/P+fDhw7t375Dp
y5cvMc8/efLk6NGj7u7u8+bNk5WVFRcXFxERQS369OkjICAgKSk5YsQIBQUF
6O3333+/d+/e27dvl5aW1tbWcpc7wR40sq2tLRyf1wUhiO4JCSZB8BYSTIIg
2kmPEkxo182bNwcPHgwT3Llz52e3r6urq6ioiI2NPXDgwJo1a7S0tKByAwYM
QHMJCwtLS0ubmpq6ubkFBQUhECopKeHutsrm5OfnJyYmBgYGwiiZl4w0vg6W
n58fdokPCMAMDQ1dXFyw5a1btyorK+mhPV8ACOaCBnhdEILonpBgEgRvIcEk
CKKd9CjBhDBmZGQoKCgYGBisXr26xW3Ky8uzs7Pj4+MhlVu2bFmxYsWUKVP0
9PTGjh0LwZw0aRLk1NXVdffu3adOnYqJiUlLS3v69Cn2qq2tra+v565UZWVl
mZmZaJDg4GCYr6Oj48yZM8eNG8e8akRERIRRy6FDh6LwUE4rKytPT8+jR49e
vHgxJSXlyZMnxcXF7969a+vLTQguIMEkiE6FBJMgeAsJZseCCO3Ro0dXr169
efNmfFu4fv16XFxcaWkpArzP5lJTU5OTk4O97ty5w8nMWVFR8fjxY5QKWTx7
9uyz2yPUTE5OvtoA3KG0AY7qT/RIepRggry8vAkTJmhqajo4OGDAMo9jxags
KSkpKCjIzc3F2Dx58uTmzZshkvr6+mPGjBk2bJiMjAzMztbWFpMtZt3o6Ojn
z59zfb4SGoisq6uroaXIFM6LTI8fP75q1SobGxtkCpHs378/DgofHx8/P7+Q
kBBaCeGWuro6yuDm5nbw4EEcLOzbUedMCc4hwSSIToUEk+hwmLd6Nfl/YKzF
WEPxJXdPSOjGkGB2LGlpaWFhYWvWrNm0adPmZmzZssXb27v592D9+vXbtm3L
zs7mJNhDTHjx4kWkFhQUlJWV9dntYaORkZEoFXa5ceMGm0vgMGrKysrCw8N3
7NiB7T09PYODg/MaaFtDED2JniaYRUVFLi4uysrKkyZNgk6WlpZCFWNjY1ES
yJ2WlpaYmJigoCAaZNCgQUpKSmZmZphmL1y48PDhw44qA5QWWWMe8PX1hTCq
qalBYJlnwP7rf0EZFBUVp0yZwlyIm5CQ0FFlILiGBJMgOhUSTKLDefLkSURE
BHoUYgDWl3V1dVj9Efk8fvyYh2XrgpBgdix79+41Nzf/Vyv0798fEWBrv8rJ
yaGXlpeXfzaXc+fOzZ49u2/fvggsIYyf3R7Ou3DhQibUhAhUVla2tiVCZfSH
MWPGMEUyNjaG9lY20LaGIHoSPU0wMUihdaqqqlJSUjBNR0dHeOW4ceNUVFTw
JQRz+vTpGHEQuuDg4CtXrqSkpKB4xcXFVVVVXGeK3TMzMxMTE0NCQpA7am1h
YTF58mRkN3z48AEDBggICGBOEBISwjCXkJDQ09OztLR0dXXdt2/f+fPnUYas
rKz8/HxOZhiisyHBJIhOhQST6HCSkpI8PDzs7OxCQ0NZJ4OwrO/atWv58uVr
1659/fo1PcSABQlmx3L58uUdO3YsWrQInc31HxCC4hvW6wDQ2vb29qxfEWng
12XLlm3ZsuX58+ecPLYRhwyBJXTVz8+Pk3MiKNXSpUsR/yMQ3bhxY2u2eOfO
nf379ysqKgoLCw8ZMgTlvHDhwtOnT+mF4N2MT58+1dfXv3nzBjNkXV1d+++5
62mCiQXlzJkzOjo60Do1NTVIpbKy8ujRo+GYUEsnJ6dt27ZBA+Pi4goKCqqr
q7nI4u3bt9ixrKwsLy8PY/DRo0cYxUeOHNm6dauDg4OJiQnyxWSCAsAo+/Tp
IygoCK+UlpaGbxoZGc2ePRt66+/vj/aBVyKdDm8Eoj2QYBJEp0KCSXQ4CG+8
vb1Hjhzp4+PDejc0Vuq9e/dOmTLF2Nj4xYsXiKl4W8iuAwlmx5Kenn79+vXT
p09Dzf7zD2FhYUFBQWPGjIHfwTERfOJP1q8XL17E9ufPn7916xY6KieP+EBw
gjASsWVUVFR+fv5nt0eRsAvif4wLLy+v5oL54cMHRMKwSzs7O2yGwFVbW3vn
zp3tf4880QVBH0MfgLM8fPgwNze3/f970NMEEysIgha4JIYzsp42bRrGV2Bg
YFJSEqKaDskC4zo1NTUiIsLd3X3hwoUwSmQkKSkJi2SuLuDj48M47du3L+wS
H5gLcSGVmHnS0tJwfLl+vwnxBSDBJIhOhQST6HBevXqFkElUVBQTeHx8PPMl
Aip8OXfuXHV1dQ6vQuwhkGB+AaCN6H6ysrKIDxElVlRUtPO/OHR0dEaNGiUt
LY1kObno7rOCiUTQDTA6mNgVATNMoT0lJLogMA50xdDQUE9PTysrKz09PXQk
IyMj+MuuXbvu3bvH3fNL/+55gomWfP369aVLl44dOxYXFwdPf/bsGXMFbFuH
9ocPH3BQEAs9ePAASQUEBGzZsmX16tU4QJBKHCAZGRlxcXF4Zf/+/ZknweJf
iC3mkylTpri4uGBEh4SEwG0zMzOfP3+O1Q1l4/pQEl8GEkyC6FRIMIkOBwsr
lvgJEyY4Ojru3r2b+fLTp0/4cuPGjaamph4eHk+ePOFtIbsOJJhfgBcvXkRF
RSEyHDFihIGBwfv377k+uQA5zcnJkZKSUlRUNDY2Rq/m5Hpv9oJ59+7dAwcO
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
4MGdO3euW7du/fr1GzduTJQmJSWhnBmmq7uFK6iNROz58+fN1xx37txZsmSJ
G4NJOJF64eHh1MZp06Y5rca4zjlz5pQuXZpqSZtwbzBPnDiBvKSVYPQ2btxo
Zc6UdOwwsb18+fJRo0bRgwj4uLg4sjVP61mZBzcjiTkKs140b4VZvMi9waQ1
kJ60swEDBlB/KDXdu3cnGUm6IUOG4DrT0tK0+JvwElIyNja2WrVqQUFBq1at
srhm1D/+8Y/Tp0+HhobWqFGjVatWvCr3BTyOEPmXL1+mcbRo0aJv374UBPfj
DVlZWenp6eQIHYosoA3hB1FTuReOtsjJkyexhCSvWcqAVujRYF66dIl2X7ly
5ZCQEHpffHw81YPso+BERkZyFPTlzMzMfJxhFkL8hPzwww/UHwrL8OHDX3vt
NZS8m9XsDWgStAodmSKWnJxspfM+efLk/v37s2bNio6O5oVmKdeuXbt+/fXX
uR+Olj+sGMwzZ85gFpA97LdJkybYljfeeOP1HIoXL16xYkV+z2sRZnm6GFK8
FOhEa9eurZ8DzWXnzp3EYa1atcwzuUrlYFupODs72+I1M2bBEzpUlSpV6M4p
KSmON2naIBRTU1PZLyPZV9GiRYnV3bt3ex8PVgymSRBcbdWqVZktAttMw8fH
h3+J1SJFipinedKv1WeFRdCHv//9790YTLIJz9ioUaNKlSqtXLnSqZ40CzUT
hEhWAtjV+Q1zVdu6desGDx5crFgxNnvu3Dkrk2QOTJLYbt++vfmapmPHjnv3
7nV6K0ee2L9/v8dLZJkz9hlly65J0k6dOvn7+5N3VJ6SJUuWLVuWNjdy5EhM
q/etSryyULTPnj1LgPn6+lLnDx8+bEU4vchZgHHz5s1IF+IQ6+fxJfSXbdu2
EboYNOvP2Dp48ODSpUv79+/fsGFDErBcuXLowNxr4uUPUhin6dFgfvHFF3Tb
gIAArHe3bt0YjNkkAREAJUqUoBfTxM3NVl7ORwhRkOAuaeUktVlAe/ny5Xb3
gztCpkdERKB4ERsWlyJBvTMSzWzWzDdrbkdFReX1+g2nWDGYlOghQ4aYXWMn
qaLjx49PTEzE8/Kq0NBQc/gJCQl5/Y5MeA9taOHChdX/N/SjuLg4Ymzs2LG9
e/fm0yHkCCG752C64c9//vP777/PJ05rtlsb2ZHTp08nJSWZXfv5+dFhCZKp
U6ceOXLEy6OzYjDtEgQrzWQIWnOhLPKbyTAl3gQOxHFBLSGc4tFgonKJyXr1
6nlvML/77jvqOVIQcdiuXbvz589bnOS9e/dMeJv6HBgY2KtXr4IxmOZZQvhH
BDzDKlSoQC+YNGnStGnTSEByjYnhCPhTbGxsWlqal/MRryyEH0FIIFlfmpXg
fPjw4fTp00NCQmw3CHt81caNGwlaWgnaJvdzn93z29/+tnXr1iYByXSaIH6z
wAwmoos5Gy/JYHwu8oxSQ/LS+hs0aMCseBOQcF7ORwhRYCDU09PTMXr0dNTv
8OHDP//8c48n1hjWuHFjHx+fY8eO3blzx8qOvvnmm+vXr2MiqJaUsnfffRfB
g+xnU9u3b3dcBSJPWDGYHNfixYu7du06cOBA5vDxxx+j5/EUX3zxxcGDB9Fg
/J7i1qlTp5kzZ3ozGZEPaEPLli2jB73++ut0xpYtW6akpOzbty8zM5MPiDa3
e/fuyZMn165dmyjFqfFpuj8v8fz5cz7imJiY4OBgRCMW1eOtvjdu3GCzKTkQ
D7S2WrVqtWrVisA4d+6cN6dBrBhMkyDEXnx8/MSJExHGBOe1a9fI0KysLLT6
pk2bIiIi3nrrLbwAQte6chCvMgVpMInJVatWoQZr1qzJTi2eBfp3TvCjZtky
whuvx17q16/fo0ePrVu32i0/nlesGExaGO0DTYuUJQFJtFOnTp05c4YEpDnS
UJgSNYSWR27ihbXkiMgTT548oRkNGDCAhkIgJSYmHjhwwOOrnj17RtOZNm2a
WZmQ/F23bp3H2zbRQgkJCeXKlUML4TStX36za9cuchxtNmnSJHKhSZMmTZs2
jY2N3bx5s8UtOMWiwaTCjBs3rlevXrRsdBqSDHlG6ycTkQFkbp06dYKCglCM
x48f1xqzQvzMobEiLQ4fPozpQ1r4+fmhMZDB7lWBuWsb/U+moyLYgsUKRrVk
8MWLF8/lgA6Jjo5mC+x6ypQpVpZecYMVg4mq37t374IFC6i62Ba7v6IleGHx
4sVpAX379jWPyPRmSiJP0IZQvw0bNixUqBDaEjVoF1pI0KNHj0ZGRvr7+yN0
CVQ394ZkZ2fz1zFjxqB1S5cuTbgiGj2eCfnXv/716D9cuXKFHhceHl6tWrWq
VauyO28uzrFiME2CnDhx4mgOduFnspXWj8Xm8FesWOFmpSAhbBSYwSRiee37
77+PDsSLEcMklMVJ0lZMX6AOf/LJJ0OGDAkLC2POBLzjAph5wsolsrwDhw4d
Ss4BX2m3rFBWVlZqairvT/ny5VHIZ8+ezdNtoeIVhyygVtOMkExlypShGaWl
pXm8+5IYu3HjBu2gWbNmNCDkGbbUcblXRzZs2BAVFUUbTUpKsrI4hg0maXLw
2LFjaKHBgwfTOklkMppGnO+7/i0azNu3b9MilyxZgp/96quvcu/u6dOnbARp
h1xkSmvWrPHypJMQ4seGnk5G9+zZ01wa9O6772L6PL6KwpiRkVG0aFEEwKhR
o7yZANtZunQpu27evPmECRO82ZQVg+mRBw8eYHACAgIwOFevXrV7cJv4UbEZ
TDrRuHHjXJ1wWLRoUUREBB/0zJkz3Ty/AI1KQ2cYmpAWSaTlY+0m85jX7t27
lyxZkrjy5kJZ66vIugebbC6yGjlypHmSixDuKTCDaVuHPCQkJCYmxps5X7ly
Ze3ateY+/djYWG82ZcVgeoTDx+qaLzF5H9QahHUo1CNGjDA35rRq1criGrBm
VVWkCC8kNz3e32Fj+PDhTZs2JXfoj24WHHCPedR4eHg46cy0vbmPyaLBdM8P
P/xAA42MjCxevDhvhfc3rQghfjxI+bS0NMpdYGCgv78/enXHjh1WvqM5fvz4
jBkzChcujDNNTU31Zg737t3LzMz09fWlfiLgvdnUSzGYlFBcNm9IUFDQmTNn
tGZgQfLs2bP169cTkJUrV547d66rN58uQwPlg8aEOl7yykays7PnzJlDIwvM
YfTo0Vu3buWTzceXDi9evMjKyiI1SBAa/bZt2+ye5Wqdl2UwMc4IXaOWLa7P
KV5xPBpM7BJuDlHq5+c3f/5828Pfc3Pu3Dn+VLp06Y4dOzLY6dUdFy5cWLNm
TcmSJTt37kyQezNnc7lC69atST1UJX4z3wttvRSDyXvCe8j706BBA94H69/M
ilcWIhZvRSJ0797dNKMPP/yQCPTYjNBF6JmBAwc2atSItCXjFi9ebOWme7rM
7du3mzVrVrduXV579+7dfK9JRYIzyfHjx+MxS5QoQQ/N61L/Nl6WwTx8+PCg
QYN8fHyioqKsXGAshPhJuHHjxubNm8eMGVOhQoXg4OAOHTps3779q6++svLa
Xbt2keCoiPfee8/pc+1zQ8WjF1NhnJ7xfvr06f3796tXr84c2rZt+/z583w/
z9qKwWR36BYmQ+V0KpAwNUOGDKlZs2aNGjUyMjK8X19C5Am6WEREREBAwMKF
C10tq56WloZn5IOmWdt9hUf8EMPp6enEUu3atX19fenRbNPNlbFoACLw5s2b
Tu9nNAssoE7Nsj+pqan5PudgxWCSI+gBJoPAcPXsv3379k2ePJnDHzp0qJXV
HoTwaDAJTnOysWLFikSX08vPKLBJSUmlSpVCLTPYaf3EyiUmJhKc6MD169e7
nxWhTpAjtklbp1u7ePEixbx8+fItWrQ4duxYvpdNtmIwmQOtgckwK6et6vr1
6ytXrsTtYjDnzZsngyncQ0Rdu3bt0KFDrVu3DgoKMs1oy5YtWVlZ7l9Ii6GF
LV26lD5YuXJlpMjs2bMtrqP44MGDU6dOVatWDSvXp08f9+dkiHNz6enjx49d
jVy0aBH2tnDhwgT/2bNnrczBEYsGk/lk5+DUFNOLeRNiYmLMvaX5eDSnEKJg
mDt3bps2bX75y18im+Pj4w8fPmz9tchss4o1dc+jBbt06RLVcu/eva6uKaLE
GfXeuHFjxHy+T1NbMZi4jzNnzjAZHIfTr6IQGLy8Tp06ISEhMpgFz+7du4cN
G+bj44PKddWIN23ahLfig46Li9uzZ0/uP/F5rVu3rl27dgS2Wc6diHL//K8b
N25g0+bPn+90/Z8CNpio1qtXr2KuN2zYQPg5Vd0ff/yxufR30qRJKOf8TUa8
Ung0mFRd4q1Tp05lypShADren/7vnBXSyM0SJUr069ePwU7PBK5atQoBSXBO
nz7d4+KTX375JdtBKLpKUpvBbNq0qZsO4hErBpM50BoYSQI6NY82g6lLZIUV
iChyzSzKWrNmzd69e1uUN4gxKjzZShejl82bN8/6TvFxBGfZsmVRd/yAyXUz
2CxTQGadP3/+9u3bTseQ0d26dSsYg0lvzcjB6RUUxmDS04sVKyaDKcTPkwsX
Lqxfv75GDuT79u3bKS/WZTPCGPHg5+eHGklJSXFfwWDKlCkUqGbNmh0/ftzR
r928efOzzz4rXrx4UFBQ9+7df+xvMCn4aAysx5o1axxvlkfkXLt2DWsZGBiI
Ebh165YeeVbAoPH4EIsUKUIb+uijj5yOiY+Pb9SoER+04yP2iMzOnTvTXiMj
I5ctW3b58mVXX47YSE9PJ/AQANHR0Uhiu3jmv1u3bmVrCG+2vG/fvnwvdGDF
YOKpsc9kZdu2bdEYTpNrzpw5bOT1119fvny5FvkRVvBoMIlqyt2QIUMCAgIo
gHv27LE7/4af2rZtm7l8fcKECQx2WqhJQMzgW2+9hY/zuIbJzJkzUd3169cn
xRwjmXyhNZgHU/bs2ZMmZeVJ8U7xaDApERzyiBEjwsLCpk6d6nQdFdT10KFD
fXx80PwHDx7M92TEK0JsbCyFmoBB/9DULl686FHeIMMuXbqEsqpVqxbZinba
sWPHjRs3rO+UdkaUlixZkpQhSt33vqNHjy5cuBA59MEHH2zYsMHpmFGjRjVs
2BCDyUyuXr1qfSa5sWIwqVFbtmzhHWPmixYtchzAW0ftat++falSpWbPnq2n
dAnxc4MKlpaWFhMTYxYHGz58+O3bt/N0W9mRI0dGjx7Ny1EjVp4INnbsWOwA
41euXJmZmfns2TNbjf3nP/956NCh+fPn0/qRJYy0ey0jc493jxWDyb66du3K
GCoq1YwJ2DbOjqiB2G1fX180T//+/bOzsz3aZ/FyuX79OmqQTtSiRYuRI0fy
X3qT+RRQdA8ePMjIyKABVatWzc/Pj/CznXc1i77SmmvXrl2+fPlp06YdOHDg
sQtym0Q6ckREBPFJBC5evPjOnTvmrALxwK6vXbuGTggNDcXQjRs37tSpU3YT
ZrDZpscFh60YTI4XsY0+r169euvWrdEk9+/fN3frfPfdd+YEL0Y4KCiIw0Tw
52PZIvEK4tFgUgYpd3FxcZQ+CuDSpUvNQqn83tyKReQTtIGBgRTzOXPmOF6/
zUiygBoeHByMZN29e7fHK1pJUhwr2hXHunfvXttJTlP2EZC0DCZD9lEKyPTc
1djMyuLhWzGYTBjpSx2IjIykNdg9BAGRT2JSlPz9/fv160epUWsQrqAsX7hw
ISwsjHwJCAgg9ayskE9E4S5Xr15N/a9atWrz5s1pYXldt/zTTz9F4ZDpyDPm
4NFgzpo1q0iRIuHh4eT+rVu3ckc16og4b9Omzdtvv01L5RDy/WQQKwaTFEtN
TSW/6H3kqV2KUXAYgHDF7dJAaf3erOguhPgxOH36NJWETCeL+cHppVDuSUlJ
6d27t7kI6rPPPvM4fvny5b169WJ8x44d8XcPHz60FT32npiYaBZJGzx4sKNd
pcIw3mIrt2IwN2/eTOFlDIVu/Pjxua9CZEfoGdSF2QKbsrJT8XLBr/FBIGKN
heQTOXnypFm87u7du0eOHOGjQXNWrFiRH3KvOYAcRQCXKlWqSpUq7dq1O3Hi
xPnz56+6IPcZlcuXL/PCChUqlCtXjuZFTzd3IjMNdk20kyzFihVjABrY8Tqi
mzdvmm16lLvWL5FFmdBn2S8pZnvQ/Ndff02Ec9QcIH8aNmyYTuEKi3g0mIbk
5GRzgatZosfUXgKbHxISEjCD/GnAgAFO7/xlJKEbFRWFPCYBjx075nFWiGG2
Zm7TwGza4vn7779nj/zGXF7YrVs3DK/da80SlxbPPVp5DiaTx8a+mcOYMWP+
8pe/5B6A9I2OjjYnQvWIZOEe+tSkSZMKFSpUp06dfv36ebxNw/Do0aNNmzbR
g3B8bdu2pffl42qZnTt3sgWMbXx8vMcEoZ396U9/MjHfsmVL8jr3OrHmnFLR
okVpxIR9XmeSG4uXyGJ4mXyJEiVCQ0PZde7L6jDLZC5boLw0aNDA4lsqhChI
Jk6cGB4eTulDwFM08FP/7QL8FxLd8cvN2bNnd+jQgVa7du1aK9fkX7p0CbtX
u3ZtBDxCAu3xwQcfjM0BtVOjRg1MAd5z48aNdne+XLx4kZLC+MmTJ1MGPe4o
PT3dfBkaERGBmnI6xnyBy+7KlCljHvo5evRoZhIbG8uO3n77bR8fn2bNmq1Z
s8bNAxbFjwcNka66Y8eOoUOH4qToJnQc4o2ARN/WrVv3jTfeIGZ69uxJM7J9
jcIPxI+5kqd06dK8ik+WNtTQBdu3b7edjDWL/AwePJimRmujAyJr2R27aNKk
CUaPZKHdJyUlffPNN7nPddDgsKIo6hYtWvTo0cPjAlm8HAFP0uFV6f7kheOY
Fy9eMJ9Vq1axWZopVjQkJKR9+/bMp02bNhwUh1+1alUCmOxwtQqQEHbYDCbB
v3DhQlfD/v73vyMyK1WqVL58eRoEKYDneu+99/iBRCBu+dOePXucfndAOhw6
dIjIpM6TTVbOfpARKSkpbBwRGxAQQLqZvjBq1Ch+SZqzRxrH+vXr7RYd4r/L
ly+nYs+dO5c64HFHVu7BJO/oMiNGjCDfOcywsDAG06o+/PBDfggODuY9MQ+f
9fJ5zeL/Nzdv3lywYAFSB42B0WvevDnBjKtylFh9+/Y1X9WZF+7atYt4owcR
ZkgRwtupMEPe9OnThzx1fP4IHWHdunV0DbqYqwcJ5YZ2xt5RemQfO8UOMyXy
nRyk/9L12BS/Z3d2F9B+++235CCTGTRokJXzLRYNJkdEspPypvd169YtOjqa
ycTExNCUyUpys0uXLry9HFq+76USQvxIDBw4kNaJBqhVqxaJ/F+u6dWrV0ZG
huNSBlOmTEHxIuNxalaWrX748OHnn39unndPvaXwMgFMHLKcrs2OGjVqtGTJ
EsfbXvgNKoKqQpHB8Xnc0fHjxxctWoRWoe4hA1wNQ9izO8QMAoYiRv1nMsyB
iTE95jN16lQ2le8VC4X3ZGVl8YnTfIOCgmrWrGnihM8Ly8lv+vfvj0i+e/eu
7UtDHOJHH33Eh4gMplcGemLr1q12V/sgdFGShCjbJzVMCtDlkdk0+hkzZuzb
t89uksZg0gTxgFhgj2ckHj9+nJqa2qlTJzY7bdo0N7mTmZm5dOnS7t27s3dm
a+bDDxw+MySF582bR2Lm+25Q8apBcFL0Kleu/M477yxbtszVsEePHuGeoqKi
kJoUXlKPeKtfvz4/kFnUbZzj1atXnZ7ZePLkyc6dOzt37kyUxsXFOT1/4gih
/sc//pG9mFyjKTRt2pQdEfDslCpN4zh16pTdA/hwr0lJScyQnP3kk0887uXI
kSOMp2fhH7ds2eJq2Pnz57GfTIBdMxkOnJlQVfiB4hMaGkpnwc/m+0JB8SpA
FCUmJiItSDdKd8OGDV1JLMKe5mJbRoCWN2DAAKKUwDZSxClkillm6tq1a3a7
vnXr1h/+8Ad2jR1zk+a5QZ7t2LGjd+/e9erVY8L0MibM9pkb+pBcRgdSOjio
3K+i+5CDjGzVqhWm2ONejMFk+2wZD+tqGIWFdwOHSx3w8/OjF3O8ZjIcNb9p
2bLl9OnT9QRMIX6e/OpXvyJ5zfc4FJDqrunatatTgzl+/HhEMgPS09MpaFZ2
irRGlsTHx0dGRvLCQoUKFStW7M0337SpZaevwmAisxk2aNAgKwYTaZScnGyu
Hty0aZP7wTNnzqRyMhkfH58SJUqYy7Q4rrFjx3qzkq14WZjbWPgo+VAQeHw6
9BrkMb/B69kFHvoZZYj8a9++fTsL7N+/33GhyLNnz/7ud7/r0qWLOdsAZApi
e+/evU7No7l+G8mKE2RWrlbhs4EhZVMxMTFMEnng/hYS/srgPn36MFvShMnU
rVvXPOD++PHjejyryBMEMLWRmt+zZ89169a5GYnGI/CIZ8wdtbRw4cJFihQx
90RPmjSJjuDqUnBzBThFlRd6DO/ckEdENaGOg2NHRXMg4Jnq1KlTaRyOK60h
bhMSEhj861//2so6ACdPnjRfKk2cOBE57WYkR8Hk0cAobbbPsfMO8ANpaA5f
Jx6Few4dOkSoEGxGZZnq7RQEWG6DOX/+fLKA39PvqPZutJkrg4kNNHGOZMrT
815JIhLK3N5YqlSpX/ziF2XKlCEFaKnIPMevSvNnMM3FSOSs+8HHjh1bvHgx
7wyTKVmyJJMpW7ZscHAwfZMKY/HMlRCi4JHBNMhg/syRwZTBFC8LGUwZTFEw
yGA6IoMphBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghRJ74H1vH/GM=
    "], {{0, 721}, {1227, 0}}, {0, 
    255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{540.1333333333348, Automatic},
  ImageSizeRaw->{1227, 721},
  PlotRange->{{0, 1227}, {0, 721}}]], "Input",ExpressionUUID->"b2e1e8e5-5020-\
4e36-9bb5-6a1cc1c1ff38"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"c9190fb0-715b-4cd8-914a-1f283f5a1921"],

Cell[CellGroupData[{

Cell["Classification of IF-97 steam dataset", "Section",
 CellChangeTimes->{{3.7650192127166147`*^9, 
  3.7650192398416324`*^9}},ExpressionUUID->"63f98461-42ce-4498-96a0-\
7515e434b618"],

Cell["Much the same process as for the Iris data set....", "Text",
 CellChangeTimes->{{3.7650192497166286`*^9, 
  3.7650192559041433`*^9}},ExpressionUUID->"47b6b672-87a3-48b1-b251-\
f431fffa9c1c"],

Cell[CellGroupData[{

Cell["Import IF-97 thermodynamic data ", "Subsubsection",
 CellChangeTimes->{{3.7650194637144103`*^9, 
  3.765019472386263*^9}},ExpressionUUID->"715d17c7-26d8-4c87-938e-\
100e11bbc1c6"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
    "url2", "=", 
     "\"\<http://pages.mtu.edu/~dnaneet/thermo/hptr_dense_1.txt\>\""}], ";"}],
    "\n", 
   RowBox[{
    RowBox[{"datasetDirty", "=", 
     RowBox[{"Import", "[", 
      RowBox[{"url2", ",", " ", "\"\<Data\>\""}], "]"}]}], ";", " ", 
    RowBox[{"(*", 
     RowBox[{
     "data", " ", "set", " ", "is", " ", "dirty", " ", "because", " ", "it", 
      " ", "has", " ", "NaN", " ", "entries", " ", "for", " ", "enthalpy"}], 
     "*)"}]}]}]}]], "Input",
 CellChangeTimes->{{3.765019280294711*^9, 3.7650193023572416`*^9}, {
  3.7650193429822283`*^9, 3.765019343341629*^9}, {3.7650194003864737`*^9, 
  3.7650194150426607`*^9}, {3.7650194597769203`*^9, 3.765019483495574*^9}, {
  3.765019519854918*^9, 3.7650195201674175`*^9}, {3.7650195913703594`*^9, 
  3.765019604089034*^9}},
 FontSize->14,ExpressionUUID->"8b3ab186-a3f8-4d19-a133-b3d9a4f3adc7"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7650193886052103`*^9, 
  3.7650193901521254`*^9}},ExpressionUUID->"2c2d75f0-5677-40c9-8b62-\
cb8e3c5e39c8"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Clean - up dataset to exclude data with region = 0 (h=NaN)", \
"Subsubsection",
 CellChangeTimes->{{3.7650195011674395`*^9, 
  3.7650195489485674`*^9}},ExpressionUUID->"d3d4bf76-5c20-4f34-ada1-\
a8ea20ff9bdd"],

Cell["Dirty data and it' s structure :", "Item",
 CellChangeTimes->{{3.7650196148702483`*^9, 
  3.7650196241202745`*^9}},ExpressionUUID->"87dd6b86-de35-447d-ad77-\
a6678ae91732"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Select", "[", 
   RowBox[{"datasetDirty", ",", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"#", "[", 
       RowBox[{"[", "3", "]"}], "]"}], "\[Equal]", " ", "0"}], "&"}]}], "]"}],
   "[", 
  RowBox[{"[", 
   RowBox[{"1", ";;", "5"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.765019532167386*^9, 3.76501958068286*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"b9d622d2-cca9-4066-8e0b-ca9c0143063b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2000", ",", "1", ",", "0", ",", "\<\"NaN\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2000", ",", "6", ",", "0", ",", "\<\"NaN\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2000", ",", "11", ",", "0", ",", "\<\"NaN\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2000", ",", "16", ",", "0", ",", "\<\"NaN\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2000", ",", "21", ",", "0", ",", "\<\"NaN\"\>"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.7650195382766967`*^9, 3.765019581432824*^9}},
 CellLabel->"Out[27]=",ExpressionUUID->"15317a23-1a90-489d-9153-7346537aa4c0"]
}, Open  ]],

Cell["Clean up dirty data :", "Item",
 CellChangeTimes->{{3.7650196148702483`*^9, 
  3.7650196422295775`*^9}},ExpressionUUID->"74f29773-bbd4-4b36-9c0d-\
e9231052af73"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"dataset", "=", 
     RowBox[{"Select", "[", 
      RowBox[{"datasetDirty", ",", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "[", 
          RowBox[{"[", "3", "]"}], "]"}], "\[NotEqual]", " ", "0"}], "&"}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"s", "=", 
     RowBox[{
      RowBox[{"Dimensions", "[", "dataset", "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}]}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.7650194277301536`*^9, 3.765019435370714*^9}, 
   3.765019672104495*^9},ExpressionUUID->"2b671017-37a7-4ca4-9430-\
9b5f49c1501d"],

Cell["Clean data is (T, P, region, h):", "Item",
 CellChangeTimes->{{3.7650196148702483`*^9, 
  3.765019667151388*^9}},ExpressionUUID->"f66ddc23-6653-4215-be5c-\
c7ed3e3b342a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Take", "[", 
   RowBox[{"dataset", ",", "5"}], "]"}], 
  RowBox[{"(*", 
   RowBox[{"names", "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"'", 
       RowBox[{"celcius", "'"}]}], ",", 
      RowBox[{"'", 
       RowBox[{"bar", "'"}]}], ",", 
      RowBox[{"'", 
       RowBox[{"region", "'"}]}], ",", 
      RowBox[{"'", 
       RowBox[{"kJPerKg", "'"}]}]}], "}"}]}], "*)"}]}]], "Input",
 CellChangeTimes->{3.7650196733076367`*^9},
 CellLabel->"In[29]:=",ExpressionUUID->"0130dd0d-e330-4624-a4c1-2ee53743e39a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"10", ",", "1", ",", "1", ",", "42.1174301501931`"}], "}"}], ",", 
   
   RowBox[{"{", 
    RowBox[{"15", ",", "1", ",", "1", ",", "63.0777630307515`"}], "}"}], ",", 
   
   RowBox[{"{", 
    RowBox[{"20", ",", "1", ",", "1", ",", "84.0118111671365`"}], "}"}], ",", 
   
   RowBox[{"{", 
    RowBox[{"25", ",", "1", ",", "1", ",", "104.928067511896`"}], "}"}], ",", 
   
   RowBox[{"{", 
    RowBox[{"30", ",", "1", ",", "1", ",", "125.832506242021`"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.7650194543081636`*^9, {3.7650196694482217`*^9, 3.7650196738232117`*^9}},
 CellLabel->"Out[29]=",ExpressionUUID->"366dc0f3-75ac-4172-baa1-f6f91cc8feb9"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"773d36f9-5f94-471d-b27f-326fb350276e"],

Cell[CellGroupData[{

Cell["Data distribution into Bins and Clustering", "Section",
 CellChangeTimes->{{3.7650196992137337`*^9, 
  3.7650197060574703`*^9}},ExpressionUUID->"4a2c2cda-e718-4a30-b3a4-\
e9ea6c8c14ee"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"T", "=", 
   RowBox[{"dataset", "[", 
    RowBox[{"[", 
     RowBox[{
      RowBox[{"2", ";;", "s"}], ",", "1"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"P", "=", 
   RowBox[{"dataset", "[", 
    RowBox[{"[", 
     RowBox[{
      RowBox[{"2", ";;", "s"}], ",", "2"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"r", "=", 
   RowBox[{
    RowBox[{"dataset", "[", 
     RowBox[{"[", 
      RowBox[{
       RowBox[{"2", ";;", "s"}], ",", "3"}], "]"}], "]"}], "/.", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"0", "\[Rule]", "\"\<r0\>\""}], ",", 
      RowBox[{"1", "\[Rule]", "\"\<r1\>\""}], ",", " ", 
      RowBox[{"2", "\[Rule]", "\"\<r2\>\""}], ",", " ", 
      RowBox[{"3", "\[Rule]", "\"\<r3\>\""}], ",", " ", 
      RowBox[{"4", "\[Rule]", "\"\<r4\>\""}], ",", " ", 
      RowBox[{"5", "\[Rule]", "\"\<r5\>\""}]}], "}"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"h", "=", 
   RowBox[{"dataset", "[", 
    RowBox[{"[", 
     RowBox[{
      RowBox[{"2", ";;", "s"}], ",", "4"}], "]"}], "]"}]}], ";"}]}], "Input",
 CellLabel->"In[30]:=",ExpressionUUID->"e15978e8-ccb5-4d5c-80ef-1597589bc2e4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"regionIdentification", "=", 
   RowBox[{"Thread", "[", 
    RowBox[{"{", 
     RowBox[{"T", ",", "P"}], "}"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"thermodata", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"Thread", "[", 
     RowBox[{"regionIdentification", "\[Rule]", "r"}], "]"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.765019777666507*^9, 
  3.7650197842758484`*^9}},ExpressionUUID->"7fdceadb-5e81-4dcb-ada8-\
65dafc20b6c0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"s", "=", 
   RowBox[{
    RowBox[{"Dimensions", "[", "thermodata", "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"training", "=", 
   RowBox[{"thermodata", "[", 
    RowBox[{"[", 
     RowBox[{"1", ";;", 
      RowBox[{"Ceiling", "[", 
       RowBox[{"0.9", "*", "s"}], "]"}]}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"validation", "=", 
   RowBox[{"thermodata", "[", 
    RowBox[{"[", 
     RowBox[{
      RowBox[{"Ceiling", "[", 
       RowBox[{"0.9", "*", "s"}], "]"}], ";;", "s"}], "]"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.7650197930882506`*^9, 3.7650198062757406`*^9}, {
  3.7650198733222413`*^9, 3.765019874931615*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"669fea73-54d6-4342-afe8-c97d4dea19f7"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"bdb2a054-398f-45af-908c-9c09baf8f324"],

Cell[CellGroupData[{

Cell["Classification, Validation, Confusion", "Section",
 CellChangeTimes->{{3.7650202865744247`*^9, 
  3.7650202957462454`*^9}},ExpressionUUID->"24aed54e-f869-4520-94b6-\
b8d3b16e9db7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cThermo0", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"training", ",", " ", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Speed\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7650203446520205`*^9, 
  3.765020374901523*^9}},ExpressionUUID->"d73d02a2-a545-4245-9825-\
821c3df3bdff"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"r1\"", "\"r2\"", "\"r3\"", "\"r5\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"r1\"", "\"r2\"", "\"r3\"", "\"r5\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"DecisionTree\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["32922", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 32922, "ClassNumber" -> 4, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical"], "f2" -> 
           Association["Type" -> "Numerical"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 2]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical", "Numerical"}, 
                "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> Automatic, 
                "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
         Association[
          "(f1f2)" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 2]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Version" -> {11.3, 0}, "ID" -> 5999172908886121309]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 32922, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {535.5528218212745, 440.05184982686353`}, 
                   "Method" -> "Naive", "VectorLength" -> 2, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {535.5528218212745, 440.05184982686353`}, 
                   "StandardDeviation" -> {417.3827940577992, 
                    309.75112432578936`}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 2, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                   True, "Invertibility" -> "Perfect", "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                "Model" -> 
                Association[
                 "Matrix" -> {{-0.7071067811865474, -0.7071067811865476}, {
                   0.7071067811865476, -0.7071067811865474}}, "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {535.5528218212745, 440.05184982686353`}, 
                    "StandardDeviation" -> {417.3827940577992, 
                    309.75112432578936`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 2, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.012358307966400183`, "MaxTrainingMemory" -> 
                  1105824, "DataMemory" -> 526904, "FunctionMemory" -> 21760, 
                  "LanguageVersion" -> {11.3, 0}, "Date" -> 
                  DateObject[{
                    2019, 4, 23, 10, 58, 26.1210893`9.169566202145644}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 2, "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Type" -> "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
             3183744061192450103]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Mean" -> {535.5528218212745, 440.05184982686353`}, 
             "StandardDeviation" -> {417.3827940577992, 309.75112432578936`}, 
             "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Version" -> {11.3, 0}, "ID" -> 6290908127098961799]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 1716634207928958562]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association["r1" -> 1, "r2" -> 2, "r3" -> 3, "r5" -> 4]}, 
             "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
             7986107592405538806, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 7038916035376012904]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 4], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[
       "r1" -> 0.3640891696531616, "r2" -> 0.3728664277470692, "r3" -> 
        0.13196258276134362`, "r5" -> 0.13108181983842557`]], "Prior" -> 
    Automatic, "Utility" -> 
    SparseArray[
     Automatic, {4, 5}, 0., {
      1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    "Speed", "BatchProcessing" -> Automatic, "Model" -> 
    Association["Tree" -> MachineLearning`DecisionTree[
        Association[
        "FeatureIndices" -> 
         RawArray["Integer16",{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
           1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
           2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
           2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
           2, 2, 2, 2, 2}], "NumericalThresholds" -> CompressedData["
1:eJwdx11Ik3EYxuFNa46hlmHqkCLXBGfZYGFG7H3/mSW2CtqSTQuTaclYmuXS
WoZNp0VqijpB1OZMkXRuaEVp7H0eUsM+/CAkthmVmpp1YGU17SDI7eD6cd9R
WfmKHD8Wi6XjrkehvppYUKDWn+J4z3l17l5JLnt9GtfxIm/jzfoKZKfl4HNh
Bh4CGS7rabQnx2O5UIzpfiIUzwjwRy8fp1vCsE+/2eeWioeXkwMwWcjG/Rs8
4BU89x0G732G2uIPcCDhLSysjECdfQCk2l7YktIFX6It0DDbABq8C6HFpTDV
XwQleVoQic7Cu3k5GCxHwBkeB3G1oT5uGRe4QWtMZvknJlBnZ7K/Nfrohq8z
Ox4eZSYsEYxn+6SjfS3d8btuj9Sr7cKgVDAaRBW6aGr0az61j9NN3Qmfpi6a
NtImiYD0JEWTqoxH2HK8HwdjbfiSb0UntxsXV7vQs9iJoS8suPOxGRPrm/Fk
aRPmZ5qwdXcNWiOr0b1UgUtOI+6SFaOGo8POIS3OlmT5SPlKPL0qx5UTFIp5
8figTIj+2yLwoHsT3mgMQHumB2JcC/AxcBxUFQ4IetYBw8uVcG3iCswnJMEr
Phu0nDamXa50+M8rqNi2MaovL4Z+U6WlxSE19JMmM80695QO1rnoyLK/dJE2
hKRVbyX/fkYRo15Cxg8fIwU9KpI6doY4Ci+R+yUGopyqJAl/aojF3EGy56wk
9ZeNcFMGiKN1iNhsI8Qw85qo/SZJmMpNOJr35D92cBKl
          "], 
         "NominalSplits" -> {}, "Children" -> CompressedData["
1:eJwVj2l4CAQAhl8Sm/t83DK3EAvLWUbSXLG5S9rYEdqyjbXssrlyRI5ylHJf
uQqRbuXKVblF5T6KSuWK1/bj+97ne95fX1BUQnhMfiApILfCI1NCExMjUyMC
c0dYfHJ0bHRicEhcns/JTR6PedR8/OmTFOC2t7xpKA/zNBv92J/80ad4lo78
ayf+8YZ/e8XOFOV/i9GFEnTjgPs953Nc8Lyl6UF3ehJGWz5yg+vtTQX2OMe+
VGKd/RjAO75tHwayy52+yGoH8aszjaQGUdRkCLWIZrmxrHSFdfjWZS41hleZ
4mQXu8hXiKcRCaSb5ggSacI3vkRLcsz2S78whddozmk/9zNfJ41UWpFFm9y/
x23NXz6O5ueOD1GQIx62Hdc9ZCHaE0AH/vOaf1iYIvzuVZ+hOIGU4wcPetlL
XrQUXSlDScLZ517Pesb73rMsd/3e8kRQkXnOtRdVGGOWldntWqvSn+dZ44f+
5iO8QBCznWV1dliNR8k0wxm+5XSnOZhVfmddahPHm061Hi9Tn+0usQFDacgw
HmOSbzjRCS70A4eTRGPGO86xBvOLX/uVyTRjJCE05X0X+J6jaMETnHKbnzqa
dLa6xU/cbAY/m8kYTnrCd51vNpt8AGAHEMI=
          "], 
         "LeafValues" -> CompressedData["
1:eJxdU81KA0EMzsxOf7attqtSsaIiiNaCFRUKPfYg4sVDxZsIFWsVpIVWEO99
AMGDbyEKevQVfBzPbjNJdmZZ5kvyZSbJZLKb16PurQaAST6Gbu+pMx73ns+j
2LgYTu4Hw/7N6fCxP+iPD1p3s33TeJl4Kfx+Kwoi0hW8IFYRG3XLrZMvgAxp
e4igNcojOf1NcgdxjiwdZ1PylaFEnoZwVYpvrSzt52xnmvdZJi9xmyhD2Rki
Pij251Aa0OR/N1abCvODe+tSyQedMFQR17SI+Lo2ww3Jz1HyXr0aap7NN9PE
RB7rakHq3KeyGZrCfHmR2sKXEI+ponmprBXal7B20Vg2R3aGOsQvrGEXZYH8
q6mbGqltG/FE+f4s+pPXTrTA6dPMWqE6rF2j84EwW1Qf36Pi5S9I3DeSl+C+
9B/wvGSc7ijYlzwcdykVz9Z5lbpXKC9kiD8kaZxT7h8Skuwo2xeOX3YwmbN0
x3juihKX4y17fUw62AY/D2v+ZKYnMpnABa8+259/ZVkgMw==
          "], "RootIndex" -> 
         22, "NominalDimension" -> 0]], "Processor" -> 
      MachineLearning`MLProcessor["Values", 
        Association[
        "Info" -> Association[
          "(f1f2)" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 2]], 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], "Method" -> 
      "DecisionTree", "Options" -> 
      Association[
       "DistributionSmoothing" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "FeatureFraction" -> 
        Association["Value" -> 1, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.06194113069274249, 0.0076419173267086304`], "Accuracy" -> 
         PlusMinus[0.9845001355608346, 0.0022377165496092117`], 
         "EvaluationTime" -> 3.4389755764600625`*^-6, "TestSize" -> 6584, 
         "TrainingSize" -> 26338, "TrainingTime" -> 0.37575961812323755`, 
         "TrainingMemory" -> 4096496, "ModelMemory" -> 7664, 
         "ExperimentCount" -> 1, "ModelUtility" -> 86.96003539052742, 
         "MeanCrossEntropyHistory" -> {
           PlusMinus[0.06194113069274249, 0.0054036515629826455`]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.9845001355608346, 0.001582304546602037]}, 
         "Configuration" -> {
          "DecisionTree", "DistributionSmoothing" -> 1, "FeatureFraction" -> 
           1}, "FinalTrainingSize" -> 32922], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 216170166457692]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.3993770714451987, 0.017062373813074138`], 
              "Accuracy" -> 
              PlusMinus[0.8318237954507929, 0.009523503006563494], 
              "EvaluationTime" -> 1.6885384356182504`*^-6, "TestSize" -> 3100,
               "TrainingSize" -> 50, "TrainingTime" -> 0.004269114436728639, 
              "TrainingMemory" -> 47712, "ModelMemory" -> 15264, 
              "ExperimentCount" -> 1, "ModelUtility" -> 14.313364285308133`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.3993770714451987, 0.012064920226364493`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8318237954507929, 0.006734133556591519]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.20704595499318837`, 0.020050836613511577`], 
              "Accuracy" -> 
              PlusMinus[0.9270923083118682, 0.009609792361756131], 
              "EvaluationTime" -> 2.2293060517514898`*^-6, "TestSize" -> 1500,
               "TrainingSize" -> 250, "TrainingTime" -> 0.004396554943822115, 
              "TrainingMemory" -> 68296, "ModelMemory" -> 17760, 
              "ExperimentCount" -> 1, "ModelUtility" -> 26.932343141411746`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.20704595499318837`, 0.014178082537877544`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9270923083118682, 0.0067951493447924475`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.17825619355076172`, 0.04514211179483713], 
              "Accuracy" -> PlusMinus[0.9136735175484847, 0.0291632806409823],
               "EvaluationTime" -> 0.000010169581404975996`, "TestSize" -> 
              100, "TrainingSize" -> 1000, "TrainingTime" -> 
              0.01769826478488071, "TrainingMemory" -> 174320, "ModelMemory" -> 
              22632, "ExperimentCount" -> 1, "ModelUtility" -> 
              25.98809991916285, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.17825619355076172`, 0.04514211179483713]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9136735175484847, 0.0291632806409823]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.13261363643966131`, 0.002699984719858567], 
              "Accuracy" -> 
              PlusMinus[0.9583444719675384, 0.0017798876260252975`], 
              "EvaluationTime" -> 1.463354895023866*^-6, "TestSize" -> 25500, 
              "TrainingSize" -> 6000, "TrainingTime" -> 0.014048961673479174`,
               "TrainingMemory" -> 860240, "ModelMemory" -> 29800, 
              "ExperimentCount" -> 1, "ModelUtility" -> 43.56263984764824, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.13261363643966131`, 0.0019091775045120534`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9583444719675384, 0.0012585706101125135`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.11548531068611503`, 0.004603720862643793], 
              "Accuracy" -> 
              PlusMinus[0.9693446082325012, 0.003180573683302863], 
              "EvaluationTime" -> 2.6345069640614245`*^-6, "TestSize" -> 6584,
               "TrainingSize" -> 26338, "TrainingTime" -> 
              0.17353519681575497`, "TrainingMemory" -> 3626840, 
              "ModelMemory" -> 37736, "ExperimentCount" -> 1, "ModelUtility" -> 
              48.33610486741327, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.11548531068611503`, 0.003255322240665408]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9693446082325012, 0.002249005219526929]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 2.6345069640614245`*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.11548531068611503`, 0.004603720862643793], 
             "ModelMemory" -> 37736, "TrainingMemory" -> 3626840, 
             "TrainingTime" -> 0.22118481606814655`], "Index" -> 1], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.3862513452738554`, 0.00021061992414494804`], 
              "Accuracy" -> 
              PlusMinus[0.6905688182890662, 0.005802360303601235], 
              "EvaluationTime" -> 1.1555827199957271`*^-6, "TestSize" -> 
              12700, "TrainingSize" -> 50, "TrainingTime" -> 
              0.007278078892801436, "TrainingMemory" -> 65232, "ModelMemory" -> 
              9088, "ExperimentCount" -> 1, "ModelUtility" -> 
              4.220079245329493, "MeanCrossEntropyHistory" -> {
                PlusMinus[1.3862513452738554`, 0.000148930776615889]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6905688182890662, 0.004102888317564068]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.3860154242436291`, 0.0016843908344246256`], 
              "Accuracy" -> 
              PlusMinus[0.7736700309107323, 0.01532176031994678], 
              "EvaluationTime" -> 1.571861288088057*^-6, "TestSize" -> 1500, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.0070816437487580255`,
               "TrainingMemory" -> 86984, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.171687323153288, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.3860154242436291`, 0.0011910441811901198`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7736700309107323, 0.010834120621949333`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1.571861288088057*^-6, "MeanCrossEntropy" -> 
             PlusMinus[1.3860154242436291`, 0.0016843908344246256`], 
             "ModelMemory" -> 9088, "TrainingMemory" -> 86984, "TrainingTime" -> 
             0.9398455808792483], "Index" -> 2], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.3929280784972384, 0.09334895394206279], "Accuracy" -> 
              PlusMinus[0.9136735175484847, 0.0412431070057699], 
              "EvaluationTime" -> 0.000019187351515415884`, "TestSize" -> 100,
               "TrainingSize" -> 50, "TrainingTime" -> 0.005498188320576453, 
              "TrainingMemory" -> 66824, "ModelMemory" -> 5616, 
              "ExperimentCount" -> 1, "ModelUtility" -> 10.557383475769026`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.3929280784972384, 0.06600767834910329]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9136735175484847, 0.0291632806409823]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.20119548831932133`, 0.01023153613367024], 
              "Accuracy" -> 
              PlusMinus[0.9548613938425279, 0.003726304035636718], 
              "EvaluationTime" -> 3.5204642478330806`*^-6, "TestSize" -> 6300,
               "TrainingSize" -> 250, "TrainingTime" -> 0.007638447575052338, 
              "TrainingMemory" -> 96992, "ModelMemory" -> 5744, 
              "ExperimentCount" -> 1, "ModelUtility" -> 27.105277055832477`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.20119548831932133`, 0.007234788582073416]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9548613938425279, 0.0026348948523615217`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.25123300594165743`, 0.0956384147008695], "Accuracy" -> 
              PlusMinus[0.9433764878455144, 0.024522640311738453`], 
              "EvaluationTime" -> 0.00002088370725860644, "TestSize" -> 100, 
              "TrainingSize" -> 1000, "TrainingTime" -> 0.03354137212086378, 
              "TrainingMemory" -> 182544, "ModelMemory" -> 5872, 
              "ExperimentCount" -> 1, "ModelUtility" -> 15.797413586332938`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.25123300594165743`, 0.0956384147008695]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9433764878455144, 0.024522640311738453`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.06882534699856753, 0.004882997803063277], 
              "Accuracy" -> 
              PlusMinus[0.979735662009981, 0.0018756736329223677`], 
              "EvaluationTime" -> 3.917586306264156*^-6, "TestSize" -> 11900, 
              "TrainingSize" -> 6000, "TrainingTime" -> 0.04278579816673837, 
              "TrainingMemory" -> 942312, "ModelMemory" -> 6640, 
              "ExperimentCount" -> 1, "ModelUtility" -> 78.2139504298078, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.06882534699856753, 0.0034528008590650567`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.979735662009981, 0.0013263015451322132`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.06194113069274249, 0.0076419173267086304`], 
              "Accuracy" -> 
              PlusMinus[0.9845001355608346, 0.0022377165496092117`], 
              "EvaluationTime" -> 3.4389755764600625`*^-6, "TestSize" -> 6584,
               "TrainingSize" -> 26338, "TrainingTime" -> 
              0.37575961812323755`, "TrainingMemory" -> 4096496, 
              "ModelMemory" -> 7664, "ExperimentCount" -> 1, "ModelUtility" -> 
              86.96003539052742, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.06194113069274249, 0.0054036515629826455`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9845001355608346, 0.001582304546602037]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 3.4389755764600625`*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.06194113069274249, 0.0076419173267086304`], 
             "ModelMemory" -> 7664, "TrainingMemory" -> 4096496, 
             "TrainingTime" -> 0.47519057756247896`], "Index" -> 3], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.49401098264378146`, 0.0271955017749671], "Accuracy" -> 
              PlusMinus[0.8484084713830699, 0.019316738709166722`], 
              "EvaluationTime" -> 9.57208947814273*^-6, "TestSize" -> 700, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.005105318032489632, 
              "TrainingMemory" -> 77104, "ModelMemory" -> 39152, 
              "ExperimentCount" -> 1, "ModelUtility" -> 9.835759678430097, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.49401098264378146`, 0.019230123722850025`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8484084713830699, 0.013658996931660465`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.212989109067439, 0.02049158534399598], "Accuracy" -> 
              PlusMinus[0.9498572804855775, 0.008110172017382263], 
              "EvaluationTime" -> 6.945840255367587*^-6, "TestSize" -> 1500, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.0053966920777905976`,
               "TrainingMemory" -> 91176, "ModelMemory" -> 43248, 
              "ExperimentCount" -> 1, "ModelUtility" -> 23.65849954975906, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.212989109067439, 0.01448973895400243]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9498572804855775, 0.00573475763008038]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.15329089307003593`, 0.05065578653987337], 
              "Accuracy" -> 
              PlusMinus[0.9433764878455144, 0.024522640311738453`], 
              "EvaluationTime" -> 0.00004875240875387988, "TestSize" -> 100, 
              "TrainingSize" -> 1000, "TrainingTime" -> 0.015184807266902902`,
               "TrainingMemory" -> 129520, "ModelMemory" -> 43248, 
              "ExperimentCount" -> 1, "ModelUtility" -> 21.48883579369521, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.15329089307003593`, 0.05065578653987337]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9433764878455144, 0.024522640311738453`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.06938092440209359, 0.00890829067558254], "Accuracy" -> 
              PlusMinus[0.984456212557477, 0.0025097043306030265`], 
              "EvaluationTime" -> 9.338691070137143*^-6, "TestSize" -> 5500, 
              "TrainingSize" -> 6000, "TrainingTime" -> 0.04927699607614385, 
              "TrainingMemory" -> 394192, "ModelMemory" -> 47344, 
              "ExperimentCount" -> 1, "ModelUtility" -> 69.28738229188694, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.06938092440209359, 0.0062991127454853045`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.984456212557477, 0.0017746289509426448`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.05729390045942543, 0.009079377465882348], 
              "Accuracy" -> 
              PlusMinus[0.9860080254541519, 0.0021814282532293654`], 
              "EvaluationTime" -> 9.009941124350197*^-6, "TestSize" -> 6300, 
              "TrainingSize" -> 26338, "TrainingTime" -> 
              0.051173493286850336`, "TrainingMemory" -> 1605080, 
              "ModelMemory" -> 63728, "ExperimentCount" -> 1, "ModelUtility" -> 
              83.85757231024127, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.05729390045942543, 0.006420089375077739]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9860080254541519, 0.0015425027105304095`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 9.009941124350197*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.05729390045942543, 0.009079377465882348], 
             "ModelMemory" -> 63728, "TrainingMemory" -> 1605080, 
             "TrainingTime" -> 0.06907121316460622], "Index" -> 4], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.38844828120256397`, 0.018715739341531958`], 
              "Accuracy" -> 
              PlusMinus[0.8697151274372052, 0.008578268801384464], 
              "EvaluationTime" -> 5.054579107929142*^-6, "TestSize" -> 3100, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.007165463679598029, 
              "TrainingMemory" -> 85344, "ModelMemory" -> 6896, 
              "ExperimentCount" -> 1, "ModelUtility" -> 13.584770263155466`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.38844828120256397`, 0.013234026203317097`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8697151274372052, 0.006065752040299951]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.17648096077798947`, 0.00981941818808073], 
              "Accuracy" -> 
              PlusMinus[0.9549801461781715, 0.007738383385103292], 
              "EvaluationTime" -> 5.67789749202594*^-6, "TestSize" -> 1500, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.013906125668884474`, 
              "TrainingMemory" -> 881464, "ModelMemory" -> 10672, 
              "ExperimentCount" -> 1, "ModelUtility" -> 29.4835466028532, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.17648096077798947`, 0.0069433771880984055`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9549801461781715, 0.005471863367027848]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.10392698558391365`, 0.0046448255188168254`], 
              "Accuracy" -> 
              PlusMinus[0.979498529781698, 0.0036935598491978604`], 
              "EvaluationTime" -> 5.454825255631246*^-6, "TestSize" -> 3100, 
              "TrainingSize" -> 1000, "TrainingTime" -> 0.028810107657292805`,
               "TrainingMemory" -> 3429232, "ModelMemory" -> 24792, 
              "ExperimentCount" -> 1, "ModelUtility" -> 50.39882019026222, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.10392698558391365`, 0.003284387621783701]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.979498529781698, 0.002611741216086169]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.058781380805905774`, 0.005137293228700099], 
              "Accuracy" -> 
              PlusMinus[0.991263751676852, 0.004021002896766311], 
              "EvaluationTime" -> 0.00001181095322851932, "TestSize" -> 700, 
              "TrainingSize" -> 6000, "TrainingTime" -> 0.028425505321567752`,
               "TrainingMemory" -> 3608416, "ModelMemory" -> 108424, 
              "ExperimentCount" -> 1, "ModelUtility" -> 79.44236039595572, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.058781380805905774`, 0.005137293228700099]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.991263751676852, 0.004021002896766311]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.042988658052746265`, 0.006445657788484271], 
              "Accuracy" -> 
              PlusMinus[0.9918710683240911, 0.006594313885731253], 
              "EvaluationTime" -> 0.00003340537855960296, "TestSize" -> 300, 
              "TrainingSize" -> 26338, "TrainingTime" -> 
              0.037104574486980686`, "TrainingMemory" -> 4330248, 
              "ModelMemory" -> 453800, "ExperimentCount" -> 1, "ModelUtility" -> 
              86.94943008785302, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.042988658052746265`, 0.006445657788484271]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9918710683240911, 0.006594313885731253]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00003340537855960296, "MeanCrossEntropy" -> 
             PlusMinus[0.042988658052746265`, 0.006445657788484271], 
             "ModelMemory" -> 453800, "TrainingMemory" -> 4330248, 
             "TrainingTime" -> 0.05354547739591583], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^-6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6606480061266686, 0.13637358755779402`], "Accuracy" -> 
              PlusMinus[0.948033853368869, 0.00569461269157887], 
              "EvaluationTime" -> 1.3509227168189804`*^-6, "TestSize" -> 3100,
               "TrainingSize" -> 50, "TrainingTime" -> 0.019417143570711948`, 
              "TrainingMemory" -> 73416, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 8.45805717686962, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6606480061266686, 0.09643068853685353]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.948033853368869, 0.004026699250446396]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.11658678740048503`, 0.008791432068815273], 
              "Accuracy" -> 
              PlusMinus[0.9578527571915904, 0.0036052780465582646`], 
              "EvaluationTime" -> 1.0944741536364847`*^-6, "TestSize" -> 6300,
               "TrainingSize" -> 250, "TrainingTime" -> 0.02219745637871099, 
              "TrainingMemory" -> 95072, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 49.519298316505214`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.11658678740048503`, 0.006216481232200158]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9578527571915904, 0.002549316554784338]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.11749135267651871`, 0.008622287031708297], 
              "Accuracy" -> 
              PlusMinus[0.9610207527630036, 0.0024393028148686755`], 
              "EvaluationTime" -> 1.0496685216714626`*^-6, "TestSize" -> 
              12700, "TrainingSize" -> 1000, "TrainingTime" -> 
              0.029638613504303184`, "TrainingMemory" -> 257120, 
              "ModelMemory" -> 9088, "ExperimentCount" -> 1, "ModelUtility" -> 
              49.22011714271226, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.11749135267651871`, 0.006096877629457765]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9610207527630036, 0.001724847561761074]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.11996504885735683`, 0.004378741546464842], 
              "Accuracy" -> 
              PlusMinus[0.9566528654572349, 0.0017599879952586715`], 
              "EvaluationTime" -> 1.4247571436257149`*^-6, "TestSize" -> 
              26922, "TrainingSize" -> 6000, "TrainingTime" -> 
              0.24281522067307404`, "TrainingMemory" -> 1425152, 
              "ModelMemory" -> 9088, "ExperimentCount" -> 1, "ModelUtility" -> 
              48.05223655049521, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.11996504885735683`, 0.00309623784056856]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9566528654572349, 0.0012444994462543237`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1.4247571436257149`*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.11996504885735683`, 0.004378741546464842], 
             "ModelMemory" -> 9088, "TrainingMemory" -> 1425152, 
             "TrainingTime" -> 1.351744259403869], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.1], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.2939706829739509, 0.01122495150612476], "Accuracy" -> 
              PlusMinus[0.8878060714077157, 0.008044404524244844], 
              "EvaluationTime" -> 1.3599356126082282`*^-6, "TestSize" -> 3100,
               "TrainingSize" -> 50, "TrainingTime" -> 0.019487848818495353`, 
              "TrainingMemory" -> 73544, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 19.637858239402398`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.2939706829739509, 0.007937239328470968]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8878060714077157, 0.005688252989701271]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.1955382561344366, 0.004495619352365262], "Accuracy" -> 
              PlusMinus[0.9358808876627505, 0.0030817593562207568`], 
              "EvaluationTime" -> 1.0315073121665176`*^-6, "TestSize" -> 
              12700, "TrainingSize" -> 250, "TrainingTime" -> 
              0.027800562163740238`, "TrainingMemory" -> 95200, "ModelMemory" -> 
              9088, "ExperimentCount" -> 1, "ModelUtility" -> 
              29.886613297680178`, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.1955382561344366, 0.0031788829296909515`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9358808876627505, 0.002179132938768786]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.1444578201499286, 0.005164283715251956], "Accuracy" -> 
              PlusMinus[0.9593325599631474, 0.002488943241843704], 
              "EvaluationTime" -> 1.1304398835982756`*^-6, "TestSize" -> 
              12700, "TrainingSize" -> 1000, "TrainingTime" -> 
              0.041566132642474635`, "TrainingMemory" -> 257120, 
              "ModelMemory" -> 9088, "ExperimentCount" -> 1, "ModelUtility" -> 
              40.239096846094036`, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.1444578201499286, 0.0036517000350259157`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9593325599631474, 0.001759948644296112]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1.1304398835982756`*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.1444578201499286, 0.005164283715251956], 
             "ModelMemory" -> 9088, "TrainingMemory" -> 257120, 
             "TrainingTime" -> 1.3879280676740453`], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.3840724884444675`, 0.006892203160471191], 
              "Accuracy" -> 
              PlusMinus[0.6942687740836753, 0.03776283315728412], 
              "EvaluationTime" -> 3.013526084962049*^-6, "TestSize" -> 300, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.006758908504843452, 
              "TrainingMemory" -> 65976, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.023925993847124, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.3840724884444675`, 0.004873523592084534]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6942687740836753, 0.0267023554023318]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.3789217608457922`, 0.0016904006940737441`], 
              "Accuracy" -> 
              PlusMinus[0.7743265068990471, 0.015306270046737123`], 
              "EvaluationTime" -> 1.5576061978091448`*^-6, "TestSize" -> 1500,
               "TrainingSize" -> 250, "TrainingTime" -> 0.008667094889578645, 
              "TrainingMemory" -> 88480, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.19475930563162, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.3789217608457922`, 0.001195293793701991]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7743265068990471, 0.010823167344720353`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1.5576061978091448`*^-6, "MeanCrossEntropy" -> 
             PlusMinus[1.3789217608457922`, 0.0016904006940737441`], 
             "ModelMemory" -> 9088, "TrainingMemory" -> 88480, "TrainingTime" -> 
             1.148111300323676], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.18431038213315049`, 0.014698915637257576`], 
              "Accuracy" -> 
              PlusMinus[0.9471372501113315, 0.0028176062708164767`], 
              "EvaluationTime" -> 1.1710500541723737`*^-6, "TestSize" -> 
              12700, "TrainingSize" -> 50, "TrainingTime" -> 
              0.01838878135799122, "TrainingMemory" -> 73432, "ModelMemory" -> 
              9088, "ExperimentCount" -> 1, "ModelUtility" -> 
              31.229476243124648`, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.18431038213315049`, 0.010393702923193814`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9471372501113315, 0.0019923485008080705`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.14755675923018385`, 0.040431987716989255`], 
              "Accuracy" -> 
              PlusMinus[0.9530143591460561, 0.018099234603225316`], 
              "EvaluationTime" -> 2.798749391426438*^-6, "TestSize" -> 300, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.02536408213326856, 
              "TrainingMemory" -> 95184, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 36.00531861088839, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.14755675923018385`, 0.028589732691534298`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9530143591460561, 0.01279809152222683]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.12221591266765762`, 0.02761698969125181], 
              "Accuracy" -> 
              PlusMinus[0.9532771613148108, 0.011627017720416438`], 
              "EvaluationTime" -> 2.150482190647333*^-6, "TestSize" -> 700, 
              "TrainingSize" -> 1000, "TrainingTime" -> 0.07944846485507277, 
              "TrainingMemory" -> 257120, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 44.588835559988674`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.12221591266765762`, 0.01952816068664313]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9532771613148108, 0.008221543075082617]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 2.150482190647333*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.12221591266765762`, 0.02761698969125181], 
             "ModelMemory" -> 9088, "TrainingMemory" -> 257120, 
             "TrainingTime" -> 2.633991141316697], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.930155218945398, 0.0067962650159172945`], 
              "Accuracy" -> 
              PlusMinus[0.8218985473583259, 0.006825275303506831], 
              "EvaluationTime" -> 1.1790996102128843`*^-6, "TestSize" -> 6300,
               "TrainingSize" -> 50, "TrainingTime" -> 0.013640980989696705`, 
              "TrainingMemory" -> 73072, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 6.276233862040535, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.930155218945398, 0.004805685079496018]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8218985473583259, 0.004826198450574751]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6386655372568542, 0.005358981380241367], "Accuracy" -> 
              PlusMinus[0.8500784452870569, 0.004483631631995871], 
              "EvaluationTime" -> 1.0493766851775636`*^-6, "TestSize" -> 
              12700, "TrainingSize" -> 250, "TrainingTime" -> 
              0.01857352732800592, "TrainingMemory" -> 94944, "ModelMemory" -> 
              9088, "ExperimentCount" -> 1, "ModelUtility" -> 
              9.172303219423588, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6386655372568542, 0.0037893720742211146`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8500784452870569, 0.003170406331326787]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.44095756654873236`, 0.018692300300102476`], 
              "Accuracy" -> 
              PlusMinus[0.8720699010654557, 0.016025531366392634`], 
              "EvaluationTime" -> 0.000014828144908124517`, "TestSize" -> 900,
               "TrainingSize" -> 1000, "TrainingTime" -> 0.04059593119809187, 
              "TrainingMemory" -> 257248, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 10.267842097662918`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.44095756654873236`, 0.013217452298177798`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8720699010654557, 0.01133176190129395]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000014828144908124517`, "MeanCrossEntropy" -> 
             PlusMinus[0.44095756654873236`, 0.018692300300102476`], 
             "ModelMemory" -> 9088, "TrainingMemory" -> 257248, 
             "TrainingTime" -> 1.3501402278932773`], "Index" -> 10], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 6], "LearningRate" -> 
             Association["Value" -> 0.1], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 4], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 90], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.3862403441289937`, 0.00042114821218665614`], 
              "Accuracy" -> 
              PlusMinus[0.12735381138084514`, 0.005934767018478813], 
              "EvaluationTime" -> 1.421074110915563*^-6, "TestSize" -> 6300, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.007880784109793846, 
              "TrainingMemory" -> 53824, "ModelMemory" -> 20248, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.188956007795936, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.3862403441289937`, 0.00029779675672177554`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.12735381138084514`, 0.004196514003528637]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.4320952596009127, 0.07215250272818839], "Accuracy" -> 
              PlusMinus[0.864168567053435, 0.049535880900694766`], 
              "EvaluationTime" -> 0.0003081551375773018, "TestSize" -> 100, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.16489404619048392`, 
              "TrainingMemory" -> 1504144, "ModelMemory" -> 378720, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.7205542757672125`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.4320952596009127, 0.05101952395868288]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.864168567053435, 0.03502715729693045]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.09384042914961298, 0.017769968517709057`], 
              "Accuracy" -> 
              PlusMinus[0.9487126613676673, 0.016650971625111793`], 
              "EvaluationTime" -> 0.000359025852746628, "TestSize" -> 200, 
              "TrainingSize" -> 1000, "TrainingTime" -> 0.28488655371503335`, 
              "TrainingMemory" -> 1863304, "ModelMemory" -> 388224, 
              "ExperimentCount" -> 1, "ModelUtility" -> 20.69604949445127, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.09384042914961298, 0.017769968517709057`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9487126613676673, 0.016650971625111793`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000359025852746628, "MeanCrossEntropy" -> 
             PlusMinus[0.09384042914961298, 0.017769968517709057`], 
             "ModelMemory" -> 388224, "TrainingMemory" -> 1863304, 
             "TrainingTime" -> 9.38691590551612], "Index" -> 11], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.3860942251767991`, 0.00019321973571476502`], 
              "Accuracy" -> 
              PlusMinus[0.6901858659442554, 0.004379920006253271], 
              "EvaluationTime" -> 9.713405731216473*^-7, "TestSize" -> 22300, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.006551924593993647, 
              "TrainingMemory" -> 65688, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.2426964440445385`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.3860942251767991`, 0.00013662698538298288`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6901858659442554, 0.003097071137476313]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.3855595560145957`, 0.00021063737278457796`], 
              "Accuracy" -> 
              PlusMinus[0.7732591942803834, 0.005257579489323785], 
              "EvaluationTime" -> 1.359015205204393*^-6, "TestSize" -> 12700, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.0077633221658956085`,
               "TrainingMemory" -> 87576, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.198312764106108, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.3855595560145957`, 0.0001489431146672938]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7732591942803834, 0.003717670109528153]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1.359015205204393*^-6, "MeanCrossEntropy" -> 
             PlusMinus[1.3855595560145957`, 0.00021063737278457796`], 
             "ModelMemory" -> 9088, "TrainingMemory" -> 87576, "TrainingTime" -> 
             1.0288882939764543`], "Index" -> 12], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.3707103589337948`, 0.00018320442858124852`], 
              "Accuracy" -> 
              PlusMinus[0.6948010958383855, 0.0036466319695360474`], 
              "EvaluationTime" -> 1.0134967007076166`*^-6, "TestSize" -> 
              31900, "TrainingSize" -> 50, "TrainingTime" -> 
              0.008107154943422972, "TrainingMemory" -> 66968, "ModelMemory" -> 
              9088, "ExperimentCount" -> 1, "ModelUtility" -> 
              4.285153603732758, "MeanCrossEntropyHistory" -> {
                PlusMinus[1.3707103589337948`, 0.00012954509379320737`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6948010958383855, 0.0025785581941505944`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.3210667737675947`, 0.001713103205656351], 
              "Accuracy" -> 
              PlusMinus[0.7844968345384694, 0.010462470529063458`], 
              "EvaluationTime" -> 1.3534978299016228`*^-6, "TestSize" -> 3100,
               "TrainingSize" -> 250, "TrainingTime" -> 0.012383111823485489`,
               "TrainingMemory" -> 90296, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.40293204126532, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.3210667737675947`, 0.0012113468935920184`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7844968345384694, 0.007398083859065176]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1.3534978299016228`*^-6, "MeanCrossEntropy" -> 
             PlusMinus[1.3210667737675947`, 0.001713103205656351], 
             "ModelMemory" -> 9088, "TrainingMemory" -> 90296, "TrainingTime" -> 
             1.6388143847545802`], "Index" -> 13], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.16604140623580863`, 0.005772425139012769], 
              "Accuracy" -> 
              PlusMinus[0.9351700305217945, 0.0038279787007944057`], 
              "EvaluationTime" -> 2.138460163771718*^-6, "TestSize" -> 8700, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.01995883700131061, 
              "TrainingMemory" -> 73432, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 34.07686050330642, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.16604140623580863`, 0.004081720959687628]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9351700305217945, 0.002706789697569394]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.1398171474644986, 0.020559809199304127`], 
              "Accuracy" -> 
              PlusMinus[0.952285176397873, 0.011750131613027869`], 
              "EvaluationTime" -> 2.1146408208032107`*^-6, "TestSize" -> 700, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.022479992268039033`, 
              "TrainingMemory" -> 95192, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 39.60986767669982, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.1398171474644986, 0.014537980504729509`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.952285176397873, 0.008308597743406431]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.11581807251323278`, 0.008770611805091874], 
              "Accuracy" -> 
              PlusMinus[0.959733808977023, 0.003527605716895733], 
              "EvaluationTime" -> 1.2150314885667138`*^-6, "TestSize" -> 6300,
               "TrainingSize" -> 1000, "TrainingTime" -> 
              0.042922647033415924`, "TrainingMemory" -> 257120, 
              "ModelMemory" -> 9088, "ExperimentCount" -> 1, "ModelUtility" -> 
              49.676010327328136`, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.11581807251323278`, 0.00620175908253525]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.959733808977023, 0.002494393923769405]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1.2150314885667138`*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.11581807251323278`, 0.008770611805091874], 
             "ModelMemory" -> 9088, "TrainingMemory" -> 257120, 
             "TrainingTime" -> 1.4330582226354298`], "Index" -> 14], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.0001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.11679127697925526`, 0.008726222833180208], 
              "Accuracy" -> 
              PlusMinus[0.9576185107497261, 0.003614870586751044], 
              "EvaluationTime" -> 1.7463164405490305`*^-6, "TestSize" -> 6300,
               "TrainingSize" -> 250, "TrainingTime" -> 0.02207429239870119, 
              "TrainingMemory" -> 95224, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 48.56206301364999, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.11679127697925526`, 0.006170371339486612]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9576185107497261, 0.002556099505003457]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.11748200347566223`, 0.008591386254508192], 
              "Accuracy" -> 
              PlusMinus[0.9610207527630036, 0.0024393028148686755`], 
              "EvaluationTime" -> 1.0816133932728676`*^-6, "TestSize" -> 
              12700, "TrainingSize" -> 1000, "TrainingTime" -> 
              0.03023704219421192, "TrainingMemory" -> 257120, "ModelMemory" -> 
              9088, "ExperimentCount" -> 1, "ModelUtility" -> 
              49.181927457093025`, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.11748200347566223`, 0.006075027480355636]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9610207527630036, 0.001724847561761074]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.11863427813105505`, 0.0042098517866496], "Accuracy" -> 
              PlusMinus[0.9565642000208056, 0.0017633278977455958`], 
              "EvaluationTime" -> 1.0400889174231975`*^-6, "TestSize" -> 
              26922, "TrainingSize" -> 6000, "TrainingTime" -> 
              0.1632746679347995, "TrainingMemory" -> 1424960, "ModelMemory" -> 
              9088, "ExperimentCount" -> 1, "ModelUtility" -> 
              49.126203829934234`, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.11863427813105505`, 0.002976814746130235]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9565642000208056, 0.0012468611139513299`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1.0400889174231975`*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.11863427813105505`, 0.0042098517866496], 
             "ModelMemory" -> 9088, "TrainingMemory" -> 1424960, 
             "TrainingTime" -> 0.917962395356946], "Index" -> 15], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0502873159512098`, 0.0027047147278570897`], 
              "Accuracy" -> 
              PlusMinus[0.8344011464773897, 0.003978184236584136], 
              "EvaluationTime" -> 9.83112483292525*^-7, "TestSize" -> 17500, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.014616884470191039`, 
              "TrainingMemory" -> 93480, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 5.594596739545323, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0502873159512098`, 0.0019125221252428754`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8344011464773897, 0.0028130010504980713`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 9.83112483292525*^-7, "MeanCrossEntropy" -> 
             PlusMinus[1.0502873159512098`, 0.0027047147278570897`], 
             "ModelMemory" -> 9088, "TrainingMemory" -> 93480, "TrainingTime" -> 
             1.9394851665807085`], "Index" -> 16]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
             "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 16], 
        Association["ID" -> 216165871490396]], "MaxTrainingSize" -> 32922, 
      "LastReportingTime" -> 3.7650059147772603`17.328340651968414*^9, 
      "PreprocessorEvaluationTime" -> 9.5429755245089`3.*^-6, 
      "PreprocessorMemory" -> 39928, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 50, "TimeBudgets" -> 0.7256313856000005, 
          "ElapsedTimes" -> 2.2031300000000003`, "ExperimentCounts" -> 14], 
         Association[
         "TrainingSizes" -> 250, "TimeBudgets" -> 0.9070392319999999, 
          "ElapsedTimes" -> 1.2030781, "ExperimentCounts" -> 16], 
         Association[
         "TrainingSizes" -> 1000, "TimeBudgets" -> 1.133799040000001, 
          "ElapsedTimes" -> 1.3124968, "ExperimentCounts" -> 11], 
         Association[
         "TrainingSizes" -> 6000, "TimeBudgets" -> 1.4172488000000003`, 
          "ElapsedTimes" -> 1.5937636, "ExperimentCounts" -> 6], 
         Association[
         "TrainingSizes" -> 26338, "TimeBudgets" -> 1.771561000000001, 
          "ElapsedTimes" -> 1.7187078000000002`, "ExperimentCounts" -> 4]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 5], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[216174461424988]], "ID" -> 
         216178756392284]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {620}, "ID" -> 
           4523229796654273697], "f2" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {196}, "ID" -> 
           2781649588339208262]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 9.544391348984853, "MaxTrainingMemory" -> 8558672, 
      "DataMemory" -> 6057728, "FunctionMemory" -> 304456, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2019, 4, 23, 10, 58, 35.5741261`9.303709133876225}, 
        "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7650203156210003`*^9},
 CellLabel->"Out[45]=",ExpressionUUID->"ccaf0894-a085-4caa-9b1c-10a46dbc16af"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierInformation", "[", "cThermo0", "]"}]], "Input",
 CellLabel->"In[46]:=",ExpressionUUID->"9c6d93bf-cf38-43e2-a4ea-adafcfffae25"],

Cell[BoxData[
 TagBox[
  StyleBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        FrameBox[
         StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold],
         FrameMargins->{{10, 5}, {-5, 5}},
         FrameStyle->None,
         StripOnInput->False],
        Alignment->{Left, Bottom},
        Background->RGBColor[0.93119, 0.93119, 0.93119],
        Frame->{{False, False}, {True, False}},
        FrameStyle->Opacity[0.1],
        ItemSize->{Automatic, 1},
        StripOnInput->False]},
      {
       ItemBox[
        TagBox[
         FrameBox[
          TagBox[GridBox[{
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Input type\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              RowBox[{"{", 
               RowBox[{"\<\"Numerical\"\>", ",", "\<\"Numerical\"\>"}], "}"}]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"Classes\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{",","\",\"","\"r1\"","\"r2\"","\"r3\"","\"r5\""},
               "RowWithSeparators"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Method\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox["\<\"DecisionTree\"\>",
                TemplateBox[{
                  TagBox[
                   
                   DynamicModuleBox[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
                    Data`UnorderedAssociation[
                    "RowCount" -> 2, "Length" -> 2, "InitialType" -> 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[
                    TypeSystem`Enumeration[
                    "DistributionSmoothing", "FeatureFraction"]], 
                    TypeSystem`Atom[Integer], 2], "Shape" -> 
                    TypeSystem`PackageScope`Limited[
                    TypeSystem`PackageScope`ColumnShape[
                    TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`AtomShape[189.], 
                    TypeSystem`PackageScope`AtomShape[34]]], 2, {}], 
                    "InitialData" -> 
                    TypeSystem`PackageScope`CacheHandle[1508944649], "Type" -> 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[
                    TypeSystem`Enumeration[
                    "DistributionSmoothing", "FeatureFraction"]], 
                    TypeSystem`Atom[Integer], 2], "HandleQ" -> True, 
                    "RowTarget" -> 20, "Data" -> 
                    TypeSystem`PackageScope`CacheHandle[1508944649]], 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
                    DynamicModule[{
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
                    Style[
                    Grid[{{
                    Item[
                    Pane[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["DistributionSmoothing", 
                    Style[
                    "DistributionSmoothing", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 635580401][{
                    
                    Key["DistributionSmoothing"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    635580401][
                    GeneralUtilities`Slice[
                    Key["DistributionSmoothing"]]], "Mouse"], 
                    ImageSize -> {{189., Full}, Automatic}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["1"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    635580401][
                    GeneralUtilities`Slice[
                    Key["DistributionSmoothing"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Pane[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["FeatureFraction", 
                    Style[
                    "FeatureFraction", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 635580401][{
                    
                    Key["FeatureFraction"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    635580401][
                    GeneralUtilities`Slice[
                    Key["FeatureFraction"]]], "Mouse"], 
                    ImageSize -> {{189., Full}, Automatic}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["1"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    635580401][
                    GeneralUtilities`Slice[
                    Key["FeatureFraction"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}}, 
                    BaseStyle -> {ContextMenu -> {
                    MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                    FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
                    Dividers -> All, FrameStyle -> GrayLevel[0.85], 
                    BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
                    LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
                    False, ShowAutoStyles -> False]], 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
                    TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
                    Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
                    Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
                    
                    Module[{
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                    TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                    If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                    TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 635580401][
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                    Not[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
                    TypeSystem`SparseGrid[
                    TypeSystem`H["(data no longer present)"]], 
                    If[GeneralUtilities`$DebugMode, 
                    
                    Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    "  ", 
                    TypeSystem`NestedGrid`PackagePrivate`formatState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
                    DynamicModuleValues :> {}], 
                    TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
                    TypeSystem`PackageScope`Pathbar[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    635580401]]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
                    Dynamic[
                    Replace[
                    MouseAnnotation[Null], {
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    635580401][Null] -> "", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    635580401][
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                    Blank[]]] :> (
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
                    TypeSystem`NestedGrid`PackagePrivate`path; 
                    TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
                    TypeSystem`NestedGrid`PackagePrivate`path, 
                    TypeSystem`NestedGrid`PackagePrivate`makePathElements]), 
                    Null :> Spacer[10], Blank[] :> Spacer[10]}], 
                    TrackedSymbols :> {}], FrameStyle -> None, ImageMargins -> 
                    0, FrameMargins -> 0, Alignment -> Top, 
                    ImageSize -> {Automatic, 14}]}, 
                    DynamicBox[
                    ToBoxes[
                    Column[
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], 
                    Spacings -> 
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
                    0, {{}, {0, 0.05, 0}}]], StandardForm], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
                    Initialization :> Block[{$ContextPath = $ContextPath}, 
                    Needs["TypeSystem`"]], DynamicModuleValues :> {}, 
                    BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
                    TypeSystem`NestedGrid`PackagePrivate`deleteState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
                   DefaultBaseStyle -> "Deploy"]}, "CopyTag", 
                 DisplayFunction -> (#& ), 
                 InterpretationFunction -> ("Dataset[<>]"& )]],
               Annotation[#, 
                Dataset[
                 Association[
                 "DistributionSmoothing" -> 1, "FeatureFraction" -> 1], 
                 TypeSystem`Assoc[
                  TypeSystem`Atom[
                   TypeSystem`Enumeration[
                   "DistributionSmoothing", "FeatureFraction"]], 
                  TypeSystem`Atom[Integer], 2], 
                 Association["ID" -> 238065909732705]], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Accuracy\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                
                TemplateBox[{
                 TemplateBox[{
                   "98.4500135560834621629`3.", "\"%\"", "percent", 
                    "\"Percent\""}, "QuantityPostfix", SyntaxForm -> Mod],
                  StyleBox[
                   TemplateBox[{"\" \[PlusMinus] \"", 
                    
                    TemplateBox[{
                    "0.2237716549609211625`2.", "\"%\"", "percent", 
                    "\"Percent\""}, "QuantityPostfix", SyntaxForm -> Mod]}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.980024702461616215`3.", 
                  "\", \"", "0.9889755686600529838`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.980024702461616215`3., 
                  ", ", 0.9889755686600529838`3., "]"}], "Tooltip"]& ]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox[
                 TagBox[
                  TooltipBox[
                  "\"Loss\"", "\"Mean cross entropy\"", LabelStyle -> 
                   "TextStyling"], 
                  Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"0.0619411306927424923`3.",StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0076419173267086304`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.0466572960393252315`3.",
                   "\", \"", "0.0772249653461597463`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.0466572960393252315`3., 
                  ", ", 0.0772249653461597463`3., "]"}], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Single evaluation time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "1.29`",
                RowBox[{
                 "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
                  "\"example\""}],"milliseconds per example",FractionBox[
                "\"Milliseconds\"", "\"Examples\""]},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Batch evaluation speed\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "272.`",
                RowBox[{
                 "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                  "\[InvisibleSpace]", "\"ms\""}],"examples per millisecond",
                FractionBox["\"Examples\"", "\"Milliseconds\""]},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Classifier memory\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"306.`","\"kB\"","kilobytes","\"Kilobytes\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Training examples used\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"32922","\"examples\"","examples","\"Examples\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Training time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"9.54`","\"s\"","seconds","\"Seconds\""},
               "Quantity"]},
             {
              ItemBox[
               
               DynamicModuleBox[{
                MachineLearning`file4Automation`PackagePrivate`pos$$ = 1}, 
                DynamicBox[ToBoxes[
                  Show[
                   Part[{
                    Graphics[{{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, -1.7955180865738964`}, {
                    5.521460917862246, -2.149119327091203}, {
                    6.907755278982137, -2.26406668809462}, {
                    8.699514748210191, -2.8339301271834767`}, {
                    10.178768042270166`, -2.781570849958191}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{3.912023005428146, -1.9778396433678511`}, {
                    3.912023005428146, -2.6516085703895222`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    3.912023005428146, -1.7955180865738964`}}, {{
                    5.521460917862246, -2.149119327091203}}, {{
                    6.907755278982137, -2.26406668809462}}, {{
                    8.699514748210191, -2.8339301271834767`}}, {{
                    10.178768042270166`, -2.781570849958191}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    3.912023005428146, -1.9778396433678511`}}, {{
                    3.912023005428146, -2.6516085703895222`}}}]}, {}}}, {}, \
{}, {}, {}}}, {{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    Line[{{3.912023005428146, -1.8309017434137465`}, {
                    3.912023005428146, -1.7613437640880991`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.521460917862246, -2.227520707412557}, {
                    5.521460917862246, -2.0764203543114825`}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{6.907755278982137, -2.309789381018918}, {
                    6.907755278982137, -2.2203434714486576`}}]}, {
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{8.699514748210191, -2.925384019571849}, {
                    8.699514748210191, -2.750143721878738}}]}, {
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{10.178768042270166`, -2.9132455389605547`}, {
                    10.178768042270166`, -2.6652343042469537`}}]}}}, {}, {}, \
{}, {}}}}, {DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {3.6782145717862083`, -2.9092987430341726`},
                     PlotRange -> {{3.7795766094922505`, 
                    Log[32922]}, {-2.89161968499512, -1.7955180865738964`}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {3.6782145717862083`, -2.9092987430341726`},
                     DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{3.7795766094922505`, 
                    Log[32922]}, {-2.89161968499512, -1.7955180865738964`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, 0.9351700305217945}, {
                    5.521460917862246, 0.9578527571915904}, {
                    6.907755278982137, 0.979498529781698}, {8.699514748210191,
                     0.991263751676852}, {10.178768042270166`, 
                    0.9845001355608346}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{3.912023005428146, 0.8260531263973767}, {
                    3.912023005428146, 1.}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    3.912023005428146, 0.9351700305217945}}, {{
                    5.521460917862246, 0.9578527571915904}}, {{
                    6.907755278982137, 0.979498529781698}}, {{
                    8.699514748210191, 0.991263751676852}}, {{
                    10.178768042270166`, 0.9845001355608346}}, {{
                    3.912023005428146, 1.}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    3.912023005428146, 
                    0.8260531263973767}}}]}, {}}}, {}, {}, {}, {}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, 
                    AxesOrigin -> {3.6782145717862083`, 0.8178135376477788}, 
                    PlotRange -> {{3.7795766094922505`, 
                    Log[32922]}, {0.8260531263973767, 1}}, PlotRangeClipping -> 
                    True, ImagePadding -> {{30, 10}, {37, 0}}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {3.6782145717862083`, 0.8178135376477788}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{3.7795766094922505`, 
                    Log[32922]}, {0.8260531263973767, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
                    Graphics[{{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, -0.9178492671465464}, {
                    5.521460917862246, -1.574814505558175}, {
                    6.907755278982137, -1.7245334738635392`}, {
                    8.699514748210191, -2.0203153676064605`}, {
                    10.178768042270166`, -2.1586119373151735`}}]}, 
                    "NaiveBayes"], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, 0.3266032301229827}, {
                    5.521460917862246, 0.32643302930869605`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, -0.9341286902289347}, {
                    5.521460917862246, -1.6034782648682033`}, {
                    6.907755278982137, -1.3813744599395616`}, {
                    8.699514748210191, -2.6761831862143772`}, {
                    10.178768042270166`, -2.781570849958191}}]}, 
                    "DecisionTree"], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, -0.7051975299689113}, {
                    5.521460917862246, -1.546514245718737}, {
                    6.907755278982137, -1.8754179008048097`}, {
                    8.699514748210191, -2.668143313774702}, {
                    10.178768042270166`, -2.859561110152251}}]}, 
                    "RandomForest"], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, -0.9455952423539881}, {
                    5.521460917862246, -1.73454227937351}, {
                    6.907755278982137, -2.26406668809462}, {
                    8.699514748210191, -2.8339301271834767`}, {
                    10.178768042270166`, -3.146818964296204}}]}, 
                    "NearestNeighbors"], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, -0.41453409817434467`}, {
                    5.521460917862246, -2.149119327091203}, {
                    6.907755278982137, -2.1413905423485065`}, {
                    8.699514748210191, -2.12055483814641}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, -1.2242752343912806`}, {
                    5.521460917862246, -1.6319992351481403`}, {
                    6.907755278982137, -1.9347677161179724`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, 0.3250302318675911}, {
                    5.521460917862246, 0.32130186104917347`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, -1.6911340831032438`}, {
                    5.521460917862246, -1.913542368881774}, {
                    6.907755278982137, -2.1019660224926957`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.7946117974981064, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, -0.0724038046696142}, {
                    5.521460917862246, -0.44837437750797604`}, {
                    6.907755278982137, -0.8188066291427575}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.030679774997896203`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, 0.3265952941966794}, {
                    5.521460917862246, -0.8391092067109702}, {
                    6.907755278982137, -2.3661595014417798`}}]}, 
                    "GradientBoostedTrees"], 
                    Tooltip[{
                    Hue[0.266747752497686, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, 0.32648988198997997`}, {
                    5.521460917862246, 0.3261040696114903}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.5028157299974758, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, 0.31532911563073773`}, {
                    5.521460917862246, 0.2784395721563994}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.7388837074972656, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, -1.7955180865738964`}, {
                    5.521460917862246, -1.9674197995904719`}, {
                    6.907755278982137, -2.1557346594121407`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.9749516849970554, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{5.521460917862246, -2.147366894773741}, {
                    6.907755278982137, -2.141470119037664}, {
                    8.699514748210191, -2.1317098111501753`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.21101966249684523`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{5.521460917862246, 0.04906376097765913}, {
                    5.521460917862246, 0.04906376097765913}}]}, 
                    "LogisticRegression"]}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {3.6782145717862083`, -3.3989221880846934`},
                     PlotRange -> {{3.7795766094922505`, 
                    Log[32922]}, {-3.3397868639861588`, 0.3266032301229827}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {3.6782145717862083`, -3.3989221880846934`},
                     DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{3.7795766094922505`, 
                    Log[32922]}, {-3.3397868639861588`, 0.3266032301229827}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}]}, 
                    MachineLearning`file4Automation`PackagePrivate`pos$$], 
                   PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file4Automation`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file4Automation`PackagePrivate`pos$$ - 
                    1, 1], Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file4Automation`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file4Automation`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file4Automation`PackagePrivate`pos$$ + 
                    1, 
                    Length[{
                    Graphics[{{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, -1.7955180865738964`}, {
                    5.521460917862246, -2.149119327091203}, {
                    6.907755278982137, -2.26406668809462}, {
                    8.699514748210191, -2.8339301271834767`}, {
                    10.178768042270166`, -2.781570849958191}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{3.912023005428146, -1.9778396433678511`}, {
                    3.912023005428146, -2.6516085703895222`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    3.912023005428146, -1.7955180865738964`}}, {{
                    5.521460917862246, -2.149119327091203}}, {{
                    6.907755278982137, -2.26406668809462}}, {{
                    8.699514748210191, -2.8339301271834767`}}, {{
                    10.178768042270166`, -2.781570849958191}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    3.912023005428146, -1.9778396433678511`}}, {{
                    3.912023005428146, -2.6516085703895222`}}}]}, {}}}, {}, \
{}, {}, {}}}, {{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.912023005428146, -1.8309017434137465`}, {
                    3.912023005428146, -1.7613437640880991`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.521460917862246, -2.227520707412557}, {
                    5.521460917862246, -2.0764203543114825`}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{6.907755278982137, -2.309789381018918}, {
                    6.907755278982137, -2.2203434714486576`}}]}, {
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{8.699514748210191, -2.925384019571849}, {
                    8.699514748210191, -2.750143721878738}}]}, {
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{10.178768042270166`, -2.9132455389605547`}, {
                    
                    10.178768042270166`, -2.6652343042469537`}}]}}}, {}, {}, \
{}, {}}}}, {DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {3.6782145717862083`, -2.9092987430341726`},
                     PlotRange -> {{3.7795766094922505`, 
                    Log[32922]}, {-2.89161968499512, -1.7955180865738964`}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {3.6782145717862083`, -2.9092987430341726`},
                     DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {"CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{3.7795766094922505`, 
                    Log[32922]}, {-2.89161968499512, -1.7955180865738964`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, 0.9351700305217945}, {
                    5.521460917862246, 0.9578527571915904}, {
                    6.907755278982137, 0.979498529781698}, {8.699514748210191,
                     0.991263751676852}, {10.178768042270166`, 
                    0.9845001355608346}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{3.912023005428146, 0.8260531263973767}, {
                    3.912023005428146, 1.}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    3.912023005428146, 0.9351700305217945}}, {{
                    5.521460917862246, 0.9578527571915904}}, {{
                    6.907755278982137, 0.979498529781698}}, {{
                    8.699514748210191, 0.991263751676852}}, {{
                    10.178768042270166`, 0.9845001355608346}}, {{
                    3.912023005428146, 1.}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    3.912023005428146, 
                    0.8260531263973767}}}]}, {}}}, {}, {}, {}, {}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, 
                    AxesOrigin -> {3.6782145717862083`, 0.8178135376477788}, 
                    PlotRange -> {{3.7795766094922505`, 
                    Log[32922]}, {0.8260531263973767, 1}}, PlotRangeClipping -> 
                    True, ImagePadding -> {{30, 10}, {37, 0}}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {3.6782145717862083`, 0.8178135376477788}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {"CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{3.7795766094922505`, 
                    Log[32922]}, {0.8260531263973767, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
                    Graphics[{{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, -0.9178492671465464}, {
                    5.521460917862246, -1.574814505558175}, {
                    6.907755278982137, -1.7245334738635392`}, {
                    8.699514748210191, -2.0203153676064605`}, {
                    10.178768042270166`, -2.1586119373151735`}}]}, 
                    "NaiveBayes"], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, 0.3266032301229827}, {
                    5.521460917862246, 0.32643302930869605`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, -0.9341286902289347}, {
                    5.521460917862246, -1.6034782648682033`}, {
                    6.907755278982137, -1.3813744599395616`}, {
                    8.699514748210191, -2.6761831862143772`}, {
                    10.178768042270166`, -2.781570849958191}}]}, 
                    "DecisionTree"], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, -0.7051975299689113}, {
                    5.521460917862246, -1.546514245718737}, {
                    6.907755278982137, -1.8754179008048097`}, {
                    8.699514748210191, -2.668143313774702}, {
                    10.178768042270166`, -2.859561110152251}}]}, 
                    "RandomForest"], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, -0.9455952423539881}, {
                    5.521460917862246, -1.73454227937351}, {
                    6.907755278982137, -2.26406668809462}, {
                    8.699514748210191, -2.8339301271834767`}, {
                    10.178768042270166`, -3.146818964296204}}]}, 
                    "NearestNeighbors"], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, -0.41453409817434467`}, {
                    5.521460917862246, -2.149119327091203}, {
                    6.907755278982137, -2.1413905423485065`}, {
                    8.699514748210191, -2.12055483814641}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, -1.2242752343912806`}, {
                    5.521460917862246, -1.6319992351481403`}, {
                    6.907755278982137, -1.9347677161179724`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, 0.3250302318675911}, {
                    5.521460917862246, 0.32130186104917347`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, -1.6911340831032438`}, {
                    5.521460917862246, -1.913542368881774}, {
                    6.907755278982137, -2.1019660224926957`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.7946117974981064, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, -0.0724038046696142}, {
                    5.521460917862246, -0.44837437750797604`}, {
                    6.907755278982137, -0.8188066291427575}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.030679774997896203`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, 0.3265952941966794}, {
                    5.521460917862246, -0.8391092067109702}, {
                    6.907755278982137, -2.3661595014417798`}}]}, 
                    "GradientBoostedTrees"], 
                    Tooltip[{
                    Hue[0.266747752497686, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, 0.32648988198997997`}, {
                    5.521460917862246, 0.3261040696114903}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.5028157299974758, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, 0.31532911563073773`}, {
                    5.521460917862246, 0.2784395721563994}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.7388837074972656, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, -1.7955180865738964`}, {
                    5.521460917862246, -1.9674197995904719`}, {
                    6.907755278982137, -2.1557346594121407`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.9749516849970554, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{5.521460917862246, -2.147366894773741}, {
                    6.907755278982137, -2.141470119037664}, {
                    8.699514748210191, -2.1317098111501753`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.21101966249684523`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{5.521460917862246, 0.04906376097765913}, {
                    5.521460917862246, 0.04906376097765913}}]}, 
                    "LogisticRegression"]}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {3.6782145717862083`, -3.3989221880846934`},
                     PlotRange -> {{3.7795766094922505`, 
                    Log[32922]}, {-3.3397868639861588`, 0.3266032301229827}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {3.6782145717862083`, -3.3989221880846934`},
                     DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {"CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{3.7795766094922505`, 
                    Log[32922]}, {-3.3397868639861588`, 0.3266032301229827}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}]}]], Appearance -> 
                    "Frameless"]}}, Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                 ImageSizeCache->{429., {153., 160.}}],
                DynamicModuleValues:>{}],
               Alignment->Center,
               StripOnInput->False], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            ColumnsEqual->False,
            
            GridBoxAlignment->{
             "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
              "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
            GridBoxDividers->{"Columns" -> {False, {
                 Opacity[0.15]}, False}},
            
            GridBoxItemSize->{
             "Columns" -> {Automatic, {Automatic}}, "ColumnsIndexed" -> {}, 
              "Rows" -> {{1.}}, "RowsIndexed" -> {}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], 
                Offset[1.1199999999999999`], {
                 Offset[1.75]}, 
                Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.8]}, 
                Offset[0.2]}, "RowsIndexed" -> {}}],
           "Grid"],
          FrameMargins->{{10, 10}, {10, 5}},
          FrameStyle->None,
          StripOnInput->False],
         Deploy,
         DefaultBaseStyle->"Deploy"],
        Alignment->Center,
        BaseStyle->{
         FontWeight -> "Light", FontSize -> 12, FontFamily -> "Segoe UI", 
          NumberMarks -> False, Deployed -> False},
        StripOnInput->False]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Background->RGBColor[0.9802, 0.9802, 0.9802],
    FrameMargins->{{0, 0}, {0, 0}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   StripOnInput->False,
   LineBreakWithin->False],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{3.765020321980318*^9},
 CellLabel->"Out[46]=",ExpressionUUID->"f9b5d6e3-0f3d-4484-8380-501557105cfa"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"cmthermo0", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"cThermo0", ",", "validation"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"cmthermo0", "[", "\"\<Accuracy\>\"", "]"}], "\[IndentingNewLine]", 
 RowBox[{"cmthermo0", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.765020276558922*^9, 3.7650202848869677`*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"6a27f46e-2521-40d3-94e5-cc66192cffc2"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierMeasurementsObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"DecisionTree\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["3658", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"DecisionTree\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["3658", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["4", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  RowBox[{
                   "0.9844177145981410915`7.175157006981746", "\[PlusMinus]", 
                    "0.0020480606207165719`2."}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierMeasurementsObject[
   Association["Model" -> ClassifierFunction[
      Association[
      "ExampleNumber" -> 32922, "ClassNumber" -> 4, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Numerical"], "f2" -> 
              Association["Type" -> "Numerical"]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["Transpose", 
                  Association["FeatureNumber" -> 2]], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Numerical", "Numerical"}, 
                   "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> 
                   Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
            Association[
             "(f1f2)" -> 
              Association["Type" -> "NumericalVector", "Weight" -> 2]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f2" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "(f1f2)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2]], 
                "Version" -> {11.3, 0}, "ID" -> 5999172908886121309]], 
              MachineLearning`MLProcessor["ImputeMissing", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                Association[
                 "(f1f2)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2]], 
                "Imputer" -> (DimensionReducerFunction[
                  Association[
                  "ExampleNumber" -> 32922, "Imputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {535.5528218212745, 440.05184982686353`}, 
                    "Method" -> "Naive", "VectorLength" -> 2, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {535.5528218212745, 440.05184982686353`}, 
                    "StandardDeviation" -> {417.3827940577992, 
                    309.75112432578936`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 2, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                   MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                    True, "Invertibility" -> "Perfect", "Missing" -> 
                    "Allowed"]], "Processor" -> 
                   MachineLearning`MLProcessor["Identity"], "Padder" -> 
                   MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                   MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                   "Model" -> 
                   Association[
                    "Matrix" -> {{-0.7071067811865474, -0.7071067811865476}, {
                    0.7071067811865476, -0.7071067811865474}}, "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {535.5528218212745, 440.05184982686353`}, 
                    "StandardDeviation" -> {417.3827940577992, 
                    309.75112432578936`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 2, "Method" -> "Linear"], 
                   "PerformanceGoal" -> Automatic, "Invertibility" -> 
                   "Approximate", "Log" -> 
                   Association[
                    "TrainingTime" -> 0.012358307966400183`, 
                    "MaxTrainingMemory" -> 1105824, "DataMemory" -> 526904, 
                    "FunctionMemory" -> 21760, "LanguageVersion" -> {11.3, 0},
                     "Date" -> 
                    DateObject[{
                    2019, 4, 23, 10, 58, 26.1210893`9.169566202145644}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                  PerformanceGoal -> "Quality"]& ), "Method" -> 
                "DimensionReduction", "VectorLength" -> 2, "Output" -> 
                Association[
                 "(f1f2)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2]], 
                "Type" -> "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
                3183744061192450103]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "(f1f2)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2]], 
                "Mean" -> {535.5528218212745, 440.05184982686353`}, 
                "StandardDeviation" -> {417.3827940577992, 
                 309.75112432578936`}, "Output" -> 
                Association[
                 "(f1f2)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2]], 
                "Version" -> {11.3, 0}, "ID" -> 6290908127098961799]]}, 
            "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            True, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 1716634207928958562]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association["r1" -> 1, "r2" -> 2, "r3" -> 3, "r5" -> 4]}, 
                "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
                7986107592405538806, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 7038916035376012904]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 4], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]},
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
         "Marginal" -> 
         Association[
          "r1" -> 0.3640891696531616, "r2" -> 0.3728664277470692, "r3" -> 
           0.13196258276134362`, "r5" -> 0.13108181983842557`]], "Prior" -> 
       Automatic, "Utility" -> 
       SparseArray[
        Automatic, {4, 5}, 0., {
         1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       "Speed", "BatchProcessing" -> Automatic, "Model" -> 
       Association["Tree" -> MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> 
            RawArray["Integer16",{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
              1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
              2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
              2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
              2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}], 
            "NumericalThresholds" -> CompressedData["
1:eJwdx11Ik3EYxuFNa46hlmHqkCLXBGfZYGFG7H3/mSW2CtqSTQuTaclYmuXS
WoZNp0VqijpB1OZMkXRuaEVp7H0eUsM+/CAkthmVmpp1YGU17SDI7eD6cd9R
WfmKHD8Wi6XjrkehvppYUKDWn+J4z3l17l5JLnt9GtfxIm/jzfoKZKfl4HNh
Bh4CGS7rabQnx2O5UIzpfiIUzwjwRy8fp1vCsE+/2eeWioeXkwMwWcjG/Rs8
4BU89x0G732G2uIPcCDhLSysjECdfQCk2l7YktIFX6It0DDbABq8C6HFpTDV
XwQleVoQic7Cu3k5GCxHwBkeB3G1oT5uGRe4QWtMZvknJlBnZ7K/Nfrohq8z
Ox4eZSYsEYxn+6SjfS3d8btuj9Sr7cKgVDAaRBW6aGr0az61j9NN3Qmfpi6a
NtImiYD0JEWTqoxH2HK8HwdjbfiSb0UntxsXV7vQs9iJoS8suPOxGRPrm/Fk
aRPmZ5qwdXcNWiOr0b1UgUtOI+6SFaOGo8POIS3OlmT5SPlKPL0qx5UTFIp5
8figTIj+2yLwoHsT3mgMQHumB2JcC/AxcBxUFQ4IetYBw8uVcG3iCswnJMEr
Phu0nDamXa50+M8rqNi2MaovL4Z+U6WlxSE19JMmM80695QO1rnoyLK/dJE2
hKRVbyX/fkYRo15Cxg8fIwU9KpI6doY4Ci+R+yUGopyqJAl/aojF3EGy56wk
9ZeNcFMGiKN1iNhsI8Qw85qo/SZJmMpNOJr35D92cBKl
             "], 
            "NominalSplits" -> {}, "Children" -> CompressedData["
1:eJwVj2l4CAQAhl8Sm/t83DK3EAvLWUbSXLG5S9rYEdqyjbXssrlyRI5ylHJf
uQqRbuXKVblF5T6KSuWK1/bj+97ne95fX1BUQnhMfiApILfCI1NCExMjUyMC
c0dYfHJ0bHRicEhcns/JTR6PedR8/OmTFOC2t7xpKA/zNBv92J/80ad4lo78
ayf+8YZ/e8XOFOV/i9GFEnTjgPs953Nc8Lyl6UF3ehJGWz5yg+vtTQX2OMe+
VGKd/RjAO75tHwayy52+yGoH8aszjaQGUdRkCLWIZrmxrHSFdfjWZS41hleZ
4mQXu8hXiKcRCaSb5ggSacI3vkRLcsz2S78whddozmk/9zNfJ41UWpFFm9y/
x23NXz6O5ueOD1GQIx62Hdc9ZCHaE0AH/vOaf1iYIvzuVZ+hOIGU4wcPetlL
XrQUXSlDScLZ517Pesb73rMsd/3e8kRQkXnOtRdVGGOWldntWqvSn+dZ44f+
5iO8QBCznWV1dliNR8k0wxm+5XSnOZhVfmddahPHm061Hi9Tn+0usQFDacgw
HmOSbzjRCS70A4eTRGPGO86xBvOLX/uVyTRjJCE05X0X+J6jaMETnHKbnzqa
dLa6xU/cbAY/m8kYTnrCd51vNpt8AGAHEMI=
             "], 
            "LeafValues" -> CompressedData["
1:eJxdU81KA0EMzsxOf7attqtSsaIiiNaCFRUKPfYg4sVDxZsIFWsVpIVWEO99
AMGDbyEKevQVfBzPbjNJdmZZ5kvyZSbJZLKb16PurQaAST6Gbu+pMx73ns+j
2LgYTu4Hw/7N6fCxP+iPD1p3s33TeJl4Kfx+Kwoi0hW8IFYRG3XLrZMvgAxp
e4igNcojOf1NcgdxjiwdZ1PylaFEnoZwVYpvrSzt52xnmvdZJi9xmyhD2Rki
Pij251Aa0OR/N1abCvODe+tSyQedMFQR17SI+Lo2ww3Jz1HyXr0aap7NN9PE
RB7rakHq3KeyGZrCfHmR2sKXEI+ponmprBXal7B20Vg2R3aGOsQvrGEXZYH8
q6mbGqltG/FE+f4s+pPXTrTA6dPMWqE6rF2j84EwW1Qf36Pi5S9I3DeSl+C+
9B/wvGSc7ijYlzwcdykVz9Z5lbpXKC9kiD8kaZxT7h8Skuwo2xeOX3YwmbN0
x3juihKX4y17fUw62AY/D2v+ZKYnMpnABa8+259/ZVkgMw==
             "], "RootIndex" -> 
            22, "NominalDimension" -> 0]], "Processor" -> 
         MachineLearning`MLProcessor["Values", 
           Association[
           "Info" -> Association[
             "(f1f2)" -> 
              Association["Type" -> "NumericalVector", "Weight" -> 2]], 
            "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], "Method" -> 
         "DecisionTree", "Options" -> 
         Association[
          "DistributionSmoothing" -> 
           Association["Value" -> 1, "Options" -> Association[]], 
           "FeatureFraction" -> 
           Association["Value" -> 1, "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            PlusMinus[0.06194113069274249, 0.0076419173267086304`], 
            "Accuracy" -> 
            PlusMinus[0.9845001355608346, 0.0022377165496092117`], 
            "EvaluationTime" -> 3.4389755764600625`*^-6, "TestSize" -> 6584, 
            "TrainingSize" -> 26338, "TrainingTime" -> 0.37575961812323755`, 
            "TrainingMemory" -> 4096496, "ModelMemory" -> 7664, 
            "ExperimentCount" -> 1, "ModelUtility" -> 86.96003539052742, 
            "MeanCrossEntropyHistory" -> {
              PlusMinus[0.06194113069274249, 0.0054036515629826455`]}, 
            "AccuracyHistory" -> {
              PlusMinus[0.9845001355608346, 0.001582304546602037]}, 
            "Configuration" -> {
             "DecisionTree", "DistributionSmoothing" -> 1, "FeatureFraction" -> 
              1}, "FinalTrainingSize" -> 32922], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
             "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], 
           Association["ID" -> 216170166457692]], "Configurations" -> 
         Dataset[
           Association[
           Association[
             "Value" -> "NaiveBayes", "Options" -> 
              Association[
               "SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.3993770714451987, 0.017062373813074138`], 
                 "Accuracy" -> 
                 PlusMinus[0.8318237954507929, 0.009523503006563494], 
                 "EvaluationTime" -> 1.6885384356182504`*^-6, "TestSize" -> 
                 3100, "TrainingSize" -> 50, "TrainingTime" -> 
                 0.004269114436728639, "TrainingMemory" -> 47712, 
                 "ModelMemory" -> 15264, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 14.313364285308133`, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.3993770714451987, 0.012064920226364493`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.8318237954507929, 0.006734133556591519]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.20704595499318837`, 0.020050836613511577`], 
                 "Accuracy" -> 
                 PlusMinus[0.9270923083118682, 0.009609792361756131], 
                 "EvaluationTime" -> 2.2293060517514898`*^-6, "TestSize" -> 
                 1500, "TrainingSize" -> 250, "TrainingTime" -> 
                 0.004396554943822115, "TrainingMemory" -> 68296, 
                 "ModelMemory" -> 17760, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 26.932343141411746`, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.20704595499318837`, 0.014178082537877544`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9270923083118682, 0.0067951493447924475`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.17825619355076172`, 0.04514211179483713], 
                 "Accuracy" -> 
                 PlusMinus[0.9136735175484847, 0.0291632806409823], 
                 "EvaluationTime" -> 0.000010169581404975996`, "TestSize" -> 
                 100, "TrainingSize" -> 1000, "TrainingTime" -> 
                 0.01769826478488071, "TrainingMemory" -> 174320, 
                 "ModelMemory" -> 22632, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 25.98809991916285, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.17825619355076172`, 0.04514211179483713]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9136735175484847, 0.0291632806409823]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.13261363643966131`, 0.002699984719858567], 
                 "Accuracy" -> 
                 PlusMinus[0.9583444719675384, 0.0017798876260252975`], 
                 "EvaluationTime" -> 1.463354895023866*^-6, "TestSize" -> 
                 25500, "TrainingSize" -> 6000, "TrainingTime" -> 
                 0.014048961673479174`, "TrainingMemory" -> 860240, 
                 "ModelMemory" -> 29800, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 43.56263984764824, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.13261363643966131`, 0.0019091775045120534`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9583444719675384, 0.0012585706101125135`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.11548531068611503`, 0.004603720862643793], 
                 "Accuracy" -> 
                 PlusMinus[0.9693446082325012, 0.003180573683302863], 
                 "EvaluationTime" -> 2.6345069640614245`*^-6, "TestSize" -> 
                 6584, "TrainingSize" -> 26338, "TrainingTime" -> 
                 0.17353519681575497`, "TrainingMemory" -> 3626840, 
                 "ModelMemory" -> 37736, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 48.33610486741327, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.11548531068611503`, 0.003255322240665408]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9693446082325012, 0.002249005219526929]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 2.6345069640614245`*^-6, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.11548531068611503`, 0.004603720862643793], 
                "ModelMemory" -> 37736, "TrainingMemory" -> 3626840, 
                "TrainingTime" -> 0.22118481606814655`], "Index" -> 1], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.*^6], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.3862513452738554`, 0.00021061992414494804`], 
                 "Accuracy" -> 
                 PlusMinus[0.6905688182890662, 0.005802360303601235], 
                 "EvaluationTime" -> 1.1555827199957271`*^-6, "TestSize" -> 
                 12700, "TrainingSize" -> 50, "TrainingTime" -> 
                 0.007278078892801436, "TrainingMemory" -> 65232, 
                 "ModelMemory" -> 9088, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 4.220079245329493, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.3862513452738554`, 0.000148930776615889]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6905688182890662, 0.004102888317564068]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.3860154242436291`, 0.0016843908344246256`], 
                 "Accuracy" -> 
                 PlusMinus[0.7736700309107323, 0.01532176031994678], 
                 "EvaluationTime" -> 1.571861288088057*^-6, "TestSize" -> 
                 1500, "TrainingSize" -> 250, "TrainingTime" -> 
                 0.0070816437487580255`, "TrainingMemory" -> 86984, 
                 "ModelMemory" -> 9088, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 4.171687323153288, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.3860154242436291`, 0.0011910441811901198`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7736700309107323, 0.010834120621949333`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1.571861288088057*^-6, "MeanCrossEntropy" -> 
                PlusMinus[1.3860154242436291`, 0.0016843908344246256`], 
                "ModelMemory" -> 9088, "TrainingMemory" -> 86984, 
                "TrainingTime" -> 0.9398455808792483], "Index" -> 2], 
            Association[
             "Value" -> "DecisionTree", "Options" -> 
              Association[
               "DistributionSmoothing" -> Association["Value" -> 1], 
                "FeatureFraction" -> Association["Value" -> 1]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.3929280784972384, 0.09334895394206279], 
                 "Accuracy" -> 
                 PlusMinus[0.9136735175484847, 0.0412431070057699], 
                 "EvaluationTime" -> 0.000019187351515415884`, "TestSize" -> 
                 100, "TrainingSize" -> 50, "TrainingTime" -> 
                 0.005498188320576453, "TrainingMemory" -> 66824, 
                 "ModelMemory" -> 5616, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 10.557383475769026`, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.3929280784972384, 0.06600767834910329]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9136735175484847, 0.0291632806409823]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.20119548831932133`, 0.01023153613367024], 
                 "Accuracy" -> 
                 PlusMinus[0.9548613938425279, 0.003726304035636718], 
                 "EvaluationTime" -> 3.5204642478330806`*^-6, "TestSize" -> 
                 6300, "TrainingSize" -> 250, "TrainingTime" -> 
                 0.007638447575052338, "TrainingMemory" -> 96992, 
                 "ModelMemory" -> 5744, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 27.105277055832477`, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.20119548831932133`, 0.007234788582073416]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9548613938425279, 0.0026348948523615217`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.25123300594165743`, 0.0956384147008695], 
                 "Accuracy" -> 
                 PlusMinus[0.9433764878455144, 0.024522640311738453`], 
                 "EvaluationTime" -> 0.00002088370725860644, "TestSize" -> 
                 100, "TrainingSize" -> 1000, "TrainingTime" -> 
                 0.03354137212086378, "TrainingMemory" -> 182544, 
                 "ModelMemory" -> 5872, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 15.797413586332938`, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.25123300594165743`, 0.0956384147008695]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9433764878455144, 0.024522640311738453`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.06882534699856753, 0.004882997803063277], 
                 "Accuracy" -> 
                 PlusMinus[0.979735662009981, 0.0018756736329223677`], 
                 "EvaluationTime" -> 3.917586306264156*^-6, "TestSize" -> 
                 11900, "TrainingSize" -> 6000, "TrainingTime" -> 
                 0.04278579816673837, "TrainingMemory" -> 942312, 
                 "ModelMemory" -> 6640, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 78.2139504298078, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.06882534699856753, 0.0034528008590650567`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.979735662009981, 0.0013263015451322132`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.06194113069274249, 0.0076419173267086304`], 
                 "Accuracy" -> 
                 PlusMinus[0.9845001355608346, 0.0022377165496092117`], 
                 "EvaluationTime" -> 3.4389755764600625`*^-6, "TestSize" -> 
                 6584, "TrainingSize" -> 26338, "TrainingTime" -> 
                 0.37575961812323755`, "TrainingMemory" -> 4096496, 
                 "ModelMemory" -> 7664, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 86.96003539052742, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.06194113069274249, 0.0054036515629826455`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9845001355608346, 0.001582304546602037]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 3.4389755764600625`*^-6, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.06194113069274249, 0.0076419173267086304`], 
                "ModelMemory" -> 7664, "TrainingMemory" -> 4096496, 
                "TrainingTime" -> 0.47519057756247896`], "Index" -> 3], 
            Association[
             "Value" -> "RandomForest", "Options" -> 
              Association[
               "FeatureFraction" -> Association["Value" -> Automatic], 
                "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
                Association["Value" -> Automatic], "DistributionSmoothing" -> 
                Association["Value" -> 0.5], "Implementation" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.49401098264378146`, 0.0271955017749671], 
                 "Accuracy" -> 
                 PlusMinus[0.8484084713830699, 0.019316738709166722`], 
                 "EvaluationTime" -> 9.57208947814273*^-6, "TestSize" -> 700, 
                 "TrainingSize" -> 50, "TrainingTime" -> 0.005105318032489632,
                  "TrainingMemory" -> 77104, "ModelMemory" -> 39152, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 9.835759678430097, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.49401098264378146`, 0.019230123722850025`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.8484084713830699, 0.013658996931660465`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.212989109067439, 0.02049158534399598], 
                 "Accuracy" -> 
                 PlusMinus[0.9498572804855775, 0.008110172017382263], 
                 "EvaluationTime" -> 6.945840255367587*^-6, "TestSize" -> 
                 1500, "TrainingSize" -> 250, "TrainingTime" -> 
                 0.0053966920777905976`, "TrainingMemory" -> 91176, 
                 "ModelMemory" -> 43248, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 23.65849954975906, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.212989109067439, 0.01448973895400243]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9498572804855775, 0.00573475763008038]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.15329089307003593`, 0.05065578653987337], 
                 "Accuracy" -> 
                 PlusMinus[0.9433764878455144, 0.024522640311738453`], 
                 "EvaluationTime" -> 0.00004875240875387988, "TestSize" -> 
                 100, "TrainingSize" -> 1000, "TrainingTime" -> 
                 0.015184807266902902`, "TrainingMemory" -> 129520, 
                 "ModelMemory" -> 43248, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 21.48883579369521, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.15329089307003593`, 0.05065578653987337]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9433764878455144, 0.024522640311738453`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.06938092440209359, 0.00890829067558254], 
                 "Accuracy" -> 
                 PlusMinus[0.984456212557477, 0.0025097043306030265`], 
                 "EvaluationTime" -> 9.338691070137143*^-6, "TestSize" -> 
                 5500, "TrainingSize" -> 6000, "TrainingTime" -> 
                 0.04927699607614385, "TrainingMemory" -> 394192, 
                 "ModelMemory" -> 47344, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 69.28738229188694, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.06938092440209359, 0.0062991127454853045`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.984456212557477, 0.0017746289509426448`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.05729390045942543, 0.009079377465882348], 
                 "Accuracy" -> 
                 PlusMinus[0.9860080254541519, 0.0021814282532293654`], 
                 "EvaluationTime" -> 9.009941124350197*^-6, "TestSize" -> 
                 6300, "TrainingSize" -> 26338, "TrainingTime" -> 
                 0.051173493286850336`, "TrainingMemory" -> 1605080, 
                 "ModelMemory" -> 63728, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 83.85757231024127, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.05729390045942543, 0.006420089375077739]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9860080254541519, 0.0015425027105304095`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 9.009941124350197*^-6, "MeanCrossEntropy" -> 
                PlusMinus[0.05729390045942543, 0.009079377465882348], 
                "ModelMemory" -> 63728, "TrainingMemory" -> 1605080, 
                "TrainingTime" -> 0.06907121316460622], "Index" -> 4], 
            Association[
             "Value" -> "NearestNeighbors", "Options" -> 
              Association[
               "NeighborsNumber" -> Association["Value" -> Automatic], 
                "DistributionSmoothing" -> Association["Value" -> 0.5], 
                "NearestMethod" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.38844828120256397`, 0.018715739341531958`], 
                 "Accuracy" -> 
                 PlusMinus[0.8697151274372052, 0.008578268801384464], 
                 "EvaluationTime" -> 5.054579107929142*^-6, "TestSize" -> 
                 3100, "TrainingSize" -> 50, "TrainingTime" -> 
                 0.007165463679598029, "TrainingMemory" -> 85344, 
                 "ModelMemory" -> 6896, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 13.584770263155466`, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.38844828120256397`, 0.013234026203317097`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.8697151274372052, 0.006065752040299951]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.17648096077798947`, 0.00981941818808073], 
                 "Accuracy" -> 
                 PlusMinus[0.9549801461781715, 0.007738383385103292], 
                 "EvaluationTime" -> 5.67789749202594*^-6, "TestSize" -> 1500,
                  "TrainingSize" -> 250, "TrainingTime" -> 
                 0.013906125668884474`, "TrainingMemory" -> 881464, 
                 "ModelMemory" -> 10672, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 29.4835466028532, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.17648096077798947`, 0.0069433771880984055`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9549801461781715, 0.005471863367027848]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.10392698558391365`, 0.0046448255188168254`], 
                 "Accuracy" -> 
                 PlusMinus[0.979498529781698, 0.0036935598491978604`], 
                 "EvaluationTime" -> 5.454825255631246*^-6, "TestSize" -> 
                 3100, "TrainingSize" -> 1000, "TrainingTime" -> 
                 0.028810107657292805`, "TrainingMemory" -> 3429232, 
                 "ModelMemory" -> 24792, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 50.39882019026222, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.10392698558391365`, 0.003284387621783701]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.979498529781698, 0.002611741216086169]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.058781380805905774`, 0.005137293228700099], 
                 "Accuracy" -> 
                 PlusMinus[0.991263751676852, 0.004021002896766311], 
                 "EvaluationTime" -> 0.00001181095322851932, "TestSize" -> 
                 700, "TrainingSize" -> 6000, "TrainingTime" -> 
                 0.028425505321567752`, "TrainingMemory" -> 3608416, 
                 "ModelMemory" -> 108424, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 79.44236039595572, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.058781380805905774`, 0.005137293228700099]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.991263751676852, 0.004021002896766311]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.042988658052746265`, 0.006445657788484271], 
                 "Accuracy" -> 
                 PlusMinus[0.9918710683240911, 0.006594313885731253], 
                 "EvaluationTime" -> 0.00003340537855960296, "TestSize" -> 
                 300, "TrainingSize" -> 26338, "TrainingTime" -> 
                 0.037104574486980686`, "TrainingMemory" -> 4330248, 
                 "ModelMemory" -> 453800, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 86.94943008785302, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.042988658052746265`, 0.006445657788484271]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9918710683240911, 0.006594313885731253]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00003340537855960296, "MeanCrossEntropy" -> 
                PlusMinus[0.042988658052746265`, 0.006445657788484271], 
                "ModelMemory" -> 453800, "TrainingMemory" -> 4330248, 
                "TrainingTime" -> 0.05354547739591583], "Index" -> 5], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.*^-6], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6606480061266686, 0.13637358755779402`], 
                 "Accuracy" -> 
                 PlusMinus[0.948033853368869, 0.00569461269157887], 
                 "EvaluationTime" -> 1.3509227168189804`*^-6, "TestSize" -> 
                 3100, "TrainingSize" -> 50, "TrainingTime" -> 
                 0.019417143570711948`, "TrainingMemory" -> 73416, 
                 "ModelMemory" -> 9088, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 8.45805717686962, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6606480061266686, 0.09643068853685353]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.948033853368869, 0.004026699250446396]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.11658678740048503`, 0.008791432068815273], 
                 "Accuracy" -> 
                 PlusMinus[0.9578527571915904, 0.0036052780465582646`], 
                 "EvaluationTime" -> 1.0944741536364847`*^-6, "TestSize" -> 
                 6300, "TrainingSize" -> 250, "TrainingTime" -> 
                 0.02219745637871099, "TrainingMemory" -> 95072, 
                 "ModelMemory" -> 9088, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 49.519298316505214`, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.11658678740048503`, 0.006216481232200158]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9578527571915904, 0.002549316554784338]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.11749135267651871`, 0.008622287031708297], 
                 "Accuracy" -> 
                 PlusMinus[0.9610207527630036, 0.0024393028148686755`], 
                 "EvaluationTime" -> 1.0496685216714626`*^-6, "TestSize" -> 
                 12700, "TrainingSize" -> 1000, "TrainingTime" -> 
                 0.029638613504303184`, "TrainingMemory" -> 257120, 
                 "ModelMemory" -> 9088, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 49.22011714271226, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.11749135267651871`, 0.006096877629457765]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9610207527630036, 0.001724847561761074]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.11996504885735683`, 0.004378741546464842], 
                 "Accuracy" -> 
                 PlusMinus[0.9566528654572349, 0.0017599879952586715`], 
                 "EvaluationTime" -> 1.4247571436257149`*^-6, "TestSize" -> 
                 26922, "TrainingSize" -> 6000, "TrainingTime" -> 
                 0.24281522067307404`, "TrainingMemory" -> 1425152, 
                 "ModelMemory" -> 9088, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 48.05223655049521, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.11996504885735683`, 0.00309623784056856]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9566528654572349, 0.0012444994462543237`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1.4247571436257149`*^-6, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.11996504885735683`, 0.004378741546464842], 
                "ModelMemory" -> 9088, "TrainingMemory" -> 1425152, 
                "TrainingTime" -> 1.351744259403869], "Index" -> 6], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.1], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.2939706829739509, 0.01122495150612476], 
                 "Accuracy" -> 
                 PlusMinus[0.8878060714077157, 0.008044404524244844], 
                 "EvaluationTime" -> 1.3599356126082282`*^-6, "TestSize" -> 
                 3100, "TrainingSize" -> 50, "TrainingTime" -> 
                 0.019487848818495353`, "TrainingMemory" -> 73544, 
                 "ModelMemory" -> 9088, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 19.637858239402398`, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.2939706829739509, 0.007937239328470968]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.8878060714077157, 0.005688252989701271]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.1955382561344366, 0.004495619352365262], 
                 "Accuracy" -> 
                 PlusMinus[0.9358808876627505, 0.0030817593562207568`], 
                 "EvaluationTime" -> 1.0315073121665176`*^-6, "TestSize" -> 
                 12700, "TrainingSize" -> 250, "TrainingTime" -> 
                 0.027800562163740238`, "TrainingMemory" -> 95200, 
                 "ModelMemory" -> 9088, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 29.886613297680178`, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.1955382561344366, 0.0031788829296909515`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9358808876627505, 0.002179132938768786]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.1444578201499286, 0.005164283715251956], 
                 "Accuracy" -> 
                 PlusMinus[0.9593325599631474, 0.002488943241843704], 
                 "EvaluationTime" -> 1.1304398835982756`*^-6, "TestSize" -> 
                 12700, "TrainingSize" -> 1000, "TrainingTime" -> 
                 0.041566132642474635`, "TrainingMemory" -> 257120, 
                 "ModelMemory" -> 9088, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 40.239096846094036`, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.1444578201499286, 0.0036517000350259157`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9593325599631474, 0.001759948644296112]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1.1304398835982756`*^-6, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.1444578201499286, 0.005164283715251956], 
                "ModelMemory" -> 9088, "TrainingMemory" -> 257120, 
                "TrainingTime" -> 1.3879280676740453`], "Index" -> 7], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 10000.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.3840724884444675`, 0.006892203160471191], 
                 "Accuracy" -> 
                 PlusMinus[0.6942687740836753, 0.03776283315728412], 
                 "EvaluationTime" -> 3.013526084962049*^-6, "TestSize" -> 300,
                  "TrainingSize" -> 50, "TrainingTime" -> 
                 0.006758908504843452, "TrainingMemory" -> 65976, 
                 "ModelMemory" -> 9088, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 4.023925993847124, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.3840724884444675`, 0.004873523592084534]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6942687740836753, 0.0267023554023318]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.3789217608457922`, 0.0016904006940737441`], 
                 "Accuracy" -> 
                 PlusMinus[0.7743265068990471, 0.015306270046737123`], 
                 "EvaluationTime" -> 1.5576061978091448`*^-6, "TestSize" -> 
                 1500, "TrainingSize" -> 250, "TrainingTime" -> 
                 0.008667094889578645, "TrainingMemory" -> 88480, 
                 "ModelMemory" -> 9088, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 4.19475930563162, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.3789217608457922`, 0.001195293793701991]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7743265068990471, 0.010823167344720353`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1.5576061978091448`*^-6, 
                "MeanCrossEntropy" -> 
                PlusMinus[1.3789217608457922`, 0.0016904006940737441`], 
                "ModelMemory" -> 9088, "TrainingMemory" -> 88480, 
                "TrainingTime" -> 1.148111300323676], "Index" -> 8], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.18431038213315049`, 0.014698915637257576`], 
                 "Accuracy" -> 
                 PlusMinus[0.9471372501113315, 0.0028176062708164767`], 
                 "EvaluationTime" -> 1.1710500541723737`*^-6, "TestSize" -> 
                 12700, "TrainingSize" -> 50, "TrainingTime" -> 
                 0.01838878135799122, "TrainingMemory" -> 73432, 
                 "ModelMemory" -> 9088, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 31.229476243124648`, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.18431038213315049`, 0.010393702923193814`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9471372501113315, 0.0019923485008080705`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.14755675923018385`, 0.040431987716989255`], 
                 "Accuracy" -> 
                 PlusMinus[0.9530143591460561, 0.018099234603225316`], 
                 "EvaluationTime" -> 2.798749391426438*^-6, "TestSize" -> 300,
                  "TrainingSize" -> 250, "TrainingTime" -> 
                 0.02536408213326856, "TrainingMemory" -> 95184, 
                 "ModelMemory" -> 9088, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 36.00531861088839, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.14755675923018385`, 0.028589732691534298`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9530143591460561, 0.01279809152222683]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.12221591266765762`, 0.02761698969125181], 
                 "Accuracy" -> 
                 PlusMinus[0.9532771613148108, 0.011627017720416438`], 
                 "EvaluationTime" -> 2.150482190647333*^-6, "TestSize" -> 700,
                  "TrainingSize" -> 1000, "TrainingTime" -> 
                 0.07944846485507277, "TrainingMemory" -> 257120, 
                 "ModelMemory" -> 9088, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 44.588835559988674`, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.12221591266765762`, 0.01952816068664313]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9532771613148108, 0.008221543075082617]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 2.150482190647333*^-6, "MeanCrossEntropy" -> 
                PlusMinus[0.12221591266765762`, 0.02761698969125181], 
                "ModelMemory" -> 9088, "TrainingMemory" -> 257120, 
                "TrainingTime" -> 2.633991141316697], "Index" -> 9], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 10.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.930155218945398, 0.0067962650159172945`], 
                 "Accuracy" -> 
                 PlusMinus[0.8218985473583259, 0.006825275303506831], 
                 "EvaluationTime" -> 1.1790996102128843`*^-6, "TestSize" -> 
                 6300, "TrainingSize" -> 50, "TrainingTime" -> 
                 0.013640980989696705`, "TrainingMemory" -> 73072, 
                 "ModelMemory" -> 9088, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 6.276233862040535, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.930155218945398, 0.004805685079496018]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.8218985473583259, 0.004826198450574751]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6386655372568542, 0.005358981380241367], 
                 "Accuracy" -> 
                 PlusMinus[0.8500784452870569, 0.004483631631995871], 
                 "EvaluationTime" -> 1.0493766851775636`*^-6, "TestSize" -> 
                 12700, "TrainingSize" -> 250, "TrainingTime" -> 
                 0.01857352732800592, "TrainingMemory" -> 94944, 
                 "ModelMemory" -> 9088, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 9.172303219423588, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6386655372568542, 0.0037893720742211146`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.8500784452870569, 0.003170406331326787]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.44095756654873236`, 0.018692300300102476`], 
                 "Accuracy" -> 
                 PlusMinus[0.8720699010654557, 0.016025531366392634`], 
                 "EvaluationTime" -> 0.000014828144908124517`, "TestSize" -> 
                 900, "TrainingSize" -> 1000, "TrainingTime" -> 
                 0.04059593119809187, "TrainingMemory" -> 257248, 
                 "ModelMemory" -> 9088, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 10.267842097662918`, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.44095756654873236`, 0.013217452298177798`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.8720699010654557, 0.01133176190129395]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000014828144908124517`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.44095756654873236`, 0.018692300300102476`], 
                "ModelMemory" -> 9088, "TrainingMemory" -> 257248, 
                "TrainingTime" -> 1.3501402278932773`], "Index" -> 10], 
            Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 6], "LearningRate" -> 
                Association["Value" -> 0.1], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 4], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 90], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.3862403441289937`, 0.00042114821218665614`], 
                 "Accuracy" -> 
                 PlusMinus[0.12735381138084514`, 0.005934767018478813], 
                 "EvaluationTime" -> 1.421074110915563*^-6, "TestSize" -> 
                 6300, "TrainingSize" -> 50, "TrainingTime" -> 
                 0.007880784109793846, "TrainingMemory" -> 53824, 
                 "ModelMemory" -> 20248, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 4.188956007795936, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.3862403441289937`, 0.00029779675672177554`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.12735381138084514`, 0.004196514003528637]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.4320952596009127, 0.07215250272818839], 
                 "Accuracy" -> 
                 PlusMinus[0.864168567053435, 0.049535880900694766`], 
                 "EvaluationTime" -> 0.0003081551375773018, "TestSize" -> 100,
                  "TrainingSize" -> 250, "TrainingTime" -> 
                 0.16489404619048392`, "TrainingMemory" -> 1504144, 
                 "ModelMemory" -> 378720, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 4.7205542757672125`, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.4320952596009127, 0.05101952395868288]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.864168567053435, 0.03502715729693045]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.09384042914961298, 0.017769968517709057`], 
                 "Accuracy" -> 
                 PlusMinus[0.9487126613676673, 0.016650971625111793`], 
                 "EvaluationTime" -> 0.000359025852746628, "TestSize" -> 200, 
                 "TrainingSize" -> 1000, "TrainingTime" -> 
                 0.28488655371503335`, "TrainingMemory" -> 1863304, 
                 "ModelMemory" -> 388224, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 20.69604949445127, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.09384042914961298, 0.017769968517709057`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9487126613676673, 0.016650971625111793`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000359025852746628, "MeanCrossEntropy" -> 
                PlusMinus[0.09384042914961298, 0.017769968517709057`], 
                "ModelMemory" -> 388224, "TrainingMemory" -> 1863304, 
                "TrainingTime" -> 9.38691590551612], "Index" -> 11], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 100000.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.3860942251767991`, 0.00019321973571476502`], 
                 "Accuracy" -> 
                 PlusMinus[0.6901858659442554, 0.004379920006253271], 
                 "EvaluationTime" -> 9.713405731216473*^-7, "TestSize" -> 
                 22300, "TrainingSize" -> 50, "TrainingTime" -> 
                 0.006551924593993647, "TrainingMemory" -> 65688, 
                 "ModelMemory" -> 9088, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 4.2426964440445385`, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.3860942251767991`, 0.00013662698538298288`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6901858659442554, 0.003097071137476313]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.3855595560145957`, 0.00021063737278457796`], 
                 "Accuracy" -> 
                 PlusMinus[0.7732591942803834, 0.005257579489323785], 
                 "EvaluationTime" -> 1.359015205204393*^-6, "TestSize" -> 
                 12700, "TrainingSize" -> 250, "TrainingTime" -> 
                 0.0077633221658956085`, "TrainingMemory" -> 87576, 
                 "ModelMemory" -> 9088, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 4.198312764106108, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.3855595560145957`, 0.0001489431146672938]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7732591942803834, 0.003717670109528153]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1.359015205204393*^-6, "MeanCrossEntropy" -> 
                PlusMinus[1.3855595560145957`, 0.00021063737278457796`], 
                "ModelMemory" -> 9088, "TrainingMemory" -> 87576, 
                "TrainingTime" -> 1.0288882939764543`], "Index" -> 12], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1000.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.3707103589337948`, 0.00018320442858124852`], 
                 "Accuracy" -> 
                 PlusMinus[0.6948010958383855, 0.0036466319695360474`], 
                 "EvaluationTime" -> 1.0134967007076166`*^-6, "TestSize" -> 
                 31900, "TrainingSize" -> 50, "TrainingTime" -> 
                 0.008107154943422972, "TrainingMemory" -> 66968, 
                 "ModelMemory" -> 9088, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 4.285153603732758, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.3707103589337948`, 0.00012954509379320737`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6948010958383855, 0.0025785581941505944`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.3210667737675947`, 0.001713103205656351], 
                 "Accuracy" -> 
                 PlusMinus[0.7844968345384694, 0.010462470529063458`], 
                 "EvaluationTime" -> 1.3534978299016228`*^-6, "TestSize" -> 
                 3100, "TrainingSize" -> 250, "TrainingTime" -> 
                 0.012383111823485489`, "TrainingMemory" -> 90296, 
                 "ModelMemory" -> 9088, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 4.40293204126532, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.3210667737675947`, 0.0012113468935920184`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7844968345384694, 0.007398083859065176]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1.3534978299016228`*^-6, 
                "MeanCrossEntropy" -> 
                PlusMinus[1.3210667737675947`, 0.001713103205656351], 
                "ModelMemory" -> 9088, "TrainingMemory" -> 90296, 
                "TrainingTime" -> 1.6388143847545802`], "Index" -> 13], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.01], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.16604140623580863`, 0.005772425139012769], 
                 "Accuracy" -> 
                 PlusMinus[0.9351700305217945, 0.0038279787007944057`], 
                 "EvaluationTime" -> 2.138460163771718*^-6, "TestSize" -> 
                 8700, "TrainingSize" -> 50, "TrainingTime" -> 
                 0.01995883700131061, "TrainingMemory" -> 73432, 
                 "ModelMemory" -> 9088, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 34.07686050330642, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.16604140623580863`, 0.004081720959687628]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9351700305217945, 0.002706789697569394]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.1398171474644986, 0.020559809199304127`], 
                 "Accuracy" -> 
                 PlusMinus[0.952285176397873, 0.011750131613027869`], 
                 "EvaluationTime" -> 2.1146408208032107`*^-6, "TestSize" -> 
                 700, "TrainingSize" -> 250, "TrainingTime" -> 
                 0.022479992268039033`, "TrainingMemory" -> 95192, 
                 "ModelMemory" -> 9088, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 39.60986767669982, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.1398171474644986, 0.014537980504729509`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.952285176397873, 0.008308597743406431]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.11581807251323278`, 0.008770611805091874], 
                 "Accuracy" -> 
                 PlusMinus[0.959733808977023, 0.003527605716895733], 
                 "EvaluationTime" -> 1.2150314885667138`*^-6, "TestSize" -> 
                 6300, "TrainingSize" -> 1000, "TrainingTime" -> 
                 0.042922647033415924`, "TrainingMemory" -> 257120, 
                 "ModelMemory" -> 9088, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 49.676010327328136`, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.11581807251323278`, 0.00620175908253525]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.959733808977023, 0.002494393923769405]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1.2150314885667138`*^-6, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.11581807251323278`, 0.008770611805091874], 
                "ModelMemory" -> 9088, "TrainingMemory" -> 257120, 
                "TrainingTime" -> 1.4330582226354298`], "Index" -> 14], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.0001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.11679127697925526`, 0.008726222833180208], 
                 "Accuracy" -> 
                 PlusMinus[0.9576185107497261, 0.003614870586751044], 
                 "EvaluationTime" -> 1.7463164405490305`*^-6, "TestSize" -> 
                 6300, "TrainingSize" -> 250, "TrainingTime" -> 
                 0.02207429239870119, "TrainingMemory" -> 95224, 
                 "ModelMemory" -> 9088, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 48.56206301364999, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.11679127697925526`, 0.006170371339486612]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9576185107497261, 0.002556099505003457]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.11748200347566223`, 0.008591386254508192], 
                 "Accuracy" -> 
                 PlusMinus[0.9610207527630036, 0.0024393028148686755`], 
                 "EvaluationTime" -> 1.0816133932728676`*^-6, "TestSize" -> 
                 12700, "TrainingSize" -> 1000, "TrainingTime" -> 
                 0.03023704219421192, "TrainingMemory" -> 257120, 
                 "ModelMemory" -> 9088, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 49.181927457093025`, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.11748200347566223`, 0.006075027480355636]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9610207527630036, 0.001724847561761074]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.11863427813105505`, 0.0042098517866496], 
                 "Accuracy" -> 
                 PlusMinus[0.9565642000208056, 0.0017633278977455958`], 
                 "EvaluationTime" -> 1.0400889174231975`*^-6, "TestSize" -> 
                 26922, "TrainingSize" -> 6000, "TrainingTime" -> 
                 0.1632746679347995, "TrainingMemory" -> 1424960, 
                 "ModelMemory" -> 9088, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 49.126203829934234`, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.11863427813105505`, 0.002976814746130235]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9565642000208056, 0.0012468611139513299`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1.0400889174231975`*^-6, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.11863427813105505`, 0.0042098517866496], 
                "ModelMemory" -> 9088, "TrainingMemory" -> 1424960, 
                "TrainingTime" -> 0.917962395356946], "Index" -> 15], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 100.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.0502873159512098`, 0.0027047147278570897`], 
                 "Accuracy" -> 
                 PlusMinus[0.8344011464773897, 0.003978184236584136], 
                 "EvaluationTime" -> 9.83112483292525*^-7, "TestSize" -> 
                 17500, "TrainingSize" -> 250, "TrainingTime" -> 
                 0.014616884470191039`, "TrainingMemory" -> 93480, 
                 "ModelMemory" -> 9088, "ExperimentCount" -> 1, 
                 "ModelUtility" -> 5.594596739545323, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.0502873159512098`, 0.0019125221252428754`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.8344011464773897, 0.0028130010504980713`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 9.83112483292525*^-7, "MeanCrossEntropy" -> 
                PlusMinus[1.0502873159512098`, 0.0027047147278570897`], 
                "ModelMemory" -> 9088, "TrainingMemory" -> 93480, 
                "TrainingTime" -> 1.9394851665807085`], "Index" -> 16]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration[
               "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
                "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
               TypeSystem`AnyLength]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "TrainingSize", "TrainingTime", "TrainingMemory", 
                 "ModelMemory", "ExperimentCount", "ModelUtility", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 16], 
           Association["ID" -> 216165871490396]], "MaxTrainingSize" -> 32922, 
         "LastReportingTime" -> 3.7650059147772603`17.328340651968414*^9, 
         "PreprocessorEvaluationTime" -> 9.5429755245089`3.*^-6, 
         "PreprocessorMemory" -> 39928, "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 50, "TimeBudgets" -> 0.7256313856000005, 
             "ElapsedTimes" -> 2.2031300000000003`, "ExperimentCounts" -> 14], 
            Association[
            "TrainingSizes" -> 250, "TimeBudgets" -> 0.9070392319999999, 
             "ElapsedTimes" -> 1.2030781, "ExperimentCounts" -> 16], 
            Association[
            "TrainingSizes" -> 1000, "TimeBudgets" -> 1.133799040000001, 
             "ElapsedTimes" -> 1.3124968, "ExperimentCounts" -> 11], 
            Association[
            "TrainingSizes" -> 6000, "TimeBudgets" -> 1.4172488000000003`, 
             "ElapsedTimes" -> 1.5937636, "ExperimentCounts" -> 6], 
            Association[
            "TrainingSizes" -> 26338, "TimeBudgets" -> 1.771561000000001, 
             "ElapsedTimes" -> 1.7187078000000002`, "ExperimentCounts" -> 4]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 5], 
           Association[
           "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
              Dataset`DatasetHandle[216174461424988]], "ID" -> 
            216178756392284]]], "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {620}, "ID" -> 
              4523229796654273697], "f2" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {196}, "ID" -> 
              2781649588339208262]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> 
            False]], "TrainingTime" -> 9.544391348984853, "MaxTrainingMemory" -> 
         8558672, "DataMemory" -> 6057728, "FunctionMemory" -> 304456, 
         "LanguageVersion" -> {11.3, 0}, "Date" -> 
         DateObject[{2019, 4, 23, 10, 58, 35.5741261`9.303709133876225}, 
           "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association["Input" -> CompressedData["
1:eJxN3XvUleWZHvD9ffvjA0zERExBh+gIGUyKWNB6qJglWA9LdIAUtYolOoAV
rJgFZJDUwyAZMCNm0FRN1TTA8rDEFEgVR3E8jOIoU8V6GNBCUsEGXUGjpoFk
0BH7/Hiud23/2Guz3+89PM99X/d1Xffzvntz5LTv/Lurulut1vgBrZb3E8vr
0K5Wa2d5TSwbTutptb5Wto0pn39Z3v+43WpdXl67y+c3yuuE8nq+fL6z7Nub
/X5VPr9Q3j8qr+Fl+93l/dnyOrVs/7jss6psa/et511W/r25bN9e/n5AeS0t
r2Wu0V3Pc175PKddr/N22f/4sv2a8nl+eT+5vA8t26eXfz9aXsvL69Py+mp5
HVheQ8vrT8o+x5Xjbi6vpeXzW+V1dXl9WI4bVP72szK/b5a/3VS2faG8v1Ze
W8v2A1r1Oi+W7aeUff+q/PvSsm1keW0ony8s22/L+HaWf68v279d3v+2bDu3
VeNxb3n9Zfn8Fecs/55bXlt663mWlOPWldeIsu0n5fNB5fVw+fepmYf375Rt
Z5R9dpd/Dy7vB7drHOXh6PK+qavO64Xy9419ajyfL/++oby+XPY9srz2ln1e
L9v3lNfa8u/DynzPKv/+url21es+U/a7u7zP66rHm99zZb/y1vpp8nBH+ffL
5TWsvK4qf+gpr9vL3x5I/haV7c+Wf88s28d213mJ/2dl+2dlW7/y74fKfgvL
+0nmmjjc2qcTV9dZk7zM71u3w+PvW/W84v1E4iK+8ipPDyUucGI8p7crrt7K
+zFlnyPL+6zgS35PL59/1KrzXlL+fVfZ/l55/REsls9HlX8PThxHlNeNfep5
jOf48nlcq+JsQNlvSLvOV3weNLby+ZxWzaPriNOvyuva4PKl8ppTXu+UY+8s
8/xW2ffF8n5Bef9FeX1SXru6al5Hddd4b81495V/39Jd4z2hXOfV8vl75d/X
lvfHy/s93RUHA8vnfyjv77VqHfv8g/LvS8qrp3ye16p4/2riPTH1t+RzcTi7
vH6XeBr/yLJ9RzkGMMzjiFatO3k6pW5uPSWn5R/Hpa6Wl39fVt6vy7zg2Ps/
BWd3Ji7d5Rp9yud/AWtddZ7G9y/bFa/yaN5XlteerpqfLcnT6PK+LXGZm/HD
2eHl/Z1WrUf1fkV535x6dh11e3Z5XRScrg1POV59jSuv/uX1YN4vKa/Fas34
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
uBvXp6OjxrUpPEd38Zh1TM/1ws/AzE/ePw7vi4/+yWf3v93nomf8/vm5/j3x
gfDs73imK+ttx0Yfro0+qDd9ms8Phb/hZ3r6vDdSZ/KIZ8RdPIx/WHBNJ/Ee
Xng79789J9Sb/MHhLZmfPMEVvJmnvghPvJP4qGf1Zz+8C1f8IH+1LD4an9M5
dbMjzxPtSF7UifWkr6bfWJ766Z/PfBJ8nJP+jC7sTp2clfozXv0HvtwVfK3P
c2bw8m72uzM+obmPBkfOPyM6eVzqaWH8FB3A1/yevpueGK/7vPSWv6PLfLbr
bkyc6BR80rt1wQ99MZ4ngzN1jP/gAi8bj/tSfPeVqVf3nQ7J9w4GBH/GaR16
X/jZ+tJBOe572V9c5M+46PQN4UO8CPdTwkMbM+6Hw0fWC/gD62LqWxz1iXh/
b/jv9PDarsTDdfGDPndz/Cp8XhS+Ne53g0M8cFZPJ//W2zzXY7zWBY2LXuD/
odEh+Hk1dcFnwrV65cvXBn/yaj1kQurIetyM4NP61f2Jk/OZ1xXhM+vz6gDP
4ofVqSc89W7wpd7gGK/TZ3qON/DjDeELeRyY4w9MXOmh9dh1Ga+6uyz4NU86
T//hkv96LPpGJ/CC4/iKP0n/SNfwyOV9a/zoJv90d+Iu/taPTwnuN2X++Gdn
+AAfWX8wLzg2DrwgHovC59YR8Dd/CN/uC+Fh94NOCn/CGb3ji+EJb3waXlaH
jluS/MOddR/j56P4yLnhfesw/PQlwcnrqQd4VJfqyHj4S35F//xo387zOvDc
L/VwYvIpzvy4+534X/26nnU//ZG65ZOWhw+t4+AvdQ+f1ovl5dHwnXrTN9Mf
fcyazEsdr4xe6YfwgHmIx/77BXkubVN4WBz1C/clPyeHZ1ZH/4zPfHemrnel
H5sQPMuvfJkvvjLfo8J79HhJ+gD5L3/e7+P212Ge95iZ+e8ML9Nr41Zv/MXC
XMd9WjpCz/TB+gF1/3ziCJ/4XL3hc8+9wgV/qD+Aa/pzTfQXr9Gfe3K/d1nD
U9ED64qeZ/g0x+MPuBD341OP+hTrL6PDU/RF/eIJ/lufQbfUz5Dws/nqozaE
f/kJ9XFl5ql+XBcOrCOpV/3rNVk/HZ31JPl1HX1mV+rk4/Ch/vEL4Qn10pV8
80Pi8V7quMk3XMEPXpBX63l8vvU8/YO6W5u648fU7XPxARdl3s90d74XgH/4
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
fz0+3bqV/lI90cXByeNFycui1BN9Mx/rJCtbdX3l56kn/dex0Q/xME7x2v89
yFblkeO7O7+roG/Eg3RLnuGa33E/gF8SL/5P36Sfxx+uy8fc1N25L6n+rEOf
HF9wT/oo9z9WtKqOmg8doMN8w4N5vs5xzbqAdTj4EBd90BGJEx7m2/TDy8J7
+E88FocfnOcrySP/7Dojwx/wQLfUz47Mlx/np53Xet4nWWehi/BNT7emX3Sf
7Pl8D5k+6Q/4GHWq73w629Xv3vD++OB4fZ7Xct550R370w9x4Nc95z47999c
96qMH9/CxVdSB3jomvDUH9qVR6dlfupyY3R5ZOLleq7LH1rfoucX5Tz9+tb5
0iu+/MbElz7py/kpfMvvOd++9FHqgl7CIVyK44fhFTj8aerWefTZcHNueMl1
piZ+6uis8C48nxg8nNfb+d2O86Jr9OiJjHdW9lNnn4RXm+9B86vWN/D3Mekb
1waX/NLw9OmXtioO3G+/M7oNJ/RTXqybHdjd+R6HdYwrExc8aF2bns5IvNWp
v387cfx94oA3rJOZ76HJ+9TggL7y//1SJ/TyqdQbXPFp+MLxzfqcvvmU4HdD
cPVK6n518ux4db27WX/OfVB8SefpFT1RL4Py7nrWB5vnDfgp/flDwf/SxFV/
ybfxe/wJvvu7+EXz1d8PC0/Mjn7CHT4aH96FUzj5X+2af/7CeW8Pn89OXOjG
sOgxntkYPpqZ+xHw4e90+drECX/9deoF33huT/3sfz4t59mTupsU3Tg6PDoh
vCd/fMzfZH6XJ1+jExc+Wp/rPPyfPpZ/0bdY13ks9SfPK/L+YvwUXTwzPP6H
+NMbejvf26S31iHpOx2Sb36l8UUXJL/3hw/4hhn5fbYFrc73W+FOP3NW8Nvw
v3qhz5cEl/Lxozz3LR9S4Hr40PXgmx/ZHh29OXwCry/3dH63C6+OCV4Hh/8m
pQ+UP30VvXWf1bjUK947PHlpvseoz6G3Dc7pAR0fG905LXXQSl7lm9+Sb7rj
/uST4Snj+Enq/43wrPV9x/MPfDweo5d8Cz/IL9IVx70XHKhvzyXoU/mxR8Ir
B2Xd5Gs9Hd+5/3mH3LfalnjAlTqjE/hGfbwSnRSPE9P/wBW84H91h7/V04rw
uvG8n3y5jnGLiz5Sf0cH1XUrPkTfymddm++z0hPr7SdEl9YknnRaP8Ifq8uJ
id9fB/982t7w6/jkTb/xYPIDL+bLtzTfh+Gv1ZV+3LrFZ8kzfNt+Y+pWHMYF
t8/FRx5e07u/n6CLk+MHHs+8h+Q4uKM/q1K/eMt61T2p41P7dvon56FX1k1/
EJ1/KLzBh8MfHrYOpd7fTnyb7yXYvj7Pj6hj8davui5cTEg/SJcXteq6Mj7s
TV0ZB7zRSfXUfG/tV+FtvvfI6O28XO+o8EJPeEVfJ28jwifPBPd01Pfr+Ar9
M/6im3BDh8zb+OYHV7/o01nn4Y/px/vhOXmgg+pge+67Ob9+0Xzo4MDE/YQ8
R8j/qWfnwwPXhR8fC/8bf+MHxcF5+JDfBUdD+nZw1vy+pesdELzTf/owJfWg
rsyPnokv3qBHu4IvPsN6lHrUD+APfZd4waV3dYGX8MDO/H1T5rGjVdcVHMfH
42F+YkP4AC6c33jo0cU9nd+twnP8xLTU78Jcp7n/Yjz6YetS9+V6e8J7cNr8
/iaeohuuQxfvim7gAcfpm/RL5ksHmueBm74bvsxD3ekvjfOL8d1Ppf8WH/Pc
l3ya1+LkSZ3Tfefna/hkvK1/wGP0jg/Ev7cFL1+OH9WnWt9ZEt6+p2/n9/f4
vG/lfhG+sW6t7/8o9UcXV+Z7FPzSbTk/3PGR1k1nJ+982PfhO32/8/M9GxNP
PA+Hk7Pfzujns8E1PaRzeBUhiKc835V4fJp5GYf+7Uf5/QQ8bR1sQ+rsi+FV
9a0+fa/a+U8OT6lLeZ2X51n/vt35vZzlmRccnNy3s76MP3xf1fng3bqr9cwH
owPPhxfVq3XzZh1J/G5KvuRVXbzQ23l+gX/h8/gn+s/P0qN3ky8+2/HWi9R9
89wdf0gH9ad89xnhTXU9MzzAL1uXfiH339T5fTnO+tfg1BN9MH580/jumZkf
Xfib4Mh17b8m+jU+8zw6/IlX6J284lW+p7mfiC/5MT5+dHArj+JyS1eHVx8J
79F7/P12cM6/6hesO+ABPmV5b+d7yq/E75+U87j/NShxg2M6dG98Kr5unjem
h/B+XeoNLvhHfmlMb+d+tH4FL4gHPsOrWxPPicEnvPKF9jPev4ifPi98ti18
gj8fjf8Urx3RMePflzjp+xZH/8xbXkam/td+7rlh/mVX+jP7vR+8fpK4qE/3
AfQ7rs9Xwte54e/me6vOh6/whPo2fvpnfz5scvRUXvkHej6uVf2Jzy8kjvKx
NXWL193H9DtcXwt+mt935KvgC+7W5/lRPHZo+Mf8b8vvg/EfIxNnfh1e8a79
u1JH8quP/nb07vj4kWuDm8vCNyOjc/iZDuDjodGpFa3a73m+ynmPzPceHWcd
1nrODzK//c9PZH1geuY/P/FSx833UxanPz0ix6lb+bCu9dXUzV1dnd8JlG/+
YGWr6vXHweXEzAv/0eWfhif4MLytf/ggPHVt4kCv4ZGveil8Zj6H5Hk148Iz
1j/dN6Nn7k/g7R3B8/3hffPCU/pV83g6PCe++tCv5Tx8NZ61PnRg8sIH8BH8
resuDs/ge/ozPnUhD/T86fC6fuLs1N31qWvz5SfxnLockbq/NnxmPf6c4Inu
6Nvk7e0cT8dnBMfwS8/nRT/oOvzqc/b78q56//Pk5NU6V/P9eXWij8Af+j96
NzQ+/YL0I+b5tZzPOsDa6Dy94kv+Nv2dusbT1nfpH7zxL7dGB6yn7F8Pyrqx
OoQfvsz88Bj/a5yXp06t6/Mt1r/0L/ri1cHvgODF8da1rBNtzXF4c0nmQXce
ii9SJ/yPdQM61PwuhXi9l/qEX7ourjdEP/jfIdGTOYnfET2ddbXmd8sGpv76
Jx+NTxSg38Svj02c23076/nwKZ/4ZEPw+/XUzw2pE7xnffT24JUevBZe3Z1x
qns+jT7vyfH84qXhLfXNX8GL+uTTxbH5PetvZB50bWHwTdfUrXE2v+ukHlz/
4/CJ8c5Jf0rn9Nnie3b8hHGuSzyfD2+ZnzqBO74Pz/Ah70QXxEm+H4huyYf1
YnxDvwb2dn6/sSt5wNOPBgf4kc4b34vp0/Qt38v6AtzTde/83Nzg9ZzgZHOu
i3/lHc/QN+se8ITPXNg4xWtm9OTO8KNx0F/4148syHN+f4iefha9vKKnc1+Q
D3oy9b+oVec/ObxgHeQnwQP/cHZwyAfsSh5HJ2/6GXz+UXhGvLdFZ46KDsyO
XtjOh/CNfN6Y3GfmL8V3SPh/anwk38B/r47/Vq+rM0/4xQN4clN4Gx71B1OC
Sz5Lnl6Nj+FvPafgvqK6cJzz4Wfjuz3rjequX3TI8fyXOlPfxn1g6hmO4PnV
PK8mn++lrvH04elTJ4cH8Da+Fy9691rGQxf4DzpineefEkd1PSL9kDyZv7oz
L3jhT8UdHvGz9Qx8Twfg3Dq+OF4enBwfXrswPDUxPhfe5ZX/Xhhd2f+96Pgk
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
       "], 
      "Output" -> {
       "r1", "r3", "r5", "r1", "r2", "r2", "r1", "r2", "r1", "r3", "r2", "r3",
         "r1", "r5", "r2", "r2", "r3", "r2", "r1", "r1", "r3", "r2", "r1", 
        "r2", "r2", "r2", "r5", "r1", "r2", "r3", "r5", "r2", "r1", "r1", 
        "r2", "r5", "r1", "r2", "r1", "r1", "r5", "r2", "r5", "r2", "r5", 
        "r3", "r2", "r1", "r2", "r2", "r1", "r1", "r2", "r1", "r1", "r5", 
        "r2", "r2", "r2", "r1", "r5", "r1", "r1", "r1", "r2", "r5", "r2", 
        "r1", "r1", "r1", "r2", "r1", "r3", "r2", "r1", "r3", "r2", "r5", 
        "r5", "r1", "r3", "r5", "r1", "r3", "r2", "r2", "r1", "r3", "r2", 
        "r2", "r2", "r2", "r3", "r2", "r1", "r3", "r2", "r1", "r2", "r5", 
        "r1", "r1", "r1", "r2", "r1", "r1", "r2", "r2", "r3", "r2", "r5", 
        "r5", "r1", "r3", "r2", "r2", "r3", "r1", "r2", "r2", "r2", "r1", 
        "r1", "r1", "r1", "r1", "r1", "r1", "r3", "r2", "r2", "r2", "r1", 
        "r2", "r2", "r1", "r1", "r5", "r2", "r1", "r1", "r2", "r2", "r2", 
        "r2", "r2", "r5", "r2", "r2", "r1", "r1", "r3", "r3", "r2", "r1", 
        "r2", "r2", "r2", "r2", "r1", "r3", "r1", "r1", "r1", "r2", "r5", 
        "r1", "r3", "r2", "r2", "r1", "r2", "r1", "r5", "r2", "r1", "r1", 
        "r2", "r1", "r1", "r2", "r2", "r1", "r2", "r5", "r2", "r3", "r2", 
        "r3", "r1", "r1", "r2", "r3", "r1", "r1", "r2", "r5", "r2", "r2", 
        "r1", "r5", "r1", "r3", "r2", "r2", "r2", "r3", "r2", "r1", "r2", 
        "r1", "r3", "r2", "r5", "r1", "r1", "r2", "r3", "r1", "r2", "r5", 
        "r3", "r2", "r2", "r1", "r1", "r2", "r2", "r5", "r1", "r5", "r1", 
        "r1", "r1", "r1", "r2", "r1", "r2", "r1", "r2", "r2", "r2", "r1", 
        "r2", "r2", "r1", "r2", "r2", "r1", "r1", "r3", "r2", "r1", "r3", 
        "r1", "r1", "r3", "r3", "r1", "r5", "r3", "r1", "r2", "r2", "r5", 
        "r2", "r3", "r2", "r1", "r1", "r2", "r5", "r2", "r2", "r3", "r2", 
        "r1", "r1", "r5", "r2", "r1", "r3", "r3", "r1", "r1", "r1", "r2", 
        "r3", "r1", "r2", "r2", "r1", "r1", "r1", "r1", "r1", "r5", "r2", 
        "r2", "r5", "r1", "r2", "r2", "r1", "r1", "r3", "r1", "r1", "r2", 
        "r1", "r1", "r2", "r2", "r3", "r3", "r2", "r1", "r5", "r2", "r3", 
        "r3", "r2", "r3", "r1", "r2", "r3", "r1", "r1", "r3", "r1", "r3", 
        "r1", "r1", "r1", "r1", "r1", "r2", "r3", "r5", "r2", "r1", "r2", 
        "r2", "r1", "r2", "r1", "r1", "r5", "r1", "r1", "r5", "r1", "r5", 
        "r5", "r5", "r1", "r2", "r1", "r2", "r2", "r2", "r5", "r2", "r3", 
        "r1", "r1", "r2", "r2", "r2", "r2", "r2", "r2", "r2", "r2", "r1", 
        "r1", "r1", "r3", "r1", "r5", "r1", "r2", "r1", "r5", "r1", "r2", 
        "r1", "r1", "r2", "r1", "r1", "r2", "r2", "r2", "r1", "r2", "r1", 
        "r1", "r5", "r3", "r1", "r5", "r2", "r1", "r1", "r1", "r5", "r5", 
        "r2", "r2", "r2", "r2", "r2", "r3", "r2", "r5", "r1", "r2", "r2", 
        "r2", "r1", "r1", "r2", "r2", "r1", "r5", "r2", "r3", "r3", "r2", 
        "r5", "r1", "r1", "r1", "r2", "r3", "r3", "r2", "r2", "r1", "r5", 
        "r2", "r2", "r1", "r5", "r2", "r2", "r2", "r1", "r2", "r5", "r1", 
        "r2", "r1", "r1", "r5", "r2", "r5", "r3", "r2", "r3", "r2", "r1", 
        "r2", "r2", "r3", "r1", "r3", "r2", "r2", "r1", "r2", "r5", "r1", 
        "r3", "r1", "r1", "r2", "r5", "r2", "r1", "r2", "r3", "r2", "r1", 
        "r2", "r1", "r5", "r2", "r2", "r5", "r1", "r2", "r2", "r1", "r2", 
        "r1", "r3", "r3", "r5", "r1", "r1", "r1", "r3", "r2", "r5", "r2", 
        "r1", "r5", "r2", "r2", "r1", "r1", "r3", "r1", "r1", "r5", "r1", 
        "r2", "r2", "r3", "r2", "r3", "r5", "r1", "r1", "r3", "r1", "r2", 
        "r5", "r5", "r2", "r1", "r3", "r3", "r2", "r2", "r1", "r1", "r2", 
        "r3", "r5", "r2", "r1", "r2", "r5", "r5", "r1", "r2", "r2", "r5", 
        "r1", "r1", "r5", "r1", "r3", "r1", "r3", "r3", "r1", "r2", "r2", 
        "r5", "r1", "r1", "r5", "r3", "r1", "r2", "r1", "r2", "r5", "r3", 
        "r1", "r3", "r2", "r1", "r3", "r5", "r1", "r2", "r3", "r2", "r5", 
        "r3", "r5", "r3", "r1", "r1", "r2", "r2", "r3", "r5", "r2", "r1", 
        "r1", "r1", "r3", "r1", "r1", "r3", "r2", "r1", "r1", "r5", "r2", 
        "r1", "r2", "r3", "r2", "r5", "r2", "r2", "r1", "r1", "r1", "r2", 
        "r5", "r3", "r2", "r1", "r2", "r5", "r2", "r2", "r3", "r1", "r3", 
        "r1", "r2", "r2", "r1", "r2", "r5", "r2", "r1", "r1", "r1", "r2", 
        "r1", "r1", "r2", "r2", "r2", "r3", "r2", "r2", "r1", "r1", "r2", 
        "r1", "r1", "r2", "r2", "r1", "r3", "r5", "r1", "r1", "r5", "r1", 
        "r2", "r1", "r5", "r5", "r5", "r2", "r3", "r2", "r1", "r1", "r2", 
        "r2", "r3", "r1", "r1", "r2", "r2", "r3", "r2", "r1", "r5", "r2", 
        "r2", "r1", "r1", "r1", "r3", "r1", "r1", "r1", "r1", "r2", "r3", 
        "r2", "r1", "r5", "r5", "r2", "r5", "r1", "r2", "r2", "r1", "r2", 
        "r2", "r2", "r2", "r3", "r1", "r1", "r5", "r1", "r1", "r1", "r1", 
        "r1", "r1", "r1", "r1", "r1", "r1", "r1", "r5", "r3", "r1", "r3", 
        "r2", "r5", "r5", "r3", "r3", "r5", "r1", "r3", "r2", "r3", "r1", 
        "r1", "r1", "r2", "r1", "r1", "r1", "r3", "r3", "r5", "r1", "r5", 
        "r1", "r2", "r2", "r1", "r2", "r1", "r2", "r3", "r2", "r1", "r2", 
        "r1", "r1", "r5", "r5", "r2", "r1", "r3", "r5", "r2", "r3", "r1", 
        "r1", "r1", "r2", "r1", "r2", "r5", "r1", "r1", "r2", "r1", "r2", 
        "r2", "r5", "r5", "r1", "r1", "r1", "r3", "r1", "r2", "r1", "r1", 
        "r2", "r3", "r2", "r2", "r1", "r1", "r5", "r2", "r5", "r1", "r3", 
        "r1", "r2", "r2", "r5", "r2", "r2", "r1", "r5", "r1", "r2", "r2", 
        "r2", "r1", "r3", "r5", "r3", "r2", "r2", "r1", "r1", "r2", "r2", 
        "r2", "r1", "r1", "r3", "r3", "r2", "r3", "r2", "r1", "r1", "r1", 
        "r2", "r2", "r2", "r1", "r5", "r2", "r1", "r2", "r2", "r2", "r1", 
        "r1", "r1", "r2", "r1", "r1", "r2", "r1", "r5", "r2", "r2", "r1", 
        "r3", "r1", "r2", "r1", "r5", "r1", "r3", "r1", "r3", "r1", "r2", 
        "r1", "r1", "r3", "r2", "r2", "r3", "r3", "r5", "r3", "r2", "r2", 
        "r2", "r1", "r2", "r5", "r1", "r5", "r1", "r2", "r1", "r3", "r2", 
        "r2", "r3", "r5", "r2", "r3", "r1", "r5", "r1", "r1", "r3", "r1", 
        "r3", "r1", "r2", "r2", "r3", "r2", "r1", "r5", "r2", "r2", "r1", 
        "r3", "r5", "r1", "r5", "r2", "r5", "r3", "r1", "r5", "r2", "r1", 
        "r3", "r1", "r1", "r2", "r2", "r2", "r2", "r2", "r1", "r2", "r5", 
        "r2", "r5", "r2", "r1", "r1", "r1", "r2", "r1", "r1", "r1", "r2", 
        "r2", "r3", "r2", "r2", "r1", "r3", "r2", "r2", "r2", "r1", "r3", 
        "r2", "r1", "r1", "r3", "r2", "r1", "r2", "r2", "r2", "r2", "r1", 
        "r3", "r1", "r1", "r2", "r2", "r2", "r1", "r2", "r2", "r1", "r2", 
        "r3", "r1", "r3", "r3", "r2", "r2", "r5", "r2", "r1", "r2", "r1", 
        "r3", "r2", "r5", "r1", "r1", "r2", "r3", "r1", "r2", "r3", "r5", 
        "r1", "r2", "r3", "r2", "r1", "r1", "r5", "r1", "r3", "r3", "r2", 
        "r1", "r2", "r3", "r1", "r1", "r3", "r1", "r2", "r2", "r2", "r2", 
        "r3", "r1", "r3", "r1", "r1", "r2", "r2", "r1", "r3", "r5", "r1", 
        "r5", "r1", "r1", "r1", "r2", "r2", "r1", "r1", "r1", "r3", "r1", 
        "r1", "r2", "r1", "r2", "r2", "r3", "r1", "r2", "r1", "r2", "r2", 
        "r1", "r1", "r2", "r2", "r1", "r2", "r1", "r1", "r1", "r2", "r1", 
        "r1", "r2", "r1", "r2", "r3", "r2", "r2", "r2", "r1", "r1", "r5", 
        "r1", "r2", "r3", "r3", "r1", "r1", "r3", "r2", "r2", "r2", "r1", 
        "r3", "r1", "r2", "r1", "r2", "r1", "r2", "r2", "r1", "r5", "r5", 
        "r2", "r5", "r1", "r2", "r1", "r5", "r1", "r2", "r5", "r2", "r2", 
        "r3", "r5", "r1", "r1", "r5", "r2", "r3", "r2", "r2", "r3", "r2", 
        "r5", "r1", "r3", "r3", "r5", "r1", "r2", "r3", "r2", "r2", "r5", 
        "r1", "r3", "r2", "r1", "r1", "r5", "r1", "r1", "r5", "r2", "r2", 
        "r3", "r1", "r2", "r2", "r5", "r1", "r3", "r5", "r2", "r5", "r2", 
        "r2", "r2", "r2", "r2", "r3", "r2", "r3", "r3", "r2", "r2", "r2", 
        "r1", "r2", "r1", "r5", "r5", "r2", "r5", "r2", "r1", "r2", "r2", 
        "r1", "r2", "r1", "r2", "r1", "r2", "r1", "r2", "r2", "r5", "r2", 
        "r3", "r2", "r1", "r3", "r1", "r3", "r5", "r1", "r1", "r3", "r5", 
        "r2", "r1", "r3", "r5", "r1", "r2", "r1", "r2", "r5", "r2", "r1", 
        "r3", "r1", "r1", "r5", "r2", "r5", "r1", "r2", "r5", "r3", "r2", 
        "r5", "r2", "r1", "r5", "r2", "r1", "r1", "r1", "r1", "r2", "r2", 
        "r2", "r2", "r3", "r5", "r2", "r5", "r1", "r2", "r1", "r3", "r1", 
        "r1", "r1", "r2", "r2", "r2", "r5", "r3", "r1", "r1", "r1", "r5", 
        "r1", "r5", "r2", "r2", "r2", "r1", "r1", "r1", "r2", "r2", "r3", 
        "r3", "r2", "r1", "r2", "r2", "r1", "r2", "r1", "r1", "r1", "r2", 
        "r2", "r1", "r1", "r3", "r1", "r2", "r1", "r1", "r1", "r2", "r2", 
        "r1", "r2", "r3", "r1", "r1", "r5", "r3", "r1", "r3", "r1", "r1", 
        "r5", "r2", "r1", "r1", "r5", "r1", "r2", "r1", "r1", "r3", "r3", 
        "r1", "r2", "r1", "r2", "r2", "r2", "r1", "r1", "r2", "r2", "r3", 
        "r2", "r2", "r1", "r2", "r3", "r2", "r2", "r1", "r1", "r2", "r1", 
        "r2", "r2", "r1", "r2", "r1", "r1", "r1", "r3", "r1", "r5", "r1", 
        "r2", "r1", "r2", "r1", "r1", "r2", "r2", "r1", "r2", "r5", "r3", 
        "r5", "r2", "r5", "r2", "r2", "r3", "r2", "r1", "r1", "r1", "r2", 
        "r1", "r5", "r1", "r2", "r2", "r2", "r1", "r1", "r2", "r2", "r3", 
        "r1", "r2", "r1", "r1", "r1", "r3", "r1", "r1", "r1", "r1", "r1", 
        "r2", "r1", "r2", "r1", "r2", "r1", "r2", "r1", "r2", "r3", "r1", 
        "r1", "r1", "r2", "r1", "r3", "r1", "r3", "r2", "r1", "r2", "r2", 
        "r2", "r1", "r2", "r2", "r3", "r2", "r5", "r5", "r1", "r1", "r2", 
        "r5", "r1", "r1", "r2", "r2", "r2", "r5", "r2", "r3", "r3", "r5", 
        "r2", "r5", "r1", "r1", "r3", "r2", "r5", "r2", "r1", "r1", "r2", 
        "r3", "r2", "r1", "r1", "r1", "r2", "r1", "r1", "r2", "r2", "r2", 
        "r1", "r2", "r3", "r1", "r2", "r2", "r2", "r3", "r1", "r1", "r1", 
        "r5", "r2", "r1", "r2", "r3", "r2", "r2", "r1", "r2", "r2", "r1", 
        "r1", "r5", "r2", "r2", "r5", "r3", "r2", "r2", "r2", "r1", "r5", 
        "r1", "r1", "r1", "r1", "r2", "r1", "r1", "r1", "r5", "r1", "r2", 
        "r1", "r1", "r1", "r2", "r2", "r1", "r1", "r2", "r2", "r3", "r1", 
        "r1", "r2", "r3", "r2", "r2", "r2", "r1", "r2", "r1", "r5", "r1", 
        "r1", "r1", "r1", "r3", "r2", "r2", "r1", "r5", "r3", "r1", "r2", 
        "r2", "r2", "r2", "r1", "r1", "r1", "r1", "r2", "r3", "r2", "r1", 
        "r5", "r1", "r3", "r1", "r3", "r1", "r5", "r1", "r1", "r1", "r3", 
        "r1", "r1", "r5", "r5", "r2", "r2", "r2", "r2", "r1", "r1", "r1", 
        "r3", "r1", "r3", "r3", "r1", "r5", "r1", "r2", "r5", "r3", "r5", 
        "r1", "r5", "r3", "r5", "r1", "r2", "r2", "r5", "r2", "r1", "r1", 
        "r1", "r1", "r2", "r2", "r1", "r2", "r2", "r2", "r2", "r2", "r2", 
        "r2", "r3", "r5", "r2", "r3", "r3", "r1", "r1", "r3", "r1", "r5", 
        "r1", "r2", "r2", "r2", "r2", "r5", "r3", "r3", "r1", "r1", "r2", 
        "r3", "r1", "r2", "r1", "r1", "r3", "r2", "r2", "r2", "r1", "r2", 
        "r1", "r1", "r1", "r5", "r1", "r5", "r2", "r2", "r1", "r3", "r1", 
        "r1", "r2", "r1", "r2", "r2", "r1", "r1", "r2", "r1", "r1", "r1", 
        "r1", "r1", "r5", "r1", "r3", "r1", "r1", "r2", "r1", "r2", "r2", 
        "r1", "r1", "r3", "r2", "r1", "r2", "r1", "r1", "r5", "r2", "r5", 
        "r2", "r1", "r1", "r5", "r1", "r1", "r1", "r5", "r2", "r2", "r1", 
        "r3", "r1", "r1", "r2", "r2", "r3", "r2", "r2", "r2", "r3", "r1", 
        "r2", "r1", "r2", "r1", "r1", "r1", "r1", "r3", "r3", "r5", "r1", 
        "r2", "r1", "r1", "r5", "r2", "r2", "r2", "r3", "r3", "r2", "r1", 
        "r2", "r2", "r3", "r3", "r2", "r1", "r2", "r1", "r5", "r2", "r1", 
        "r5", "r3", "r2", "r3", "r2", "r5", "r2", "r1", "r2", "r1", "r2", 
        "r5", "r5", "r3", "r5", "r3", "r3", "r1", "r2", "r2", "r5", "r2", 
        "r2", "r2", "r1", "r2", "r5", "r2", "r2", "r5", "r1", "r5", "r2", 
        "r1", "r2", "r2", "r2", "r2", "r1", "r2", "r1", "r1", "r2", "r2", 
        "r3", "r3", "r5", "r2", "r2", "r3", "r3", "r2", "r5", "r5", "r1", 
        "r2", "r1", "r2", "r5", "r1", "r1", "r2", "r1", "r2", "r3", "r2", 
        "r3", "r1", "r1", "r1", "r5", "r1", "r2", "r2", "r2", "r1", "r3", 
        "r2", "r1", "r2", "r1", "r1", "r1", "r3", "r2", "r1", "r2", "r2", 
        "r2", "r1", "r3", "r1", "r3", "r5", "r5", "r2", "r5", "r2", "r1", 
        "r2", "r2", "r2", "r1", "r2", "r5", "r1", "r5", "r1", "r5", "r1", 
        "r1", "r5", "r2", "r2", "r2", "r2", "r1", "r2", "r1", "r2", "r1", 
        "r1", "r1", "r3", "r2", "r1", "r5", "r2", "r1", "r1", "r3", "r1", 
        "r3", "r2", "r1", "r1", "r1", "r2", "r2", "r2", "r3", "r2", "r1", 
        "r1", "r2", "r1", "r2", "r5", "r1", "r1", "r1", "r3", "r3", "r1", 
        "r1", "r1", "r2", "r2", "r2", "r1", "r2", "r2", "r2", "r2", "r2", 
        "r1", "r1", "r1", "r1", "r1", "r2", "r1", "r3", "r1", "r2", "r2", 
        "r3", "r1", "r1", "r2", "r2", "r1", "r3", "r2", "r5", "r3", "r2", 
        "r1", "r1", "r3", "r1", "r2", "r2", "r2", "r2", "r1", "r5", "r2", 
        "r5", "r3", "r1", "r2", "r1", "r5", "r5", "r2", "r2", "r3", "r1", 
        "r1", "r5", "r1", "r1", "r2", "r5", "r1", "r2", "r2", "r2", "r2", 
        "r1", "r2", "r2", "r2", "r5", "r1", "r5", "r3", "r5", "r3", "r2", 
        "r2", "r1", "r1", "r3", "r1", "r3", "r2", "r1", "r2", "r3", "r5", 
        "r1", "r3", "r5", "r2", "r2", "r2", "r2", "r1", "r5", "r3", "r5", 
        "r2", "r2", "r1", "r2", "r3", "r1", "r5", "r1", "r5", "r1", "r1", 
        "r2", "r1", "r1", "r2", "r3", "r2", "r5", "r2", "r5", "r1", "r2", 
        "r2", "r3", "r3", "r2", "r2", "r3", "r3", "r3", "r1", "r2", "r1", 
        "r5", "r2", "r3", "r1", "r3", "r1", "r1", "r1", "r5", "r1", "r1", 
        "r3", "r1", "r1", "r3", "r2", "r2", "r2", "r1", "r1", "r2", "r1", 
        "r1", "r2", "r2", "r2", "r1", "r5", "r1", "r1", "r2", "r2", "r3", 
        "r2", "r1", "r2", "r2", "r2", "r2", "r3", "r1", "r1", "r2", "r1", 
        "r5", "r2", "r5", "r3", "r3", "r2", "r2", "r1", "r1", "r3", "r1", 
        "r1", "r2", "r1", "r1", "r1", "r1", "r1", "r1", "r2", "r2", "r3", 
        "r2", "r1", "r3", "r1", "r2", "r5", "r1", "r1", "r1", "r2", "r3", 
        "r2", "r1", "r1", "r2", "r2", "r2", "r1", "r2", "r1", "r5", "r1", 
        "r2", "r3", "r2", "r3", "r2", "r2", "r2", "r2", "r3", "r1", "r2", 
        "r1", "r1", "r2", "r3", "r2", "r5", "r2", "r2", "r1", "r1", "r2", 
        "r2", "r2", "r1", "r1", "r2", "r2", "r2", "r3", "r5", "r3", "r2", 
        "r2", "r1", "r3", "r2", "r2", "r1", "r1", "r2", "r1", "r3", "r2", 
        "r1", "r2", "r1", "r2", "r3", "r2", "r2", "r2", "r2", "r2", "r1", 
        "r1", "r2", "r1", "r3", "r1", "r1", "r1", "r5", "r2", "r1", "r1", 
        "r2", "r2", "r2", "r1", "r1", "r1", "r1", "r3", "r2", "r3", "r1", 
        "r2", "r1", "r1", "r2", "r1", "r3", "r2", "r1", "r1", "r5", "r3", 
        "r5", "r3", "r1", "r3", "r2", "r1", "r2", "r1", "r1", "r5", "r2", 
        "r1", "r5", "r1", "r2", "r3", "r3", "r1", "r2", "r1", "r1", "r1", 
        "r5", "r5", "r2", "r2", "r2", "r1", "r2", "r2", "r5", "r2", "r1", 
        "r1", "r1", "r1", "r5", "r2", "r3", "r3", "r1", "r5", "r2", "r5", 
        "r2", "r3", "r5", "r5", "r3", "r2", "r5", "r2", "r1", "r1", "r2", 
        "r5", "r1", "r2", "r1", "r2", "r2", "r1", "r2", "r1", "r2", "r2", 
        "r3", "r3", "r2", "r2", "r1", "r1", "r2", "r1", "r5", "r2", "r1", 
        "r2", "r3", "r1", "r2", "r5", "r3", "r2", "r3", "r5", "r2", "r3", 
        "r5", "r2", "r2", "r2", "r5", "r2", "r3", "r1", "r5", "r2", "r1", 
        "r2", "r1", "r2", "r2", "r1", "r1", "r2", "r2", "r1", "r3", "r2", 
        "r3", "r1", "r3", "r1", "r1", "r1", "r1", "r1", "r3", "r5", "r5", 
        "r1", "r2", "r1", "r1", "r3", "r2", "r1", "r2", "r2", "r1", "r3", 
        "r5", "r1", "r2", "r5", "r2", "r3", "r2", "r3", "r1", "r2", "r5", 
        "r2", "r1", "r3", "r1", "r1", "r5", "r1", "r1", "r1", "r2", "r2", 
        "r5", "r2", "r5", "r1", "r3", "r3", "r1", "r1", "r2", "r5", "r2", 
        "r5", "r2", "r5", "r1", "r1", "r1", "r1", "r5", "r2", "r2", "r1", 
        "r1", "r1", "r1", "r2", "r2", "r2", "r1", "r1", "r1", "r1", "r2", 
        "r2", "r1", "r3", "r2", "r1", "r3", "r1", "r3", "r2", "r1", "r1", 
        "r2", "r3", "r1", "r1", "r2", "r5", "r1", "r2", "r2", "r5", "r1", 
        "r1", "r2", "r2", "r2", "r2", "r1", "r2", "r2", "r1", "r1", "r2", 
        "r1", "r5", "r2", "r3", "r1", "r5", "r2", "r1", "r2", "r2", "r3", 
        "r5", "r5", "r2", "r1", "r1", "r2", "r5", "r2", "r2", "r2", "r2", 
        "r2", "r5", "r2", "r1", "r3", "r1", "r2", "r1", "r2", "r5", "r3", 
        "r1", "r2", "r2", "r2", "r5", "r3", "r1", "r3", "r2", "r2", "r2", 
        "r1", "r3", "r2", "r2", "r2", "r5", "r5", "r1", "r1", "r5", "r5", 
        "r3", "r2", "r1", "r1", "r5", "r1", "r3", "r2", "r1", "r2", "r2", 
        "r1", "r2", "r1", "r2", "r2", "r2", "r3", "r2", "r1", "r2", "r1", 
        "r1", "r2", "r1", "r3", "r1", "r2", "r3", "r1", "r3", "r1", "r5", 
        "r2", "r2", "r2", "r5", "r5", "r1", "r1", "r1", "r1", "r1", "r3", 
        "r3", "r1", "r1", "r1", "r5", "r5", "r2", "r1", "r3", "r1", "r5", 
        "r1", "r5", "r2", "r3", "r3", "r2", "r2", "r1", "r5", "r1", "r2", 
        "r1", "r5", "r1", "r2", "r2", "r1", "r5", "r1", "r2", "r1", "r5", 
        "r2", "r1", "r1", "r1", "r1", "r1", "r2", "r2", "r2", "r1", "r1", 
        "r5", "r5", "r3", "r1", "r3", "r2", "r2", "r2", "r1", "r5", "r1", 
        "r1", "r2", "r1", "r1", "r2", "r1", "r5", "r5", "r3", "r2", "r3", 
        "r2", "r2", "r5", "r3", "r1", "r1", "r5", "r3", "r3", "r3", "r2", 
        "r3", "r1", "r1", "r1", "r1", "r2", "r2", "r2", "r2", "r2", "r5", 
        "r1", "r1", "r2", "r2", "r1", "r1", "r3", "r2", "r1", "r3", "r2", 
        "r5", "r5", "r5", "r2", "r5", "r3", "r2", "r2", "r1", "r2", "r5", 
        "r1", "r3", "r1", "r1", "r1", "r5", "r1", "r2", "r2", "r5", "r1", 
        "r5", "r2", "r5", "r2", "r3", "r1", "r5", "r5", "r3", "r1", "r2", 
        "r1", "r2", "r2", "r3", "r1", "r1", "r3", "r1", "r3", "r1", "r5", 
        "r1", "r2", "r2", "r5", "r3", "r2", "r2", "r3", "r2", "r5", "r3", 
        "r1", "r5", "r2", "r1", "r2", "r2", "r1", "r1", "r5", "r1", "r1", 
        "r2", "r1", "r1", "r2", "r5", "r1", "r3", "r3", "r2", "r2", "r1", 
        "r5", "r1", "r2", "r3", "r2", "r2", "r1", "r1", "r1", "r1", "r2", 
        "r5", "r2", "r2", "r2", "r2", "r5", "r2", "r2", "r1", "r5", "r1", 
        "r2", "r1", "r3", "r1", "r2", "r2", "r2", "r5", "r3", "r2", "r1", 
        "r1", "r1", "r3", "r2", "r1", "r3", "r3", "r3", "r1", "r2", "r2", 
        "r3", "r3", "r1", "r1", "r1", "r3", "r1", "r1", "r1", "r5", "r1", 
        "r2", "r1", "r2", "r3", "r2", "r1", "r1", "r3", "r2", "r2", "r3", 
        "r1", "r1", "r2", "r1", "r3", "r1", "r1", "r2", "r2", "r5", "r3", 
        "r2", "r1", "r2", "r1", "r2", "r3", "r3", "r3", "r2", "r2", "r1", 
        "r3", "r5", "r1", "r5", "r1", "r2", "r2", "r5", "r1", "r2", "r1", 
        "r2", "r2", "r5", "r1", "r1", "r2", "r2", "r2", "r5", "r1", "r1", 
        "r2", "r3", "r2", "r1", "r5", "r1", "r1", "r2", "r1", "r5", "r3", 
        "r1", "r5", "r5", "r2", "r1", "r5", "r2", "r5", "r3", "r2", "r1", 
        "r2", "r2", "r2", "r2", "r3", "r5", "r2", "r2", "r1", "r1", "r3", 
        "r2", "r2", "r1", "r3", "r3", "r1", "r5", "r3", "r5", "r2", "r3", 
        "r1", "r3", "r2", "r2", "r2", "r5", "r1", "r5", "r2", "r1", "r1", 
        "r3", "r1", "r2", "r1", "r1", "r1", "r2", "r1", "r2", "r1", "r3", 
        "r3", "r1", "r5", "r2", "r2", "r1", "r2", "r3", "r5", "r2", "r1", 
        "r2", "r1", "r1", "r5", "r2", "r1", "r3", "r2", "r1", "r2", "r1", 
        "r5", "r1", "r3", "r1", "r1", "r5", "r2", "r1", "r2", "r3", "r1", 
        "r5", "r3", "r5", "r2", "r2", "r2", "r3", "r2", "r1", "r1", "r2", 
        "r2", "r2", "r2", "r3", "r1", "r1", "r1", "r1", "r2", "r2", "r2", 
        "r5", "r1", "r2", "r2", "r5", "r2", "r2", "r5", "r1", "r1", "r3", 
        "r2", "r2", "r1", "r1", "r3", "r2", "r2", "r2", "r3", "r1", "r1", 
        "r5", "r5", "r2", "r2", "r2", "r5", "r3", "r2", "r1", "r2", "r2", 
        "r2", "r2", "r1", "r3", "r3", "r1", "r3", "r1", "r1", "r3", "r1", 
        "r1", "r2", "r3", "r1", "r2", "r5", "r5", "r2", "r2", "r1", "r1", 
        "r2", "r1", "r1", "r2", "r1", "r1", "r2", "r2", "r3", "r2", "r2", 
        "r2", "r1", "r1", "r1", "r5", "r2", "r1", "r1", "r2", "r2", "r2", 
        "r1", "r5", "r1", "r2", "r1", "r1", "r1", "r1", "r2", "r1", "r1", 
        "r2", "r2", "r2", "r2", "r2", "r5", "r5", "r2", "r1", "r5", "r1", 
        "r5", "r1", "r1", "r2", "r1", "r2", "r5", "r1", "r2", "r1", "r2", 
        "r1", "r2", "r2", "r2", "r1", "r2", "r2", "r1", "r5", "r2", "r1", 
        "r2", "r2", "r2", "r1", "r2", "r1", "r2", "r2", "r2", "r5", "r2", 
        "r2", "r1", "r1", "r1", "r5", "r2", "r5", "r1", "r1", "r1", "r1", 
        "r3", "r3", "r3", "r2", "r3", "r2", "r1", "r1", "r1", "r1", "r3", 
        "r1", "r1", "r1", "r2", "r2", "r3", "r1", "r1", "r2", "r2", "r5", 
        "r3", "r2", "r2", "r1", "r2", "r1", "r3", "r2", "r5", "r1", "r2", 
        "r1", "r1", "r5", "r2", "r2", "r2", "r2", "r3", "r1", "r5", "r2", 
        "r2", "r2", "r1", "r2", "r3", "r2", "r1", "r1", "r1", "r3", "r2", 
        "r2", "r1", "r5", "r5", "r5", "r5", "r2", "r3", "r1", "r2", "r1", 
        "r3", "r2", "r2", "r1", "r2", "r3", "r2", "r2", "r1", "r3", "r2", 
        "r2", "r5", "r1", "r3", "r5", "r3", "r5", "r3", "r1", "r1", "r1", 
        "r1", "r1", "r1", "r5", "r1", "r5", "r1", "r2", "r5", "r2", "r2", 
        "r1", "r2", "r2", "r2", "r5", "r1", "r3", "r5", "r2", "r1", "r2", 
        "r1", "r1", "r1", "r2", "r1", "r1", "r2", "r1", "r2", "r2", "r1", 
        "r2", "r2", "r2", "r2", "r2", "r5", "r1", "r3", "r1", "r5", "r2", 
        "r3", "r1", "r2", "r2", "r2", "r1", "r1", "r2", "r2", "r1", "r1", 
        "r2", "r2", "r1", "r2", "r2", "r5", "r2", "r3", "r1", "r5", "r1", 
        "r1", "r2", "r2", "r1", "r2", "r1", "r2", "r1", "r5", "r2", "r1", 
        "r2", "r1", "r3", "r1", "r3", "r3", "r5", "r1", "r1", "r5", "r1", 
        "r1", "r1", "r3", "r2", "r2", "r1", "r2", "r1", "r3", "r1", "r1", 
        "r2", "r2", "r5", "r1", "r1", "r3", "r2", "r1", "r2", "r1", "r1", 
        "r1", "r2", "r2", "r3", "r1", "r3", "r2", "r1", "r1", "r1", "r2", 
        "r1", "r2", "r1", "r1", "r1", "r2", "r2", "r1", "r1", "r1", "r2", 
        "r2", "r1", "r2", "r5", "r2", "r1", "r1", "r2", "r2", "r1", "r1", 
        "r2", "r2", "r1", "r2", "r2", "r2", "r1", "r2", "r1", "r2", "r3", 
        "r1", "r3", "r2", "r5", "r3", "r1", "r2", "r1", "r1", "r2", "r5", 
        "r5", "r2", "r3", "r1", "r5", "r5", "r2", "r5", "r5", "r2", "r1", 
        "r1", "r2", "r1", "r5", "r2", "r5", "r1", "r2", "r3", "r2", "r2", 
        "r2", "r2", "r2", "r3", "r5", "r1", "r2", "r2", "r1", "r5", "r2", 
        "r2", "r3", "r1", "r5", "r2", "r1", "r2", "r1", "r3", "r2", "r2", 
        "r2", "r1", "r2", "r3", "r5", "r1", "r2", "r5", "r5", "r2", "r3", 
        "r2", "r2", "r1", "r3", "r5", "r1", "r1", "r1", "r1", "r2", "r2", 
        "r3", "r1", "r1", "r3", "r2", "r3", "r2", "r2", "r1", "r2", "r1", 
        "r3", "r1", "r3", "r5", "r3", "r1", "r1", "r1", "r1", "r2", "r3", 
        "r2", "r5", "r1", "r1", "r2", "r1", "r5", "r2", "r3", "r2", "r5", 
        "r2", "r2", "r1", "r2", "r2", "r1", "r1", "r1", "r1", "r1", "r3", 
        "r2", "r3", "r3", "r2", "r2", "r1", "r3", "r1", "r2", "r2", "r5", 
        "r5", "r1", "r1", "r3", "r1", "r2", "r1", "r2", "r2", "r1", "r1", 
        "r1", "r2", "r5", "r1", "r1", "r1", "r5", "r1", "r5", "r2", "r2", 
        "r2", "r1", "r2", "r1", "r5", "r2", "r1", "r2", "r2", "r2", "r1", 
        "r2", "r2", "r3", "r3", "r1", "r2", "r2", "r3", "r2", "r2", "r1", 
        "r1", "r3", "r2", "r3", "r2", "r1", "r5", "r2", "r3", "r2", "r2", 
        "r2", "r1", "r2", "r1", "r1", "r5", "r5", "r1", "r5", "r1", "r2", 
        "r2", "r5", "r2", "r2", "r5", "r2", "r5", "r2", "r2", "r3", "r1", 
        "r5", "r2", "r1", "r2", "r2", "r1", "r2", "r1", "r3", "r2", "r5", 
        "r2", "r2", "r1", "r1", "r5", "r2", "r1", "r1", "r2", "r1", "r2", 
        "r1", "r2", "r2", "r1", "r3", "r3", "r1", "r2", "r2", "r1", "r2", 
        "r3", "r2", "r2", "r1", "r1", "r3", "r2", "r2", "r1", "r2", "r1", 
        "r1", "r1", "r2", "r3", "r1", "r2", "r1", "r1", "r1", "r2", "r1", 
        "r5", "r1", "r2", "r5", "r5", "r2", "r1", "r1", "r1", "r1", "r1", 
        "r1", "r2", "r2", "r2", "r2", "r2", "r3", "r1", "r2", "r1", "r2", 
        "r2", "r2", "r1", "r1", "r3", "r3", "r3", "r2", "r2", "r2", "r1", 
        "r1", "r2", "r3", "r1", "r1", "r1", "r2", "r3", "r2", "r2", "r2", 
        "r5", "r2", "r2", "r2", "r1", "r2", "r5", "r2", "r1", "r5", "r3", 
        "r1", "r5", "r1", "r2", "r2", "r2", "r1", "r1", "r1", "r2", "r5", 
        "r1", "r2", "r2", "r5", "r1", "r2", "r2", "r2", "r1", "r2", "r2", 
        "r2", "r2", "r3", "r2", "r2", "r2", "r1", "r1", "r2", "r1", "r1", 
        "r3", "r1", "r3", "r5", "r1"}], 
    "Predictions" -> {
     "r1", "r3", "r5", "r1", "r5", "r2", "r1", "r2", "r1", "r3", "r2", "r3", 
      "r1", "r5", "r2", "r2", "r3", "r2", "r1", "r1", "r3", "r2", "r1", "r2", 
      "r2", "r2", "r5", "r1", "r2", "r3", "r5", "r2", "r1", "r1", "r2", "r5", 
      "r1", "r2", "r1", "r1", "r5", "r2", "r5", "r2", "r5", "r3", "r2", "r1", 
      "r2", "r2", "r1", "r1", "r2", "r1", "r1", "r5", "r2", "r2", "r2", "r1", 
      "r5", "r1", "r1", "r1", "r2", "r5", "r2", "r1", "r1", "r1", "r2", "r1", 
      "r3", "r2", "r1", "r3", "r2", "r5", "r5", "r1", "r3", "r5", "r1", "r3", 
      "r2", "r2", "r1", "r3", "r2", "r2", "r2", "r2", "r3", "r2", "r1", "r3", 
      "r2", "r1", "r2", "r5", "r1", "r1", "r1", "r2", "r1", "r1", "r2", "r2", 
      "r3", "r2", "r5", "r5", "r1", "r3", "r2", "r2", "r3", "r1", "r2", "r2", 
      "r2", "r1", "r1", "r1", "r1", "r1", "r1", "r1", "r3", "r2", "r2", "r2", 
      "r1", "r2", "r2", "r1", "r1", "r5", "r2", "r1", "r1", "r2", "r2", "r2", 
      "r2", "r2", "r5", "r2", "r2", "r1", "r1", "r3", "r3", "r2", "r1", "r2", 
      "r2", "r2", "r2", "r1", "r3", "r1", "r1", "r1", "r2", "r5", "r1", "r3", 
      "r2", "r2", "r1", "r2", "r1", "r5", "r5", "r1", "r1", "r2", "r1", "r1", 
      "r2", "r2", "r1", "r2", "r5", "r2", "r3", "r2", "r3", "r1", "r1", "r2", 
      "r3", "r1", "r1", "r2", "r5", "r2", "r2", "r1", "r5", "r1", "r3", "r2", 
      "r2", "r2", "r3", "r2", "r1", "r2", "r1", "r3", "r2", "r5", "r1", "r1", 
      "r2", "r3", "r1", "r2", "r5", "r3", "r2", "r2", "r1", "r1", "r2", "r2", 
      "r5", "r1", "r5", "r1", "r1", "r1", "r1", "r2", "r1", "r2", "r1", "r2", 
      "r2", "r2", "r1", "r2", "r2", "r1", "r2", "r2", "r1", "r1", "r3", "r2", 
      "r1", "r3", "r1", "r1", "r3", "r3", "r1", "r5", "r3", "r1", "r2", "r2", 
      "r5", "r2", "r3", "r2", "r1", "r1", "r5", "r5", "r2", "r2", "r3", "r2", 
      "r1", "r1", "r5", "r2", "r1", "r3", "r3", "r1", "r1", "r1", "r2", "r3", 
      "r1", "r2", "r2", "r1", "r1", "r1", "r1", "r1", "r5", "r2", "r2", "r5", 
      "r1", "r2", "r2", "r1", "r1", "r3", "r1", "r1", "r2", "r1", "r1", "r2", 
      "r2", "r3", "r3", "r2", "r1", "r5", "r2", "r3", "r3", "r2", "r3", "r1", 
      "r2", "r3", "r1", "r1", "r3", "r1", "r3", "r1", "r1", "r1", "r1", "r1", 
      "r2", "r3", "r5", "r2", "r1", "r2", "r2", "r1", "r2", "r1", "r1", "r5", 
      "r1", "r3", "r5", "r1", "r5", "r5", "r5", "r1", "r2", "r1", "r2", "r2", 
      "r2", "r5", "r2", "r3", "r1", "r1", "r2", "r2", "r2", "r2", "r2", "r2", 
      "r2", "r2", "r1", "r1", "r1", "r3", "r1", "r5", "r1", "r2", "r1", "r5", 
      "r1", "r2", "r1", "r1", "r2", "r1", "r1", "r2", "r2", "r2", "r1", "r2", 
      "r1", "r1", "r5", "r3", "r1", "r5", "r2", "r1", "r1", "r1", "r5", "r5", 
      "r1", "r2", "r2", "r2", "r2", "r3", "r2", "r5", "r1", "r2", "r2", "r2", 
      "r1", "r1", "r2", "r2", "r1", "r5", "r2", "r2", "r3", "r2", "r5", "r1", 
      "r1", "r1", "r2", "r3", "r3", "r2", "r2", "r1", "r5", "r2", "r2", "r1", 
      "r5", "r2", "r2", "r2", "r1", "r2", "r5", "r1", "r2", "r1", "r1", "r5", 
      "r2", "r5", "r3", "r2", "r3", "r2", "r1", "r2", "r2", "r3", "r1", "r3", 
      "r2", "r2", "r1", "r2", "r5", "r1", "r3", "r1", "r1", "r2", "r5", "r2", 
      "r1", "r2", "r3", "r2", "r1", "r5", "r1", "r5", "r2", "r2", "r5", "r1", 
      "r2", "r2", "r1", "r2", "r1", "r3", "r3", "r5", "r1", "r1", "r1", "r3", 
      "r2", "r5", "r2", "r1", "r5", "r2", "r2", "r1", "r1", "r3", "r1", "r1", 
      "r5", "r1", "r2", "r2", "r3", "r2", "r3", "r5", "r1", "r1", "r3", "r1", 
      "r2", "r5", "r5", "r2", "r1", "r3", "r3", "r2", "r2", "r1", "r1", "r2", 
      "r3", "r5", "r2", "r1", "r2", "r5", "r5", "r1", "r2", "r2", "r5", "r1", 
      "r1", "r5", "r1", "r3", "r1", "r3", "r3", "r1", "r2", "r2", "r5", "r1", 
      "r1", "r5", "r2", "r1", "r2", "r1", "r2", "r5", "r3", "r1", "r3", "r2", 
      "r1", "r2", "r5", "r1", "r2", "r3", "r2", "r5", "r3", "r5", "r3", "r1", 
      "r1", "r2", "r2", "r3", "r5", "r2", "r1", "r1", "r1", "r3", "r1", "r1", 
      "r3", "r2", "r1", "r1", "r5", "r2", "r1", "r2", "r3", "r2", "r5", "r2", 
      "r2", "r1", "r1", "r1", "r2", "r5", "r3", "r2", "r1", "r2", "r5", "r2", 
      "r2", "r3", "r1", "r3", "r1", "r2", "r2", "r1", "r2", "r5", "r2", "r1", 
      "r1", "r1", "r2", "r1", "r1", "r2", "r2", "r2", "r3", "r2", "r2", "r1", 
      "r1", "r2", "r1", "r1", "r2", "r2", "r1", "r3", "r5", "r1", "r1", "r5", 
      "r1", "r2", "r1", "r5", "r5", "r5", "r2", "r3", "r2", "r1", "r1", "r2", 
      "r2", "r3", "r1", "r1", "r2", "r2", "r3", "r2", "r1", "r5", "r2", "r2", 
      "r1", "r1", "r1", "r3", "r1", "r1", "r1", "r1", "r2", "r3", "r2", "r1", 
      "r5", "r5", "r2", "r5", "r1", "r2", "r2", "r1", "r2", "r2", "r5", "r2", 
      "r3", "r1", "r1", "r5", "r1", "r1", "r1", "r1", "r1", "r1", "r1", "r1", 
      "r1", "r1", "r1", "r5", "r3", "r1", "r3", "r2", "r5", "r5", "r3", "r3", 
      "r5", "r1", "r2", "r2", "r3", "r1", "r1", "r1", "r2", "r1", "r1", "r1", 
      "r3", "r3", "r5", "r1", "r5", "r1", "r2", "r2", "r1", "r2", "r1", "r2", 
      "r3", "r2", "r1", "r2", "r1", "r1", "r5", "r5", "r2", "r1", "r3", "r5", 
      "r2", "r3", "r1", "r1", "r1", "r2", "r1", "r2", "r5", "r1", "r1", "r2", 
      "r1", "r2", "r2", "r5", "r5", "r1", "r1", "r1", "r3", "r1", "r2", "r1", 
      "r1", "r2", "r3", "r2", "r2", "r1", "r1", "r5", "r2", "r5", "r1", "r3", 
      "r1", "r2", "r2", "r5", "r2", "r2", "r1", "r5", "r1", "r2", "r2", "r2", 
      "r1", "r3", "r5", "r3", "r2", "r2", "r1", "r1", "r2", "r2", "r2", "r1", 
      "r1", "r3", "r3", "r2", "r3", "r2", "r1", "r1", "r1", "r2", "r2", "r2", 
      "r1", "r5", "r2", "r1", "r2", "r2", "r2", "r1", "r1", "r1", "r2", "r1", 
      "r1", "r2", "r1", "r5", "r2", "r2", "r1", "r3", "r1", "r2", "r1", "r5", 
      "r1", "r3", "r1", "r3", "r1", "r2", "r1", "r1", "r3", "r2", "r2", "r3", 
      "r3", "r5", "r3", "r2", "r2", "r2", "r1", "r2", "r5", "r1", "r5", "r1", 
      "r2", "r1", "r3", "r2", "r2", "r3", "r5", "r2", "r3", "r1", "r5", "r1", 
      "r1", "r3", "r1", "r3", "r1", "r2", "r2", "r3", "r2", "r1", "r5", "r2", 
      "r2", "r1", "r3", "r5", "r1", "r5", "r2", "r5", "r3", "r1", "r5", "r2", 
      "r1", "r3", "r1", "r1", "r2", "r2", "r2", "r2", "r2", "r1", "r2", "r5", 
      "r2", "r5", "r2", "r1", "r1", "r1", "r2", "r1", "r1", "r1", "r2", "r2", 
      "r3", "r2", "r2", "r1", "r3", "r2", "r2", "r2", "r1", "r3", "r2", "r1", 
      "r1", "r3", "r2", "r1", "r2", "r2", "r2", "r2", "r1", "r3", "r1", "r1", 
      "r2", "r2", "r2", "r1", "r2", "r2", "r1", "r2", "r3", "r1", "r3", "r3", 
      "r2", "r2", "r5", "r2", "r1", "r2", "r1", "r3", "r2", "r5", "r1", "r1", 
      "r2", "r3", "r1", "r2", "r3", "r5", "r1", "r2", "r3", "r2", "r1", "r1", 
      "r5", "r1", "r3", "r3", "r2", "r1", "r2", "r3", "r1", "r1", "r3", "r1", 
      "r2", "r2", "r2", "r3", "r3", "r1", "r3", "r1", "r1", "r2", "r2", "r1", 
      "r3", "r5", "r1", "r5", "r1", "r1", "r1", "r2", "r2", "r1", "r1", "r1", 
      "r3", "r1", "r1", "r2", "r1", "r2", "r2", "r3", "r1", "r2", "r1", "r2", 
      "r5", "r1", "r1", "r2", "r2", "r1", "r2", "r1", "r1", "r1", "r2", "r1", 
      "r1", "r2", "r1", "r2", "r3", "r2", "r2", "r3", "r1", "r1", "r5", "r1", 
      "r5", "r3", "r3", "r1", "r1", "r3", "r2", "r2", "r2", "r1", "r3", "r1", 
      "r2", "r1", "r2", "r3", "r2", "r2", "r1", "r5", "r5", "r2", "r5", "r1", 
      "r2", "r1", "r5", "r1", "r2", "r5", "r2", "r2", "r3", "r5", "r1", "r1", 
      "r5", "r2", "r3", "r2", "r2", "r3", "r2", "r5", "r1", "r3", "r3", "r5", 
      "r1", "r2", "r3", "r2", "r2", "r5", "r1", "r2", "r2", "r1", "r1", "r5", 
      "r1", "r1", "r5", "r2", "r2", "r3", "r1", "r2", "r2", "r5", "r1", "r3", 
      "r5", "r2", "r5", "r2", "r2", "r2", "r2", "r2", "r3", "r2", "r3", "r3", 
      "r2", "r2", "r2", "r1", "r2", "r1", "r5", "r5", "r2", "r5", "r2", "r1", 
      "r2", "r2", "r1", "r2", "r1", "r2", "r1", "r2", "r1", "r2", "r2", "r5", 
      "r2", "r3", "r2", "r1", "r3", "r1", "r3", "r5", "r1", "r1", "r3", "r5", 
      "r2", "r1", "r3", "r5", "r1", "r2", "r1", "r2", "r5", "r2", "r1", "r3", 
      "r1", "r1", "r5", "r2", "r5", "r1", "r2", "r5", "r3", "r2", "r5", "r2", 
      "r1", "r5", "r2", "r1", "r1", "r1", "r1", "r2", "r2", "r2", "r2", "r3", 
      "r5", "r3", "r5", "r1", "r2", "r1", "r3", "r1", "r1", "r1", "r2", "r2", 
      "r2", "r5", "r3", "r1", "r1", "r1", "r5", "r1", "r5", "r2", "r2", "r2", 
      "r1", "r1", "r1", "r2", "r2", "r3", "r3", "r2", "r1", "r2", "r5", "r1", 
      "r2", "r1", "r1", "r1", "r2", "r2", "r1", "r1", "r3", "r1", "r2", "r1", 
      "r3", "r1", "r2", "r2", "r1", "r2", "r3", "r1", "r1", "r5", "r3", "r1", 
      "r3", "r1", "r1", "r5", "r2", "r1", "r3", "r5", "r1", "r2", "r1", "r1", 
      "r3", "r3", "r1", "r2", "r1", "r2", "r2", "r2", "r1", "r1", "r2", "r2", 
      "r3", "r2", "r2", "r1", "r2", "r3", "r2", "r2", "r1", "r1", "r2", "r1", 
      "r2", "r2", "r1", "r2", "r1", "r1", "r1", "r3", "r1", "r5", "r1", "r2", 
      "r1", "r2", "r1", "r1", "r2", "r2", "r1", "r2", "r5", "r3", "r5", "r2", 
      "r5", "r2", "r2", "r3", "r2", "r1", "r1", "r1", "r2", "r1", "r5", "r1", 
      "r2", "r2", "r2", "r1", "r1", "r2", "r2", "r3", "r1", "r2", "r1", "r1", 
      "r1", "r3", "r1", "r1", "r1", "r1", "r1", "r2", "r1", "r2", "r1", "r2", 
      "r1", "r2", "r1", "r2", "r3", "r1", "r1", "r1", "r2", "r1", "r3", "r1", 
      "r3", "r2", "r1", "r2", "r2", "r2", "r1", "r2", "r2", "r3", "r2", "r5", 
      "r5", "r1", "r1", "r2", "r5", "r1", "r1", "r2", "r2", "r2", "r5", "r2", 
      "r3", "r3", "r5", "r2", "r5", "r1", "r1", "r3", "r2", "r5", "r2", "r1", 
      "r1", "r2", "r3", "r2", "r1", "r1", "r1", "r2", "r1", "r1", "r2", "r2", 
      "r2", "r1", "r2", "r3", "r1", "r2", "r2", "r2", "r3", "r1", "r1", "r1", 
      "r5", "r2", "r1", "r2", "r3", "r2", "r2", "r1", "r2", "r2", "r1", "r1", 
      "r5", "r2", "r2", "r5", "r3", "r2", "r2", "r2", "r1", "r5", "r1", "r1", 
      "r1", "r1", "r2", "r1", "r1", "r1", "r5", "r1", "r2", "r1", "r1", "r1", 
      "r2", "r2", "r1", "r1", "r2", "r2", "r3", "r1", "r1", "r2", "r3", "r2", 
      "r2", "r2", "r1", "r2", "r3", "r5", "r1", "r1", "r1", "r3", "r3", "r2", 
      "r2", "r1", "r5", "r3", "r1", "r2", "r2", "r2", "r2", "r1", "r1", "r1", 
      "r1", "r2", "r3", "r2", "r1", "r5", "r1", "r3", "r1", "r3", "r1", "r5", 
      "r1", "r1", "r1", "r3", "r1", "r1", "r5", "r5", "r2", "r2", "r2", "r2", 
      "r1", "r1", "r1", "r2", "r1", "r3", "r3", "r1", "r5", "r1", "r2", "r5", 
      "r3", "r5", "r1", "r5", "r3", "r5", "r1", "r2", "r2", "r5", "r2", "r1", 
      "r1", "r1", "r1", "r2", "r2", "r1", "r2", "r2", "r2", "r2", "r2", "r2", 
      "r2", "r3", "r5", "r2", "r3", "r3", "r1", "r1", "r3", "r1", "r5", "r1", 
      "r2", "r2", "r2", "r2", "r5", "r3", "r3", "r1", "r3", "r2", "r3", "r1", 
      "r2", "r1", "r1", "r3", "r2", "r2", "r2", "r1", "r2", "r1", "r1", "r1", 
      "r5", "r1", "r5", "r2", "r2", "r1", "r3", "r1", "r1", "r5", "r1", "r2", 
      "r2", "r1", "r1", "r2", "r1", "r1", "r1", "r1", "r1", "r5", "r1", "r3", 
      "r1", "r1", "r2", "r1", "r2", "r2", "r1", "r1", "r3", "r2", "r1", "r2", 
      "r1", "r1", "r5", "r2", "r5", "r2", "r1", "r1", "r5", "r1", "r1", "r1", 
      "r5", "r2", "r2", "r1", "r3", "r1", "r1", "r2", "r2", "r3", "r2", "r2", 
      "r2", "r3", "r1", "r2", "r1", "r2", "r1", "r1", "r1", "r1", "r3", "r3", 
      "r5", "r1", "r2", "r1", "r1", "r5", "r2", "r2", "r2", "r3", "r3", "r2", 
      "r1", "r2", "r2", "r3", "r3", "r2", "r1", "r2", "r3", "r5", "r1", "r1", 
      "r5", "r2", "r2", "r3", "r2", "r5", "r2", "r1", "r2", "r1", "r2", "r5", 
      "r5", "r3", "r5", "r3", "r3", "r1", "r2", "r2", "r5", "r2", "r2", "r2", 
      "r1", "r2", "r5", "r2", "r2", "r5", "r1", "r5", "r2", "r1", "r2", "r2", 
      "r2", "r2", "r1", "r2", "r1", "r1", "r2", "r2", "r3", "r3", "r5", "r2", 
      "r2", "r3", "r3", "r2", "r5", "r5", "r1", "r2", "r1", "r2", "r5", "r1", 
      "r1", "r2", "r1", "r2", "r3", "r2", "r3", "r1", "r1", "r1", "r5", "r1", 
      "r2", "r2", "r2", "r1", "r3", "r2", "r1", "r2", "r1", "r1", "r1", "r3", 
      "r2", "r1", "r2", "r2", "r2", "r1", "r3", "r1", "r3", "r5", "r5", "r2", 
      "r5", "r5", "r1", "r2", "r2", "r2", "r1", "r2", "r5", "r1", "r5", "r1", 
      "r5", "r1", "r1", "r5", "r2", "r2", "r2", "r2", "r1", "r2", "r1", "r2", 
      "r1", "r1", "r3", "r3", "r2", "r1", "r5", "r2", "r1", "r1", "r3", "r1", 
      "r3", "r2", "r1", "r3", "r1", "r2", "r2", "r2", "r3", "r2", "r1", "r1", 
      "r2", "r1", "r2", "r5", "r1", "r1", "r1", "r3", "r3", "r1", "r1", "r1", 
      "r2", "r2", "r2", "r1", "r2", "r2", "r2", "r2", "r2", "r1", "r1", "r1", 
      "r1", "r1", "r2", "r1", "r3", "r1", "r2", "r2", "r3", "r1", "r1", "r2", 
      "r2", "r1", "r3", "r2", "r5", "r3", "r1", "r1", "r1", "r3", "r1", "r2", 
      "r2", "r2", "r2", "r1", "r5", "r2", "r5", "r3", "r1", "r2", "r1", "r5", 
      "r5", "r2", "r2", "r3", "r1", "r1", "r5", "r1", "r1", "r2", "r5", "r1", 
      "r2", "r2", "r5", "r2", "r1", "r2", "r2", "r2", "r5", "r1", "r5", "r3", 
      "r5", "r3", "r2", "r2", "r1", "r1", "r3", "r1", "r3", "r2", "r1", "r2", 
      "r3", "r5", "r1", "r3", "r5", "r2", "r2", "r2", "r2", "r1", "r5", "r3", 
      "r5", "r2", "r2", "r1", "r2", "r3", "r1", "r5", "r1", "r5", "r1", "r1", 
      "r2", "r1", "r1", "r2", "r3", "r2", "r5", "r2", "r5", "r1", "r2", "r2", 
      "r3", "r3", "r2", "r2", "r3", "r3", "r3", "r1", "r2", "r1", "r5", "r2", 
      "r3", "r1", "r3", "r1", "r1", "r1", "r5", "r1", "r1", "r3", "r1", "r1", 
      "r3", "r2", "r2", "r2", "r1", "r1", "r2", "r1", "r1", "r2", "r2", "r2", 
      "r1", "r5", "r1", "r1", "r2", "r2", "r3", "r2", "r1", "r2", "r2", "r2", 
      "r2", "r3", "r1", "r1", "r2", "r1", "r5", "r2", "r5", "r3", "r3", "r2", 
      "r2", "r1", "r1", "r3", "r1", "r1", "r2", "r1", "r1", "r1", "r1", "r1", 
      "r1", "r2", "r2", "r3", "r2", "r1", "r3", "r1", "r2", "r5", "r1", "r1", 
      "r1", "r2", "r3", "r2", "r1", "r1", "r2", "r2", "r2", "r1", "r2", "r1", 
      "r5", "r1", "r2", "r3", "r2", "r3", "r2", "r2", "r2", "r2", "r3", "r1", 
      "r2", "r1", "r1", "r2", "r3", "r2", "r5", "r2", "r2", "r1", "r1", "r2", 
      "r2", "r2", "r1", "r1", "r2", "r2", "r2", "r3", "r5", "r3", "r2", "r2", 
      "r1", "r3", "r2", "r2", "r1", "r1", "r2", "r1", "r3", "r2", "r1", "r2", 
      "r1", "r2", "r3", "r5", "r2", "r2", "r2", "r2", "r1", "r1", "r2", "r1", 
      "r3", "r1", "r1", "r1", "r5", "r2", "r1", "r1", "r2", "r2", "r2", "r1", 
      "r1", "r1", "r1", "r3", "r2", "r3", "r1", "r2", "r1", "r1", "r2", "r1", 
      "r3", "r2", "r1", "r1", "r5", "r3", "r5", "r3", "r1", "r3", "r2", "r1", 
      "r2", "r1", "r1", "r5", "r2", "r1", "r5", "r1", "r2", "r3", "r3", "r1", 
      "r2", "r1", "r1", "r1", "r5", "r5", "r2", "r2", "r2", "r1", "r2", "r2", 
      "r5", "r2", "r1", "r1", "r1", "r1", "r5", "r2", "r3", "r3", "r1", "r5", 
      "r2", "r5", "r2", "r3", "r5", "r5", "r3", "r2", "r5", "r2", "r1", "r1", 
      "r2", "r5", "r1", "r2", "r1", "r2", "r2", "r1", "r2", "r1", "r2", "r2", 
      "r3", "r3", "r2", "r2", "r1", "r1", "r2", "r1", "r5", "r2", "r1", "r2", 
      "r3", "r1", "r2", "r5", "r3", "r2", "r3", "r5", "r2", "r3", "r5", "r2", 
      "r2", "r2", "r5", "r2", "r3", "r1", "r5", "r2", "r1", "r2", "r1", "r2", 
      "r2", "r1", "r1", "r2", "r2", "r1", "r3", "r2", "r3", "r1", "r3", "r1", 
      "r1", "r1", "r1", "r1", "r3", "r5", "r5", "r1", "r2", "r1", "r1", "r3", 
      "r2", "r1", "r2", "r2", "r1", "r3", "r5", "r1", "r2", "r5", "r2", "r3", 
      "r2", "r3", "r1", "r2", "r5", "r2", "r1", "r3", "r1", "r1", "r5", "r1", 
      "r1", "r1", "r2", "r2", "r5", "r2", "r5", "r1", "r3", "r3", "r1", "r1", 
      "r2", "r5", "r2", "r5", "r2", "r5", "r1", "r1", "r1", "r1", "r5", "r2", 
      "r2", "r1", "r1", "r1", "r1", "r2", "r2", "r2", "r1", "r1", "r1", "r1", 
      "r2", "r2", "r1", "r3", "r2", "r1", "r3", "r1", "r3", "r2", "r1", "r1", 
      "r2", "r3", "r1", "r1", "r5", "r5", "r1", "r2", "r2", "r5", "r1", "r1", 
      "r2", "r2", "r2", "r2", "r1", "r5", "r2", "r1", "r1", "r2", "r1", "r5", 
      "r2", "r2", "r1", "r5", "r2", "r1", "r2", "r2", "r3", "r5", "r5", "r2", 
      "r1", "r1", "r2", "r5", "r2", "r5", "r2", "r2", "r2", "r5", "r2", "r1", 
      "r3", "r1", "r2", "r1", "r2", "r5", "r3", "r1", "r2", "r2", "r2", "r5", 
      "r3", "r1", "r3", "r2", "r2", "r2", "r1", "r3", "r2", "r2", "r2", "r5", 
      "r5", "r1", "r1", "r5", "r5", "r2", "r2", "r1", "r1", "r5", "r1", "r3", 
      "r2", "r1", "r2", "r2", "r1", "r2", "r1", "r2", "r2", "r2", "r3", "r2", 
      "r1", "r2", "r1", "r1", "r2", "r1", "r3", "r1", "r2", "r3", "r1", "r2", 
      "r1", "r5", "r2", "r2", "r2", "r5", "r5", "r1", "r1", "r1", "r1", "r3", 
      "r3", "r3", "r1", "r1", "r1", "r5", "r5", "r2", "r1", "r3", "r1", "r5", 
      "r1", "r5", "r2", "r3", "r3", "r2", "r2", "r1", "r5", "r1", "r2", "r1", 
      "r5", "r1", "r2", "r2", "r1", "r5", "r1", "r2", "r1", "r5", "r2", "r1", 
      "r1", "r1", "r1", "r1", "r2", "r2", "r2", "r1", "r1", "r5", "r5", "r3", 
      "r1", "r3", "r2", "r2", "r2", "r1", "r5", "r1", "r1", "r2", "r1", "r1", 
      "r2", "r1", "r5", "r5", "r3", "r2", "r3", "r2", "r2", "r5", "r3", "r1", 
      "r1", "r5", "r3", "r3", "r3", "r2", "r3", "r1", "r1", "r1", "r1", "r2", 
      "r2", "r2", "r2", "r2", "r5", "r1", "r1", "r2", "r2", "r1", "r1", "r2", 
      "r2", "r1", "r3", "r2", "r5", "r5", "r5", "r2", "r5", "r3", "r2", "r2", 
      "r1", "r2", "r5", "r1", "r2", "r1", "r1", "r1", "r5", "r1", "r2", "r2", 
      "r5", "r1", "r5", "r5", "r5", "r2", "r3", "r1", "r5", "r5", "r3", "r1", 
      "r2", "r1", "r2", "r2", "r3", "r1", "r1", "r3", "r1", "r3", "r1", "r5", 
      "r1", "r2", "r2", "r5", "r3", "r2", "r2", "r3", "r2", "r5", "r3", "r1", 
      "r5", "r2", "r1", "r2", "r2", "r1", "r1", "r5", "r1", "r1", "r2", "r1", 
      "r1", "r2", "r5", "r1", "r3", "r3", "r2", "r2", "r1", "r5", "r1", "r2", 
      "r3", "r2", "r2", "r1", "r1", "r1", "r1", "r2", "r5", "r2", "r2", "r2", 
      "r2", "r5", "r2", "r2", "r1", "r5", "r1", "r2", "r1", "r3", "r1", "r2", 
      "r2", "r2", "r5", "r3", "r2", "r1", "r1", "r1", "r3", "r2", "r1", "r3", 
      "r3", "r3", "r1", "r2", "r2", "r3", "r3", "r1", "r1", "r1", "r3", "r1", 
      "r1", "r1", "r5", "r1", "r2", "r1", "r2", "r3", "r2", "r1", "r1", "r3", 
      "r2", "r2", "r3", "r1", "r1", "r2", "r1", "r3", "r1", "r1", "r2", "r2", 
      "r5", "r3", "r2", "r1", "r2", "r1", "r2", "r3", "r3", "r3", "r2", "r2", 
      "r1", "r3", "r5", "r1", "r5", "r1", "r2", "r2", "r5", "r1", "r2", "r1", 
      "r2", "r2", "r5", "r1", "r1", "r2", "r2", "r2", "r5", "r1", "r1", "r2", 
      "r3", "r2", "r1", "r5", "r1", "r1", "r2", "r1", "r5", "r3", "r1", "r5", 
      "r5", "r2", "r1", "r5", "r2", "r5", "r3", "r2", "r1", "r2", "r2", "r2", 
      "r2", "r3", "r5", "r2", "r2", "r1", "r1", "r3", "r2", "r2", "r1", "r3", 
      "r3", "r1", "r5", "r3", "r5", "r2", "r3", "r1", "r3", "r2", "r2", "r2", 
      "r5", "r1", "r5", "r2", "r1", "r1", "r3", "r1", "r5", "r1", "r1", "r1", 
      "r2", "r1", "r2", "r1", "r3", "r3", "r1", "r5", "r2", "r2", "r1", "r2", 
      "r3", "r5", "r2", "r1", "r2", "r1", "r1", "r5", "r2", "r1", "r3", "r2", 
      "r1", "r2", "r1", "r5", "r1", "r3", "r1", "r1", "r5", "r2", "r1", "r2", 
      "r3", "r1", "r5", "r3", "r5", "r2", "r2", "r2", "r3", "r2", "r1", "r1", 
      "r1", "r2", "r2", "r2", "r3", "r1", "r1", "r1", "r1", "r2", "r2", "r2", 
      "r5", "r1", "r2", "r2", "r5", "r2", "r2", "r5", "r1", "r1", "r3", "r2", 
      "r2", "r1", "r1", "r3", "r2", "r2", "r2", "r3", "r1", "r1", "r5", "r5", 
      "r2", "r2", "r2", "r5", "r3", "r2", "r1", "r2", "r2", "r2", "r2", "r1", 
      "r3", "r3", "r1", "r3", "r1", "r1", "r3", "r1", "r1", "r2", "r3", "r1", 
      "r2", "r5", "r5", "r2", "r2", "r1", "r1", "r2", "r1", "r3", "r2", "r1", 
      "r1", "r2", "r2", "r3", "r2", "r2", "r2", "r1", "r1", "r1", "r5", "r2", 
      "r1", "r1", "r2", "r2", "r2", "r1", "r5", "r1", "r2", "r1", "r1", "r1", 
      "r1", "r2", "r1", "r1", "r2", "r2", "r2", "r2", "r2", "r5", "r5", "r2", 
      "r1", "r5", "r1", "r5", "r1", "r1", "r2", "r1", "r2", "r5", "r1", "r2", 
      "r1", "r2", "r1", "r2", "r2", "r2", "r1", "r2", "r2", "r1", "r5", "r2", 
      "r1", "r2", "r2", "r2", "r1", "r2", "r1", "r2", "r2", "r2", "r5", "r2", 
      "r2", "r1", "r1", "r1", "r5", "r2", "r5", "r1", "r1", "r1", "r1", "r3", 
      "r3", "r3", "r2", "r3", "r2", "r1", "r1", "r1", "r1", "r3", "r1", "r1", 
      "r1", "r2", "r2", "r3", "r1", "r1", "r2", "r2", "r5", "r3", "r2", "r2", 
      "r1", "r2", "r1", "r2", "r2", "r5", "r1", "r2", "r1", "r1", "r5", "r2", 
      "r2", "r2", "r2", "r3", "r1", "r5", "r2", "r2", "r2", "r1", "r2", "r3", 
      "r2", "r1", "r1", "r1", "r3", "r2", "r2", "r1", "r5", "r5", "r5", "r5", 
      "r2", "r3", "r1", "r2", "r1", "r3", "r2", "r2", "r1", "r2", "r3", "r2", 
      "r2", "r1", "r3", "r2", "r2", "r5", "r1", "r3", "r5", "r3", "r5", "r3", 
      "r1", "r1", "r1", "r1", "r1", "r1", "r5", "r1", "r5", "r1", "r2", "r5", 
      "r2", "r2", "r1", "r2", "r2", "r2", "r5", "r1", "r3", "r5", "r2", "r1", 
      "r2", "r1", "r1", "r1", "r2", "r1", "r1", "r2", "r1", "r2", "r2", "r1", 
      "r2", "r2", "r2", "r2", "r2", "r5", "r1", "r3", "r1", "r5", "r2", "r3", 
      "r1", "r2", "r2", "r2", "r1", "r1", "r2", "r2", "r1", "r1", "r2", "r2", 
      "r1", "r2", "r2", "r5", "r2", "r3", "r1", "r5", "r1", "r1", "r2", "r2", 
      "r1", "r2", "r1", "r2", "r1", "r5", "r2", "r1", "r2", "r1", "r3", "r1", 
      "r3", "r3", "r5", "r1", "r1", "r5", "r1", "r3", "r1", "r3", "r2", "r2", 
      "r1", "r2", "r1", "r3", "r1", "r1", "r2", "r2", "r5", "r1", "r1", "r3", 
      "r2", "r1", "r2", "r1", "r1", "r1", "r2", "r2", "r3", "r1", "r3", "r2", 
      "r1", "r1", "r1", "r2", "r1", "r2", "r1", "r1", "r1", "r2", "r2", "r1", 
      "r1", "r1", "r2", "r2", "r1", "r2", "r5", "r2", "r1", "r1", "r2", "r2", 
      "r1", "r1", "r2", "r2", "r1", "r2", "r2", "r2", "r1", "r2", "r1", "r5", 
      "r3", "r1", "r3", "r2", "r5", "r3", "r1", "r2", "r1", "r1", "r2", "r5", 
      "r5", "r2", "r3", "r1", "r5", "r5", "r2", "r5", "r5", "r2", "r1", "r1", 
      "r2", "r1", "r5", "r2", "r5", "r1", "r2", "r3", "r2", "r2", "r2", "r2", 
      "r2", "r3", "r5", "r1", "r2", "r2", "r1", "r5", "r2", "r2", "r3", "r1", 
      "r5", "r2", "r1", "r2", "r1", "r3", "r2", "r2", "r2", "r1", "r2", "r3", 
      "r5", "r1", "r2", "r5", "r5", "r2", "r3", "r2", "r2", "r1", "r3", "r5", 
      "r1", "r1", "r1", "r1", "r2", "r2", "r3", "r1", "r1", "r3", "r2", "r3", 
      "r2", "r2", "r1", "r2", "r1", "r3", "r1", "r2", "r5", "r3", "r1", "r1", 
      "r1", "r1", "r2", "r2", "r2", "r5", "r1", "r1", "r2", "r1", "r5", "r2", 
      "r3", "r2", "r5", "r2", "r2", "r1", "r2", "r2", "r1", "r1", "r2", "r1", 
      "r1", "r3", "r2", "r3", "r3", "r2", "r2", "r1", "r3", "r1", "r2", "r2", 
      "r5", "r5", "r1", "r1", "r3", "r1", "r2", "r1", "r2", "r2", "r1", "r1", 
      "r1", "r2", "r5", "r1", "r1", "r1", "r5", "r1", "r5", "r2", "r2", "r2", 
      "r1", "r2", "r1", "r5", "r2", "r1", "r2", "r2", "r2", "r1", "r2", "r2", 
      "r3", "r3", "r1", "r2", "r2", "r3", "r2", "r2", "r1", "r1", "r3", "r2", 
      "r3", "r2", "r1", "r5", "r2", "r3", "r2", "r2", "r2", "r1", "r2", "r1", 
      "r1", "r5", "r5", "r1", "r5", "r1", "r2", "r2", "r5", "r2", "r2", "r5", 
      "r2", "r5", "r2", "r2", "r3", "r1", "r5", "r2", "r1", "r2", "r2", "r1", 
      "r2", "r1", "r3", "r2", "r5", "r2", "r2", "r1", "r1", "r5", "r2", "r1", 
      "r1", "r2", "r1", "r2", "r1", "r2", "r2", "r1", "r3", "r3", "r1", "r2", 
      "r2", "r1", "r2", "r3", "r2", "r2", "r1", "r1", "r3", "r5", "r2", "r1", 
      "r2", "r1", "r1", "r1", "r2", "r3", "r1", "r2", "r1", "r1", "r1", "r2", 
      "r1", "r5", "r1", "r2", "r5", "r5", "r2", "r1", "r1", "r1", "r1", "r1", 
      "r1", "r2", "r2", "r2", "r2", "r2", "r3", "r1", "r2", "r1", "r2", "r2", 
      "r2", "r1", "r1", "r3", "r3", "r3", "r2", "r2", "r2", "r1", "r1", "r2", 
      "r3", "r3", "r1", "r1", "r5", "r3", "r2", "r2", "r2", "r5", "r2", "r2", 
      "r2", "r1", "r2", "r5", "r2", "r1", "r5", "r3", "r1", "r5", "r1", "r2", 
      "r2", "r2", "r1", "r1", "r1", "r2", "r5", "r1", "r2", "r2", "r5", "r1", 
      "r2", "r2", "r2", "r1", "r2", "r2", "r2", "r2", "r3", "r2", "r2", "r2", 
      "r1", "r1", "r2", "r1", "r1", "r3", "r1", "r3", "r5", "r1"}, 
    "LogProbabilities" -> CompressedData["
1:eJzdXXtwV8UZjQlUQwwESQJK5FXxBaICFjHSADHAKAai2GGsr9IBdRgsSBCB
AdSIPIogD62FKWVARJAgECKRkO4VBIoiD0VQBCSgEl6aDAqBArZTs7czPyZz
Mh7PfD/7187eO/fevbvffo/zPbZ5vz/d0z82JibmzroxMbX+07Z7ue2kx5q0
c62OpyekjGwRRLb1mvRe8Nv6TcP25LQtT3+xo4/z/QE9Rt9yw5pmF7TlZce/
e3dXN4fe/8K0gbeNanrxBe2wV76s3/t3G90dLeu2/qJ+atDjtilPp3w8Iez7
Fr1/bpcT0wftbR70G5JfPO9kR+f7vkXPH1xz7plWHS4L28IO17cqHTTX+f74
2F7Dizc2DgYfuXJeWeGjzvd9i+YPfR/NL/q/ST80XVDxYFpw68VXPJiXPdD1
LOqcdd2rl4fX0fjY+UP3s5dMyepfmBi2b/UZdHrr0ALn++z30fPoftMed3dM
XVw7aDxr1sZTUzc73/ctol92fPFd/3kke2CjsD3eqNeIPuNGOd9n6YNdP/R+
lj+ox8/On/r5H+mpYeDb3dsui22RmBdeR/wH/f+JF7L6ZrVtGCT2OXBz4srn
nO9HttXdZ+cf8Sfr9WX5Kzs+9v/V+1e9P9X8Ack/dn8h/s3OP0s/av2O1S/U
68t+H91n9cPJt50fkDm8YbC3U+sObuSzzvd9i/5/1IhWh3a2TA7bN64ecaJR
y5nO99X6lTV/Y/cvuo/Wh9XvrPkDGh+aXzT+yW3775n9SFLYZl+++fdXZi52
vs/qDz07jF11sE1csPahtLV//sMO5/u+VcuvdRVP/i19Q64Lbpo4YPCky4PI
Fj0/8dGkgdfvH+viz8+MT/9NatA9K/fxuLONwpYdH8sf1PwbrS96/+B7z161
ccEqdzLxnWfP3nJpENmy+tmUdkcv2p3TKOj50uiCyz55zvU+ljCv/uSUwF9X
6zfq+2j+1fo1O39IvrL0H593R9q+zHyX0GDt8MGH6wWRLUu/kH+K9QNr/R3R
F+Kv7Pqy9h1L3zXDB346/mSNv7D7Q01fLH46PGV2zNTXGwRZ0xcP2TBtjuu4
pXjuhv1J4XUWH2b/H32f1T/U+IJ6f7HyJXI/Ru5T9v+Qf4LlXyz+t21JycS8
nclhm/dsx/y6x19yvq+2H5F8QPobuz/Z/0Pri+Q/qx+g+8g/h+xDdn3V+IKa
/7H4Avt9Fr9Q2y/W+sP2ZW+N6rv1GddgXfMbGv69YRDZsvgi4k/I/8PSN8J3
1P5r9v1o/WObXX8m4c2zrqLjmfNd23ztfN+3rP6Bxj+suPftt1bWDU51nFP4
6rhlzvd9y64f0v9Z/EKNX6r9eyw+g9ZXrb8j/sDSpxrfRu/fP2V59vOLlrv5
m+Y/lZBbN4hs1fgnu//V+s30g0NHdT11cTCiyyt/Gfjhe873fftR0SfffVqZ
EHze7fYRGQOKnO/7Vo2fqf0navt3xVsvNGm0Jzl4fHyzzr0/ecn5vm+R/o34
nzo+oP2Lx091CeKD4deOyhzbt9Ata7xk1Ud31Qt8i+wvNP6er7pjvz5x2J3d
373dE3885F56Pq7oiwfrBL5V20dofNb0rd4f6vto//XtMTXpgEsO20Wrp95T
mD3N+b46PkRtP7DPI/nM8v9vBr33fbuTDcL2viFby2+98mXn+2r7We1fVq9f
dX5l36rxyQ+vKD8yM6lO2M74fPP8vf2c832Wvlj7N9qfV8dv1My+qt7+Vu9/
RL9qfAzpF+z8qv3nLH2y+LeaftH6Iv2PfT/Sn9X7k5VPyL5k9Y/xVXjMyaVz
0iambHMJcfkjj8y4KLzO2u9sfIZa/1LTv/r7aP763t926ZMtfnDbOg9+6OGy
0rDvWxR/hvRrtX+M9X/M3plw+vVbEoIv1xSXNstZG+bH+OvIfkb8icUnWfls
7X9W61/s/kL4M6KfaM//YP0XLH9n+Rfr/2PxDbT/kX7J0q8an0X/x8b/qu1T
dfwQ+32Wv7Dzg/RbtX5lnf+M1hfJb7V+guJvWXxevb+s9Q9rfNvaPkH0i/R3
Nj+blQ/o+2h/sPxNvT92Jk547HR2YtiOWV3yQf7olc732fgDdF8d/8XmX7Lz
i+SLNf6vtn9Z/QE9z+LH6Hm1/9Uaf6gZ/lIvyDvXNXlM62Vh37fW/ic0fmQ/
sPKZxa/rVOGV3f8bB/CZ833fqvf/pVVyyscbzDz6j9iiggJ3aQ3zq9D40P5i
7X81vsnmp6jlS7Trn2r8heVv6vwzln9Eu/2i5t9sfgsa3w8xOT88klsvuCw+
tvKzspUu78npGdvK4sPr7Pyr65dF1stqEVFHyzr+Rx0fbk2/6vez+BWLH6r5
M8t/Uf6I2n+D8p+t9Xd1fAhrv7L7X42PI3yH3b/q/CN2fIi+1f5/xN+s5YN1
fgrLX9X7R73/rfEx9H6E/6L1Qf45lj/uuPqaKyYl73O5b6ZnrJgXE0S2avnz
/37fOr8KrT/Sn5B/gN2fLH7E4i9ofn084bqKT8+03HrANTm8Z1hBUmUYZ4j+
H8WfqekP8RdWvrDyUb1+0S4f1M+r5bta/2L5B5v/qMZ31fo/zH8g50cdH229
f9TyTb2+LH1Z419sfXbr+FeEr7D0Ee3+aRTfo8af0PM+jv6eLnWal1Wudr7v
WxZ/YOMXWP3Y2j+E/Fts/gE7PuT/ZvUnFD/l81hmLa3zaNKVR90jnQrb5CR8
F+a3qPEhtr40W3+H9c+y9VvQ/dad2vRxXycGJUfW55ZUrnC+71uW/lj/hbX+
ZO2fVss/tfxB40f0ra7vxdIvm3+H4s/Q/6P6AGj90PMs/1TbL2r8hK2fwPpX
0f+z9UdZ/sbGH6rtR+v6PGj+kP+kOr9ITev/quWbuj6een+z9itbX0odH8TK
X7V9rT7fgMUH1f5btf3Hrp/af8KuL9p/6vqT6vwhNn+TPX9JLX+t8e1ot9+s
/z/a/Ydq/U69v9XyQU2/avuM/T8UX4/se5b+WPuS/b5av1DjQ+g+i58i++u1
qjrS16Z/9fbIskuC3Yvnt9iwY5Xz19n4KDW+heyb0XM+XpNaGhdMeXho3K64
Y863/vrQqji5dxbOvPi7ft863/rrrP3j/WSL2tca/PyN5W7T2ubf1Ek/HPrR
rOVjtNuvavvA2n+F7rP1Ca3jL3wcanVxquz+Uuf/WZ8fh+6j8zvZ9VX7J9X+
aSSf0PjQ+bus/wDJX6S/qfkron8kH9TnZ7L64cixZ94duPhXQfe/dn/79lbb
3fny9NjPm1wUXlfHH6r5MzpfEdVPV+ffsfF3avuMXX91/LLaf4/oVy0f1fG5
aH3V+Vdq+zJ7yZSs/oWJYftWn0Gntw4tcL6vpk8UP8Di1+z4cybf3KrWuFpB
RsWQosqSMrc39eiayTO+cf66Nb7A5h+h97P6S7THr7Lx1Wr5o46vZONf0fp+
fWOLdk9cVz/Y9HKdjXfuXuJyto97/a6Nl4bXayY/fnr8q9p+/6XrN2h9rPEl
9nnW/kfPs/i5Wn9j8WM2fssaP2TxZ/R99vzAlPsKi5cPjA3bXhmlV637eKfz
ffb/2fgkFv9S48vW9gO7Pmx9dbV9wZ5PE+3xPyz/Z/VjNL8IX0Tzi/BDtX3H
6tfW8V+s/szuX/X/q/1z7Pyqz7dl+TOqL8j699X6M3s+hPX6oO9bx/ep7ROE
z1vbb+rzcVj+ZJ0foeavyD+rPh+XxRdY/QHh22r/NPKvsfuP9f+y37fOT0fr
w9YXVtsnavvcGn9j76vzi6Idf4z29Ufzi/x7avyFnR/r+GJr/wN6PulYcmp5
at1gUOdeD8zOW+F837covxvpB8j+QPIP8Ve2fvv+Kcuzn1+03M2vwlMiW3b/
s/5dJJ+/rarb/mO9w4ow7tm31vibmn+x51dbx59a40fs/JQXbD83OiX+f23t
vS2LDr7rfJ+Nf1bTjxq/spZfCB9Sx+ez8l+NL6HxsfUT0fPI/+rrnHl/ol83
fx19n80PZ+1TZL+r9UM1/aL9qcYvWftUfb6j2r5B+D1b34XlD+h5df4Paz+o
429Y+abWz9T15Vj+pvZfsvuXXR+1fqCuH2O9f63Hr67/qI4PQfIFxWdYn5/M
yidWf0HvV/uvqjvXzresfxbNP6qvrMb/0PgQfSL9kaUvNb7O3kfx+zVd//O9
b4q79/geNzfn2W8XdPtXjesDqPMf1P5xdfwviy+p5S+r36n3n3r/oPxblv7Q
faR/qPUnlj+r4/vU31fjayx9q8//Uuu3NcV/I+uu1rT+KnufzU9j81tZ/Rmd
P8DSB3v+mPX+ZOPr0fgRPs7qJ0i/R/PDxreg97P4O1tfFO1ftX0Y7fiJOn7F
On6Vrf+gxhfQ/kD0q64PbE2favpg6VfNX9D6quMP1PgGm78J4/9A/Jc1fVv7
X9TnB6j9Ex4HrQ4nRfoDyn9k5Z/af4uet/bfs/ie2r63Pr9RbX/6OMof4yxP
um7rD78yLKM0jLO0zv9j7Vu0v9T+ddb/o66fhPB/9H9vFO9KfT+tdpCVG1uw
aEGlO/TefaVnu+1x/jqLf7Hxiez5DKx+ocYn1fgBuz/V9qOa/7D0yb5fLT/U
8QvW68fKZ3V9XHb/s/PL8g8W/7SO72HlE6pfzcZvI/nP+u/V+e+sfaemD+S/
ZekLnd/Jvn9hlZ5VmDXh+/77tjjf963aPlPbByj/zhp/Zs/HVcdXoOfV+Le1
/FfrV9b4H3q/+vxGtf3M5n+w88vGR7L6tzo+RO1fUcsH6/pCrP6lXr/q6vL5
1pq/svcRfs/W17GOj1LbN2r+r6Zv9r46v56NT2fXB+Gz1vStlh8s/hqfd0fa
vsx8l1AVDxfZsvTFylcWv2fxLTU+ya6fWv9U22+Iv7LnX1rbL2r9ommPuzum
Lq4dNJ41a+OpqZud7/sWfV9dP1y9P9X2K4tvsPwd8T9r+4c9n5qlH3V8BPt+
5J9V66/W9M/+H3u+h3X9QrV8UfMHRL+IPhC+rdaf1PkTUL8G9Kc+34u9j+wD
Nf9h5986vtqaP6j1Z1a/Ucs36/gK9H62PqY1fbH6TbTHX7L6C+tfZeOXrPEL
JP/Q/DRfWHL26cwTYXx75HldaHxsfAaLb1rzH2t8mY0fVPMHVv6z8WHW/hlr
/x3Cr1j+a80/1eujlq9IP2HxeXb/+Tqq93Sp07yscnVYV9W3bPwe0m9Q/iGa
H3X8K7s/2fN7rfVr9j57/rTaPlLbZ+r8OTb/Ba2PdX0D9DziH8g/Yx3/8HPJ
/y/XFJc2y1l7Af9G+iWL76rxG/b8Vmv+Z21fsPyL1S/U5yta83d1/iUrP9X1
D63lgxqfsbZfkHxjz69X81e0P9TxMWr+rc7vtD6fVr2/WHzTGp9F9bHR/mTp
Xx3/aG1/qvmrOv6KfT+K31D7vxH9qvkrG7/C8gc2PkStX7P7h61/guqDsvFd
rP6L9BvW/8ryT7V8s9bP2fr/SH9E99Xx6yh/CNEPa5+p8Rt1fUg0flY/srY/
2fPFWf8pq1+o44PZ8/nQ8yh+K9rlsxrfivb4O3R/eMrsmKmvNwiypi8esmHa
HNdxS/HcDfuTwuus/FbHJ7D1C63tL/Z5pB+o6UuN31r7D9j66ez5K+r4elY/
UeuH6HwD1j+ojt+2xn/U+q36fGjr/Dxr/yfyT7Pro6ZPdfw4Gn/O5Jtb1RpX
K8ioGFJUWVLm9qYeXTN5xjfOX7f2f7HxE2r7z5p/sfYLS/9NDu8ZVpBU6dZV
fHqm5dYDLiEuf+SRGRcFvrW2T3YmTnjsdHZi2I5ZXfJB/uiVzvfV9nv7F4+f
6hLEB8OvHZU5tm+hW9Z4yaqP7qoX+Bb9v/r8G/Y+6z+qKb5XnR6v/j82vsl6
/tXynf2+zxPpmVF61bqPd16QP5J0LDm1PLVuMKhzrwdm561wvu9ba3wB0Tdb
H05t36nr57H3rfPPrOPHWP6P8rtZ/sza32p8g8XnrPFHdJ+tD8muv7q+crTj
1yx9sPgwit9D/4fsA1Z+qfEN6/hJ9fwgfJWN37O2b9X3Uf1RtX6F1o/lf2p8
lvV/sfqlWv6i8bHyDe3Pb6vy5n/ESyrCc698y9IHqv+Pzq9G9MHWx1fjHyx9
eRzZ26N+nvx15H9h7Rc2fkd9X51/rMZHWP8l+r7aP8nuP7X/juVf6D5r37H6
sRo/YeWfdX6HWv9Wzx96nvXvIvpR10dU65dqfNJafrLzg/QHdn3R+WDq/YX+
z7o+mZr+1fY1a99a83d1/o21/GXjL9H4oh0fQ/tfjb+o77P0o7Z/rMdnTX9q
+a2u71Iz/VOX/6Guz8jWB/A42ZSHh8btijvmfOuvI/zLOr6G9d+o+Zv19635
A8K3rOOb1fXLrPNDrOlTHV+N+A+yj9D4Uf0Idn3Y/H41/VrnH6r5F4t/WvNP
dv+w+gnrn1DPP7s+av3Q+v/Y+k8b13canrv6ksC3BddNa3Bo3drwerTHL7Hv
Z/EvdvzoeWQfWOeHsOOPdv2P/b4aP1Wvn3X+oxo/YOffmr5rhr9W75+zjo+w
to+s/Rvs/yH7jOUP1vWNrP1L1udHqvVPNX6gXh+1/ELjZ+uzqfFz9P/o+2z9
DhTfyf4/4k/W+K0aP2f1H3X9SzX9q+1vhN+x42fHV51e5/tofGz8BKpvqZYf
LH2x+JcaP2DPh2Lv+zoGvr6Br3fgr7P6BfL/If6kpj9r/486/lCN36n5H7t/
UP4oO36kP6H3I/7E+s+s5ZfafmD9I2r+qrbv1PkX1viQ2r+FxsfmR6j5L6J/
a/8uG1+Gnkf1U6z9w+r69+z5KWr+GO34kfr/1Pi42n5X05daf2jdqU0f93Vi
UHJkfW5J5Yqw71sWP2HHz8bvsPeR/qj2j6P/V8fnsvHBrP6vtg/RfbT+7PnB
1v579vnxVTjbyaVz0iambAtxEX9djV+q+Ssrf1n5gO6r45fQ+NX1g9D/o/h+
a/mL8D1r/VF9H9EHe74kmh9Wf0DjZ+tTovEjfBc9r67/rvZfxefdkbYvM98l
VPmTI1uUX4jej/gHep7lv9F+3xofYenHWn9C+qNaP0LyR40vqPFNa/3QGr9S
549Y4ytsfJpav0fyUW3/9r2/7dInW9QL8s51TR7Tepnzfd+y9jtr/6r3r3X9
ajX9WPsf0Pit45vR+rP1N9XjU+Nz6Pnygu3nRqfE/6+tvbdl0cF3ne+r6Yt9
P4pfQM9HxntFxoGp4wPY+HLr/GcW/1THJ7Hroz5/Qi2fkP6P5D9r/1vPj3r/
qfeX2n5h9T80PjZ+Uy2fWftV/X30flT/Fb1/YfGu1PfTageFWRO+779vi/N9
36L/t86PQvl9LL7M5j+x/j/WP/lzxddXVx9cHZ+O5Jfa/8Gur5p/qesnovGj
8wHU+K+6viCKj2Hfr64/w44P1Y9l9zf6Pqq/z9Kvtfxi/Y/W+Iw1/arlD/o/
Vj9k7S/0f2x8mDp+Wb3/1fgBqx8i/Z21n9T4Easf/tLzk9H52Sz/YvPP1ecv
If732qb5TyXk1g2uTf/q7ZFllwS7F89vsWHHKuevs/Ojxk/Q+9X4EXu+vTX/
Q/Xn1PHzqD6FtX9QjY+r6xtb58eo8xvV68PyXxQfx+IPqH6smj7Y+bGOD0D3
kXxn9Wd1/S/0fcTfkXxA+BJLP2r7XO2fVMefqOnfOn5QLZ/R8wi/Zc9XVcfH
qvFzFt+yrm/I2mfq+E+W/zVfWHL26cwTrqKqzpnHaXzL+g/Y83nZ+tBq+45d
nzFVdeRmft6+fr/HP3K+71tr/RzRDzq/xTp+Qi0/WfnG5jch/zlb31etn6H7
iL+w9jHLn9X509Gen8PKV2v/Bru+av2avc/qT6z9zdq/avsBzY81Pqrmv0g+
7Eyc8Njp7MSwHbO65IP80Sud77Px22x8GFo/Nv5DbZ+p/RNq+42VT9b5M2x8
LDs/O66+5opJyftc7pvpGSvmxQSRrTX+jegf8Q/r+CdWfrH2iVp+W+N7av2W
ld9ofEh+s/T7b1rEBDU=
     "], 
    "CountMatrix" -> {{1324, 1, 14, 0, 0}, {4, 1320, 3, 20, 0}, {0, 15, 492, 
     0, 0}, {0, 0, 0, 465, 0}}, "IndicesMatrix" -> {{CompressedData["
1:eJwl2Gd0COYaB3ArKA2toLUrRdRWW20ximquFW0oNYIqLrGLVI3SGKVGD1Wb
SsUIRVGlKLHHNWrViBkrZmPeX04//M77/f8853ne9y3cqU+L3mnTpElTKiBN
mtQzA5l4hUCCyMkb5KcwwRQlhOKUowIVqUwValCL2tQhlAY0pDFNCaMl4XSg
E12JpBs9+Iy+DGQoXzCM4Ywgmi8ZwzjGM4GJzGAms5nHAhayiKX8TByrWM0a
1rKeLfzOH2xnN3s4zFFOcJLTXOAiV7jGdW6QxC3ucJ9HpPCE57wkNfT0ZCSQ
bOQiN3nITwEKUpgiFKUYIRSnNOUoTwUqUpkq1CSURjSmCc34gOZ8SBitacvH
RNCejnQhkl6kNsogBjOELxhONCMZxWjG8jUxTGQSU5jGdGYwn8UsYRmrWE08
G9jMNnbwJ7s4yFFOcIoznOUCl7nKTe6QzEMe8Zhnqc2dTtykJwMZCSQbr5GL
vOTjLYpQnHcoSWnKUZFKVKU6tahLKM34gJa0ojXhtCWCdnQgkm50pxdRDGAw
wxjOCL5kJOMYTwwTmMxUvmM6M/mRuSxkEcuIYwUrWU08a1jLBn5jK3+yiwT2
sJd97OcABznEYY5wlOOc4yKXSOQKV7nGTW6TzH0ek8ITXqTWIb06EEAmspCV
QHIQRE5y8yZ5KEgh3qYoJSlNeapQlRrUpD6hNOB9mhHGf2hBK1oTTgTt6cCn
dKYr3ehOFAMZzFC+YjRj+JrxTGIq05nFHOYyjyUsJ44VrGI18WzgN7ayjR0k
sJd9HOIoxznL31wikaskcYe73OMRKTzhGekM9QwEkJmsBJKN7OQgiJzk5g3y
UIBCBPM2xSjOO5SgFKUpSyUqU5Ua1KQeoTSkKWG0oBURtKMrPehDP6IYwEC+
IJpvmcr3zGYOc5nPT8QSxwri+YX1bOI3tvAHCexjPwc4yElOcYaznCORy1zh
Gre4zR0e8g9PeMozXqYuTfszHRnIyCu8SiCvkYMgcpOHfOSnEIUpSrGAf/dw
ed6lIlWoRnXeoya1qUt9QmlEC1rSija0pR3t+ZTOdKEr3ehODz6jJ73oQ1+i
GMggBjOUYUQzim+IYRKTmcVs5jGfxSxhKcuIZQWrWcd6NrCJrWxnB/s5yCEO
c4T/cYzjnOQUpznD35wnkcskcYe7JPOIFF7wkjQZzX8CyMQrZCWQbGTndXKQ
h7zkowBvEUwIJSlHed6lApWpTygNaUwYrWhDOO34hA50pBORdKcHPelNH/rS
jyj6M4BBDGEow4jmS0YxhrHEMIFJTOZbpjGDmcxlPgtZxGKWEMty4viFTWxl
N3s4wl/8zUWucp0bPCaFZzznJRlcIgPISGZeJTuvk4MgcpOX/LxNCCUoRRnK
UokqVKM6tahLPUJpxPt8SBgtaE0bwvmYCNrRkUi60Z0efMbn9KYfUQxkGMOJ
ZjTjiWEKU5nGdL5nDgtYRizLWckaNrKV7exkF7vZw16OcIZzXCSRy1zhGtdJ
4ibJ3OMBD0nhKc9Im1lPk5ks5CCIXOTmTfKQl3zkpwDBFCGE4rxDacrwLhWp
TB3qUZ8mNOVDwviI9nxCRzrTlV705r/0I4r+DGIwwxjOCKIZxRjGMo4YJjCF
acxgJrP4gXksYCGLiGUlq1hNPOvZzg52kcA+DnCM45zkNOe4TTL3ecRjnvAi
87+PorSkIz0ZyEwWspKN18lJPgpRmGCKUJRilKIs5ahCVapRnVrUpg51aUBD
GtGYpjQnjJa0Ipy2RNCBjnSlOz3oSR/6MYShjGYs45jAVGbyI3NZxGKWEksc
K/mF9WxgI5v5nW3sJoE97OUghzjMMU7wF+e5SCJXuE4St7hLMve4zwP+IYXn
qdlnkTsBZCIzWchJLvJTgIIUohghlKAkZahGDWpRmzrUoyHNCKMFbQjnIyJo
T3d60ps+9KUf/RnAYIYTzWjGMJavmcJ3TGcmPzKXeSxkKcuJYwWrWE08a1nH
RjaxlW1sZyd/so8DHOMkpzjHeRK5zA2SuEMy93jAY56SNqs8yUp2cvAmBSlM
MEUoRgjFKUEpylKBqlTnPWpRl/o0oBGNaUpzwmnLJ3SgI58SSS96048ohjCU
UYwjholM4lumMI1ZzGYO85jPTywjljhWEM9a1rGeDfzKJjazk10ksId9HOQw
RznBKc5ygUvcIImb3CWZe9znCU95xnNekuZVmRNARgLJThC5yE0BgilGCMUp
RQUqUY1a1Od9mtCUZnxAc8JoQTjt6EgnOtOFSLrRg8+JYgBDGM4IRvIVY4hh
IpOYwndM53tm8QPzmM9CFrOMn4ljBfGsYR0b+JWNbGEbf7CdnexiNwnsYz8H
OMwxjvMXpzjLBS5xhSRucZsHPOUZL0gXqARkJydvkIeCBFOC0pShLOWoSCXe
oya1qU8oDWhIU5rRnDZ8xMe0oz1diKQnn9Ob/xJFfwYwmCEMZRgjGcVYvmEy
05nBbBawiMX8RCzr+JXNbGEHO9lNAnvZzyGOcpzTnOE8F7lEIle5zg2SuMUd
HvCQRzzmH1JSPw+zyZeMZCIb2QkiJwUJpighlKQUpSlHRapSl3qE0oBGNOH/
ZKWsVg==
       "], {3419}, {350, 1096, 1285, 1303, 1517, 1522, 1617, 1725, 
       1851, 1864, 2508, 2974, 3236, 3602}, {}, {}}, {{409, 1727, 1915, 
       2905}, CompressedData["
1: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
       "], {1024, 
       1076, 1238}, {5, 175, 271, 486, 707, 1057, 1081, 1271, 1642, 1826, 
       1947, 2152, 2393, 2406, 2430, 2632, 2853, 3300, 3550, 
       3605}, {}}, {{}, {428, 567, 578, 735, 1136, 1564, 1730, 2414, 2466, 
       2496, 2604, 2621, 3088, 3392, 3400}, CompressedData["
1:eJwV1WtMFmQYBuAPUUJIkTygIEbT1piJi4o5D5CSTEPzkDJ0UeBM1pSYThfh
ctKmEzUjmQeKvmYRUua0AKcTZDn9kQ4ThodEWo6Fk0U/QB0bBV3+uN7353vv
ebb7fW5d4coPQgKBwN+OYe4Iniaa8UwhicUsYQWryCaHXArYwjZKOEoFx6jh
PI38wlV+o407/MEAg4Q8ycAIIhlLLHEkkMxs5vAa80kng8VkspJNFFNGkJPU
Uc9VmmmljXY66aWP/icZDGIkkUQxgRjieZEkZjKPNDJYTCbLyWINeWxkC1vZ
RRmVfMNxTnOGy9zgFu3c5R4P6OYRQwwLtRfimEYyr5BKGvN5m3Ws5302UUAh
29lBCbvZw37KqSBIPee4wEWucINb3OZPunhAD308pJ8BQoYHAqGMZDyTeYnZ
zCGVdNbwLuvYQD4bKWYnpexjP9V8zwlOUUsDl2mjnU566SNkhP0RRTTxTCGR
JObyBsvJZQPb2M7H7OYQh6nkW05TTyO/0sl9+ugnNCwQCCeCMUzhWZ4nkVTm
s4CFvMky3iKbfIoo4RBfEOQ4NfxMLWc5xyWucZ0WeviHXvoIeUomRjGOOOKZ
SzoLWUo2ayhgMx9SzA72UEYV1ZzgJD9RRwMXaeYGN/mdO7Rzj0666WGIsPBA
YDRRjCOBqUxnFrNJYyGryGIteeSzmZ18QikHKOMgQb6mnjM00EQLrXRwj066
6GGA/xhixEj9xzNMJJYEZpDEEpaxgiy2sYt9fE45R6mhlvNcoJlr3OQuHfzL
IKOUbhRjiWEik4hjJilksozVZLOWPNaTz0cUU8JhKjlGFd9RzQ+c4BRnaaCJ
S1zhOi20cpMeHjNEWKS5MIZoxhHDJKYygyReJY0MlrKc1eRQyFaKKKGUvezn
M8qp4iGPeEw/gwz3KUUwmWkkkkwKc0jjdTJYRA5bKWIvX/IVQar5kToaaeIv
7tNNH8NHeY+xxJLAC0znZVKYRSoLWME75JLHexTwKQc4yBEqCFJPEy20cpsO
uhgifLT+JIJoJjCNeWSwiP8B3nv6qg==
       
       "], {}, {}}, {{}, {}, {}, CompressedData["
1:eJwV1WtMF2QUB+C/qRDeRuKl1RQRNBFQkqQ2TaflCAoZYpeZmrdaMCesJawk
s6wpTkKFAYaVVlJSmkmtsLDhBdGVzswIGWmWI2SitDAFuzx9eN7z8d35nbOd
iCXZc1b0CgQCpzy91UHcSThRRBNDHPdxPzOZTRpzWEY2OWygmEr2UMMRjvEj
LVyklT7+DCGU4UQTyzQymM9TLGYJS8kinzUUsYUyytlOFZ9QQy2HaOA4TZzj
d9r5k27+pu8tgcAABhPGSEYTyV2MJ4FEpvIAD5FCOgtYShbZvMhmSihnK29S
RQ37+ZoGfqCJs7TQzmV6uMn/gwkhlNsYxWjGEUsCKTzBIlawkjxeZi1FlFBK
ORV8SBXNXOASnfTrIwvu5RFSSSODx5jHApbxLCt4njxW8wprKaaEUt7nY/by
GTV8Qx2HOcpxztDIBVppY1DfQGAItzONZB4mlcdZTwGFFFPGVt6mhiM0cIJG
OviLoCB9EsYQIohiLOMYzwSmk0Qqi1lKLusooJDN7GIPB6ijnm/5jpOcoZmf
Oc8VurhGD8HB9o5wIogmhjjimc5cXuB11rGRQoopYwfvsZN9fM5X1HKYek5y
inO00k3/WwOBgYxlMkk8ykoKKaKcCnZSyW6q+ZL91HKAOupp4jy/0Uo7VwgK
0SthDGMEkUQTwyTuIZEpzGMhy8khlzzyeZUNbGIbb7GdHVRykHqO8j2n+Ymz
/MJFLtFBNz307icPBjCYYYzhbiaRwGSmMINZJJFMKrOZzyKeIZMc8lhNAW+w
hQqqOUYjTbTwK21cpYvr3OAm/xDcX34MZQThxJPIVB4kmTTSeZpMlrOKfNZQ
ShkfUc1BDlFPAydoppXLXCFkgFwYzkjimMBE4pnJLJJII525PMlCniOX9Wyk
lHd4l085TRtX6aSLa1znBv/Sa6AZEcpQIohiDLHMIIU0MsgkizxW8RKvsY1K
PmAXu9nLPr6gjno66OQP7nAkRxHJWCaSQDL/Aao09iE=
       "], {}}}, 
    "ExtendedClasses" -> {"r1", "r2", "r3", "r5"}, "Weights" -> 
    SparseArray[Automatic, {3658}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 2.5109690733500043`*^-6, "SingleEvaluationTime" -> 
    0.0015434081278913481`2., "Version" -> {11.3, 0}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7650203258240356`*^9},
 CellLabel->"Out[47]=",ExpressionUUID->"ba6a6431-7694-4ad8-b8b5-b38f640559b3"],

Cell[BoxData["0.9844177145981411`"], "Output",
 CellChangeTimes->{3.7650203258240356`*^9},
 CellLabel->"Out[48]=",ExpressionUUID->"d555a242-289a-4962-b97b-c065a434d843"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2FNKC/3eo/bQ7o39Aw+l0mmsT+0vTDYSWjP1
JE71RfvFf3X0vrXX+33hOXf3K/sSrcDoZ1yP7G8aikSVfnhtH2RXX7Fk3WN7
FkW1BV/E9+E051J98KrMf2/tNfr5+KeavrFPexOlGZ3wzN7b0VJRxP+9/c4N
CdbHHe7Y+5ybb/ZybqD9yo/b2phM39kv3VzE+oT5rf0M04l5vyte2BtM42P1
DX1rH7XVwrN320v7Z04W22OP3Ifb87BKZJ37w1v2sBCLvuisyZLzzr7iweOn
+y6/td+vl960cOore0/D6muKR97ar5I3vRcV+dp+WXH7gjblJzjdDwDc7oYP

   "], {{0, 0}, {4, 4}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1324", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1324", "\" examples of \"", "\"r1\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.9969879518072289`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.9887976101568334`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.9928758905136856`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1324, " examples of ", "r1", " correctly classified"}], 
         Row[{"Precision = ", 0.9969879518072289}], 
         Row[{"Recall = ", 0.9887976101568334}], 
         Row[{"FScore = ", 0.9928758905136856}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["4", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "4", "\" examples of \"", "\"r2\"", "\" misclassified as \"", 
             "\"r1\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.0030120481927710845`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.002969561989606533`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{4, " examples of ", "r2", " misclassified as ", "r1"}], 
         Row[{"Column fraction = ", 0.0030120481927710845`}], 
         Row[{"Row fraction = ", 0.002969561989606533}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"r3\"", "\" misclassified as \"", 
             "\"r1\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "r3", " misclassified as ", "r1"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"r5\"", "\" misclassified as \"", 
             "\"r1\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "r5", " misclassified as ", "r1"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"r1\"", "\" misclassified as \"", 
             "\"r2\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.0007485029940119761`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.0007468259895444362`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "r1", " misclassified as ", "r2"}], 
         Row[{"Column fraction = ", 0.0007485029940119761}], 
         Row[{"Row fraction = ", 0.0007468259895444362}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1320", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1320", "\" examples of \"", "\"r2\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.9880239520958084`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.9799554565701559`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.9839731643682444`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1320, " examples of ", "r2", " correctly classified"}], 
         Row[{"Precision = ", 0.9880239520958084}], 
         Row[{"Recall = ", 0.9799554565701559}], 
         Row[{"FScore = ", 0.9839731643682444}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["15", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "15", "\" examples of \"", "\"r3\"", "\" misclassified as \"", 
             "\"r2\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.01122754491017964`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.029585798816568046`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{15, " examples of ", "r3", " misclassified as ", "r2"}], 
         Row[{"Column fraction = ", 0.01122754491017964}], 
         Row[{"Row fraction = ", 0.029585798816568046`}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"r5\"", "\" misclassified as \"", 
             "\"r2\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "r5", " misclassified as ", "r2"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["14", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "14", "\" examples of \"", "\"r1\"", "\" misclassified as \"", 
             "\"r3\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.0275049115913556`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.010455563853622106`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{14, " examples of ", "r1", " misclassified as ", "r3"}], 
         Row[{"Column fraction = ", 0.0275049115913556}], 
         Row[{"Row fraction = ", 0.010455563853622106`}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["3", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "3", "\" examples of \"", "\"r2\"", "\" misclassified as \"", 
             "\"r3\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.005893909626719057`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.0022271714922048997`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{3, " examples of ", "r2", " misclassified as ", "r3"}], 
         Row[{"Column fraction = ", 0.005893909626719057}], 
         Row[{"Row fraction = ", 0.0022271714922048997`}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["492", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "492", "\" examples of \"", "\"r3\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.9666011787819253`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.9704142011834319`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.968503937007874`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{492, " examples of ", "r3", " correctly classified"}], 
         Row[{"Precision = ", 0.9666011787819253}], 
         Row[{"Recall = ", 0.9704142011834319}], 
         Row[{"FScore = ", 0.968503937007874}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"r5\"", "\" misclassified as \"", 
             "\"r3\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "r5", " misclassified as ", "r3"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"r1\"", "\" misclassified as \"", 
             "\"r5\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "r1", " misclassified as ", "r5"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["20", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "20", "\" examples of \"", "\"r2\"", "\" misclassified as \"", 
             "\"r5\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.041237113402061855`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.014847809948032665`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{20, " examples of ", "r2", " misclassified as ", "r5"}], 
         Row[{"Column fraction = ", 0.041237113402061855`}], 
         Row[{"Row fraction = ", 0.014847809948032665`}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"r3\"", "\" misclassified as \"", 
             "\"r5\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "r3", " misclassified as ", "r5"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["465", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "465", "\" examples of \"", "\"r5\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.9587628865979382`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.9789473684210526`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{465, " examples of ", "r5", " correctly classified"}], 
         Row[{"Precision = ", 0.9587628865979382}], 
         Row[{"Recall = ", 1.}], 
         Row[{"FScore = ", 0.9789473684210526}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1339", "\" example\"", "\"s\"", "\" of class \"", "\"r1\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.9887976101568334`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1339, " example", "s", " of class ", "r1"}], 
        Row[{"Recall = ", 0.9887976101568334}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1347", "\" example\"", "\"s\"", "\" of class \"", "\"r2\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.9799554565701559`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1347, " example", "s", " of class ", "r2"}], 
        Row[{"Recall = ", 0.9799554565701559}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "507", "\" example\"", "\"s\"", "\" of class \"", "\"r3\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.9704142011834319`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{507, " example", "s", " of class ", "r3"}], 
        Row[{"Recall = ", 0.9704142011834319}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "465", "\" example\"", "\"s\"", "\" of class \"", "\"r5\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{465, " example", "s", " of class ", "r5"}], 
        Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1328", "\" example\"", "\"s\"", "\" classified as \"", "\"r1\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.9969879518072289`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1328, " example", "s", " classified as ", "r1"}], 
        Row[{"Precision = ", 0.9969879518072289}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1336", "\" example\"", "\"s\"", "\" classified as \"", "\"r2\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.9880239520958084`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1336, " example", "s", " classified as ", "r2"}], 
        Row[{"Precision = ", 0.9880239520958084}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "509", "\" example\"", "\"s\"", "\" classified as \"", "\"r3\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.9666011787819253`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{509, " example", "s", " classified as ", "r3"}], 
        Row[{"Precision = ", 0.9666011787819253}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "485", "\" example\"", "\"s\"", "\" classified as \"", "\"r5\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.9587628865979382`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{485, " example", "s", " classified as ", "r5"}], 
        Row[{"Precision = ", 0.9587628865979382}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{3.5, 
       FormBox[
        RotationBox["\"r1\"", BoxRotation -> 0.], TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["\"r2\"", BoxRotation -> 0.], TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"r3\"", BoxRotation -> 0.], TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["\"r5\"", BoxRotation -> 0.], TraditionalForm]}}, {{3.5, 
       FormBox["1339", TraditionalForm]}, {2.5, 
       FormBox["1347", TraditionalForm]}, {1.5, 
       FormBox["507", TraditionalForm]}, {0.5, 
       FormBox["465", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["1328", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["1336", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["509", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["485", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"r1\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"r2\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["\"r3\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["\"r5\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.765020326011531*^9},
 CellLabel->"Out[49]=",ExpressionUUID->"54f15797-ca92-4c81-ab57-4ee86de0b3b4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cThermo1", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"training", ",", 
    RowBox[{"Method", "\[Rule]", "\"\<DecisionTree\>\""}], ",", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7650203896200905`*^9, 3.7650204302447443`*^9}, {
  3.7650253254772615`*^9, 3.765025344289188*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"cb036430-d9b6-4122-88ae-f74c52265287"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"r1\"", "\"r2\"", "\"r3\"", "\"r5\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"r1\"", "\"r2\"", "\"r3\"", "\"r5\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"DecisionTree\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["32922", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 32922, "ClassNumber" -> 4, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical"], "f2" -> 
           Association["Type" -> "Numerical"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 2]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical", "Numerical"}, 
                "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> Automatic, 
                "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
         Association[
          "(f1f2)" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 2]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Version" -> {11.3, 0}, "ID" -> 5999172908886121309]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 32922, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {535.5528218212745, 440.05184982686353`}, 
                   "Method" -> "Naive", "VectorLength" -> 2, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {535.5528218212745, 440.05184982686353`}, 
                   "StandardDeviation" -> {417.3827940577992, 
                    309.75112432578936`}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 2, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                   True, "Invertibility" -> "Perfect", "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                "Model" -> 
                Association[
                 "Matrix" -> {{-0.7071067811865474, -0.7071067811865476}, {
                   0.7071067811865476, -0.7071067811865474}}, "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {535.5528218212745, 440.05184982686353`}, 
                    "StandardDeviation" -> {417.3827940577992, 
                    309.75112432578936`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 2, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.01616014054378608, "MaxTrainingMemory" -> 
                  1106640, "DataMemory" -> 526904, "FunctionMemory" -> 21760, 
                  "LanguageVersion" -> {11.3, 0}, "Date" -> 
                  DateObject[{
                    2019, 4, 23, 12, 22, 24.7734864`9.14656205332644}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 2, "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Type" -> "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
             3183744061192450103]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Mean" -> {535.5528218212745, 440.05184982686353`}, 
             "StandardDeviation" -> {417.3827940577992, 309.75112432578936`}, 
             "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Version" -> {11.3, 0}, "ID" -> 6290908127098961799]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 1716634207928958562]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association["r1" -> 1, "r2" -> 2, "r3" -> 3, "r5" -> 4]}, 
             "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
             7986107592405538806, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 7038916035376012904]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 4], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[
       "r1" -> 0.3640891696531616, "r2" -> 0.3728664277470692, "r3" -> 
        0.13196258276134362`, "r5" -> 0.13108181983842557`]], "Prior" -> 
    Automatic, "Utility" -> 
    SparseArray[
     Automatic, {4, 5}, 0., {
      1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    "Quality", "BatchProcessing" -> Automatic, "Model" -> 
    Association["Tree" -> MachineLearning`DecisionTree[
        Association[
        "FeatureIndices" -> 
         RawArray["Integer16",{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
           1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
           2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
           2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
           2, 2, 2, 2, 2}], "NumericalThresholds" -> CompressedData["
1:eJwdx11Ik3EYxuFNa46hlmHqkCLXBGfZYGFG7H3/mSW2CtqSTQuTaclYmuXS
WoZNp0VqijpB1OZMkXRuaEVp7H0eUsM+/CAkthmVmpp1YGU17SDI7eD6cd9R
WfmKHD8Wi6XjrkehvppYUKDWn+J4z3l17l5JLnt9GtfxIm/jzfoKZKfl4HNh
Bh4CGS7rabQnx2O5UIzpfiIUzwjwRy8fp1vCsE+/2eeWioeXkwMwWcjG/Rs8
4BU89x0G732G2uIPcCDhLSysjECdfQCk2l7YktIFX6It0DDbABq8C6HFpTDV
XwQleVoQic7Cu3k5GCxHwBkeB3G1oT5uGRe4QWtMZvknJlBnZ7K/Nfrohq8z
Ox4eZSYsEYxn+6SjfS3d8btuj9Sr7cKgVDAaRBW6aGr0az61j9NN3Qmfpi6a
NtImiYD0JEWTqoxH2HK8HwdjbfiSb0UntxsXV7vQs9iJoS8suPOxGRPrm/Fk
aRPmZ5qwdXcNWiOr0b1UgUtOI+6SFaOGo8POIS3OlmT5SPlKPL0qx5UTFIp5
8figTIj+2yLwoHsT3mgMQHumB2JcC/AxcBxUFQ4IetYBw8uVcG3iCswnJMEr
Phu0nDamXa50+M8rqNi2MaovL4Z+U6WlxSE19JMmM80695QO1rnoyLK/dJE2
hKRVbyX/fkYRo15Cxg8fIwU9KpI6doY4Ci+R+yUGopyqJAl/aojF3EGy56wk
9ZeNcFMGiKN1iNhsI8Qw85qo/SZJmMpNOJr35D92cBKl
          "], 
         "NominalSplits" -> {}, "Children" -> CompressedData["
1:eJwVj2l4CAQAhl8Sm/t83DK3EAvLWUbSXLG5S9rYEdqyjbXssrlyRI5ylHJf
uQqRbuXKVblF5T6KSuWK1/bj+97ne95fX1BUQnhMfiApILfCI1NCExMjUyMC
c0dYfHJ0bHRicEhcns/JTR6PedR8/OmTFOC2t7xpKA/zNBv92J/80ad4lo78
ayf+8YZ/e8XOFOV/i9GFEnTjgPs953Nc8Lyl6UF3ehJGWz5yg+vtTQX2OMe+
VGKd/RjAO75tHwayy52+yGoH8aszjaQGUdRkCLWIZrmxrHSFdfjWZS41hleZ
4mQXu8hXiKcRCaSb5ggSacI3vkRLcsz2S78whddozmk/9zNfJ41UWpFFm9y/
x23NXz6O5ueOD1GQIx62Hdc9ZCHaE0AH/vOaf1iYIvzuVZ+hOIGU4wcPetlL
XrQUXSlDScLZ517Pesb73rMsd/3e8kRQkXnOtRdVGGOWldntWqvSn+dZ44f+
5iO8QBCznWV1dliNR8k0wxm+5XSnOZhVfmddahPHm061Hi9Tn+0usQFDacgw
HmOSbzjRCS70A4eTRGPGO86xBvOLX/uVyTRjJCE05X0X+J6jaMETnHKbnzqa
dLa6xU/cbAY/m8kYTnrCd51vNpt8AGAHEMI=
          "], 
         "LeafValues" -> CompressedData["
1:eJxdU81KA0EMzsxOf7attqtSsaIiiNaCFRUKPfYg4sVDxZsIFWsVpIVWEO99
AMGDbyEKevQVfBzPbjNJdmZZ5kvyZSbJZLKb16PurQaAST6Gbu+pMx73ns+j
2LgYTu4Hw/7N6fCxP+iPD1p3s33TeJl4Kfx+Kwoi0hW8IFYRG3XLrZMvgAxp
e4igNcojOf1NcgdxjiwdZ1PylaFEnoZwVYpvrSzt52xnmvdZJi9xmyhD2Rki
Pij251Aa0OR/N1abCvODe+tSyQedMFQR17SI+Lo2ww3Jz1HyXr0aap7NN9PE
RB7rakHq3KeyGZrCfHmR2sKXEI+ponmprBXal7B20Vg2R3aGOsQvrGEXZYH8
q6mbGqltG/FE+f4s+pPXTrTA6dPMWqE6rF2j84EwW1Qf36Pi5S9I3DeSl+C+
9B/wvGSc7ijYlzwcdykVz9Z5lbpXKC9kiD8kaZxT7h8Skuwo2xeOX3YwmbN0
x3juihKX4y17fUw62AY/D2v+ZKYnMpnABa8+259/ZVkgMw==
          "], "RootIndex" -> 
         22, "NominalDimension" -> 0]], "Processor" -> 
      MachineLearning`MLProcessor["Values", 
        Association[
        "Info" -> Association[
          "(f1f2)" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 2]], 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], "Method" -> 
      "DecisionTree", "Options" -> 
      Association[
       "DistributionSmoothing" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "FeatureFraction" -> 
        Association["Value" -> 1, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.0647273203096871, 0.006267296380827394], "Accuracy" -> 
         PlusMinus[0.9804249737289006, 0.0012045659080104343`], 
         "EvaluationTime" -> 4.303026756688093*^-6, "TestSize" -> 14600, 
         "TrainingSize" -> 6000, "TrainingTime" -> 0.05965631737609024, 
         "TrainingMemory" -> 945704., "ModelMemory" -> 6640., 
         "ExperimentCount" -> 2, "ModelUtility" -> 99.21815881571757, 
         "MeanCrossEntropyHistory" -> {
           PlusMinus[0.05659139402559535, 0.005708366061732601], 
           PlusMinus[0.06766218573246845, 0.0034284862239151457`]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.9806192136110247, 0.002555794862272268], 
           PlusMinus[0.9803702650306777, 0.001356391252631034]}, 
         "Configuration" -> {
          "DecisionTree", "DistributionSmoothing" -> 1, "FeatureFraction" -> 
           1}, "FinalTrainingSize" -> 32922], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 211888084068612]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.47934561610554377`, 0.030976351559166494`], 
              "Accuracy" -> 
              PlusMinus[0.878965928429053, 0.013668803843708355`], 
              "EvaluationTime" -> 4.634874594117635*^-6, "TestSize" -> 27100, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.006373735965507242, 
              "TrainingMemory" -> 69290.4, "ModelMemory" -> 5616., 
              "ExperimentCount" -> 9, "ModelUtility" -> 1.832206710591026, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.428943468288953, 0.012603390806817681`], 
                PlusMinus[0.6108370037411591, 0.02179456170422529], 
                PlusMinus[0.4565637986263596, 0.023341309156432063`], 
                PlusMinus[0.5846462269114641, 0.015093921843463231`], 
                PlusMinus[0.4978898272134837, 0.013384226750501254`], 
                PlusMinus[0.40849706640589706`, 0.010286327491140551`], 
                PlusMinus[0.6591775634633044, 0.015272332409999093`], 
                PlusMinus[0.4147598705326332, 0.010987462113803768`], 
                PlusMinus[0.47574115121980115`, 0.008503705356285276]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8980464522742182, 0.005460516642562529], 
                PlusMinus[0.8368181305470841, 0.009577298831315324], 
                PlusMinus[0.8626545804045727, 0.013126151265372829`], 
                PlusMinus[0.8537120667680712, 0.006364901674172598], 
                PlusMinus[0.8732115849867125, 0.005999847432767676], 
                PlusMinus[0.925662736426255, 0.004747292524443118], 
                PlusMinus[0.7921059270169554, 0.007301160257333727], 
                PlusMinus[0.9114802398903762, 0.005129250134320915], 
                PlusMinus[0.8601875602535883, 0.004375230610558871]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.21880608903226967`, 0.007067374409269583], 
              "Accuracy" -> 
              PlusMinus[0.9516133287417685, 0.0037082221805819888`], 
              "EvaluationTime" -> 3.552554106305044*^-6, "TestSize" -> 23200, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.007660193067314169, 
              "TrainingMemory" -> 96389.09090909091, "ModelMemory" -> 
              5697.454545454546, "ExperimentCount" -> 10, "ModelUtility" -> 
              8.906647905179229, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.20651785958550692`, 0.015374179468049746`], 
                PlusMinus[0.2228628885721832, 0.010491149464787927`], 
                PlusMinus[0.2540970418199409, 0.06059808944439933], 
                PlusMinus[0.19625191705076497`, 0.009673133902791418], 
                PlusMinus[0.24866832665524619`, 0.015688267213676], 
                PlusMinus[0.22568592804591361`, 0.011215499672570264`], 
                PlusMinus[0.2399823953617594, 0.011518048608949451`], 
                PlusMinus[0.21904734548282154`, 0.01730888903042131], 
                PlusMinus[0.229514274494754, 0.010191048434173818`], 
                PlusMinus[0.20562268551520363`, 0.008264939926826672]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9551468082358636, 0.005452800606459308], 
                PlusMinus[0.9467010053243502, 0.004079795970068813], 
                PlusMinus[0.9235745076474945, 0.027737924124658], 
                PlusMinus[0.9565508474662484, 0.0037096511691492064`], 
                PlusMinus[0.9408660546808066, 0.006178611472511836], 
                PlusMinus[0.951963761793196, 0.003884820949978858], 
                PlusMinus[0.9501843300421827, 0.003942330288857573], 
                PlusMinus[0.9602079501601422, 0.005144132782757277], 
                PlusMinus[0.9423515730030289, 0.004218296913822085], 
                PlusMinus[0.9570532643937235, 0.003688276241762125]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.12164813721272336`, 0.01601299943826318], 
              "Accuracy" -> 
              PlusMinus[0.9700680590081493, 0.00346227719503869], 
              "EvaluationTime" -> 6.266189374828917*^-6, "TestSize" -> 19500, 
              "TrainingSize" -> 1000, "TrainingTime" -> 0.01452550934150321, 
              "TrainingMemory" -> 186604.8, "ModelMemory" -> 
              6051.199999999999, "ExperimentCount" -> 9, "ModelUtility" -> 
              27.710467089771207`, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.25123300594165743`, 0.0956384147008695], 
                PlusMinus[0.1185238567008926, 0.010909397682118219`], 
                PlusMinus[0.10908937346862076`, 0.01107110716969354], 
                PlusMinus[0.11206627859085772`, 0.0055689407916908506`], 
                PlusMinus[0.12299013410608796`, 0.008142156454613829], 
                PlusMinus[0.098152622035382, 0.031879799752752465`], 
                PlusMinus[0.1386822957221864, 0.006841728887477503], 
                PlusMinus[0.1716203080074826, 0.03923021993603346], 
                PlusMinus[0.14652176049117782`, 0.02879107491573149]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9433764878455144, 0.024522640311738453`], 
                PlusMinus[0.9689386042904333, 0.004614105429724479], 
                PlusMinus[0.9707214441156302, 0.00449466691770289], 
                PlusMinus[0.9744361834857095, 0.002011468946164286], 
                PlusMinus[0.9635214060266102, 0.0034176936765564756`], 
                PlusMinus[0.9532774779445243, 0.022681090008461333`], 
                PlusMinus[0.968368652852971, 0.0022281409028859895`], 
                PlusMinus[0.9674884088475817, 0.011061188334979889`], 
                PlusMinus[0.962106987435596, 0.011713607834830764`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.0647273203096871, 0.006267296380827394], "Accuracy" -> 
              PlusMinus[0.9804249737289006, 0.0012045659080104343`], 
              "EvaluationTime" -> 4.303026756688093*^-6, "TestSize" -> 14600, 
              "TrainingSize" -> 6000, "TrainingTime" -> 0.05965631737609024, 
              "TrainingMemory" -> 945704., "ModelMemory" -> 6640., 
              "ExperimentCount" -> 2, "ModelUtility" -> 99.21815881571757, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.05659139402559535, 0.005708366061732601], 
                PlusMinus[0.06766218573246845, 0.0034284862239151457`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9806192136110247, 0.002555794862272268], 
                PlusMinus[0.9803702650306777, 0.001356391252631034]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.0647315005526132, 0.004399428368114907], "Accuracy" -> 
              PlusMinus[0.9839936689606816, 0.0012152406310135127`], 
              "EvaluationTime" -> 3.3709044892229724`*^-6, "TestSize" -> 
              13168, "TrainingSize" -> 26338, "TrainingTime" -> 
              0.29761625430016675`, "TrainingMemory" -> 
              4.0950506666666665`*^6, "ModelMemory" -> 7664., 
              "ExperimentCount" -> 2, "ModelUtility" -> 100.33849612889098`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.06294904390578451, 0.005515326149940574], 
                PlusMinus[0.06667803361423244, 0.005763583694784531]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9844432062516849, 0.0015671137653352311`], 
                PlusMinus[0.9835178837329138, 0.001612215678629762]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 3.3709044892229724`*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.0647315005526132, 0.004399428368114907], 
             "ModelMemory" -> 7664., "TrainingMemory" -> 
             4.0950506666666665`*^6, "TrainingTime" -> 0.3783884039004336], 
           "Index" -> 1]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"Value"}, {
              TypeSystem`Atom[Integer]}], 2]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            5], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 1], 
        Association["ID" -> 211883789101316]], "MaxTrainingSize" -> 32922, 
      "LastReportingTime" -> 3.7650109475546433`17.328341232500303*^9, 
      "PreprocessorEvaluationTime" -> 3.5314758808149`3.*^-6, 
      "PreprocessorMemory" -> 39928, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 50, "TimeBudgets" -> 0.24780800000000014`, 
          "ElapsedTimes" -> 0.6406126999999999, "ExperimentCounts" -> 9], 
         Association[
         "TrainingSizes" -> 250, "TimeBudgets" -> 0.3097600000000001, 
          "ElapsedTimes" -> 0.2968546, "ExperimentCounts" -> 10], 
         Association[
         "TrainingSizes" -> 1000, "TimeBudgets" -> 0.3872000000000002, 
          "ElapsedTimes" -> 0.406236, "ExperimentCounts" -> 9], 
         Association[
         "TrainingSizes" -> 6000, "TimeBudgets" -> 0.4840000000000001, 
          "ElapsedTimes" -> 0.4999831, "ExperimentCounts" -> 2], 
         Association[
         "TrainingSizes" -> 26338, "TimeBudgets" -> 0.6050000000000001, 
          "ElapsedTimes" -> 0.9374678999999999, "ExperimentCounts" -> 2]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 5], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[211892379035908]], "ID" -> 
         211896674003204]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {620}, "ID" -> 
           4523229796654273697], "f2" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {196}, "ID" -> 
           2781649588339208262]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 3.453030190285498, "MaxTrainingMemory" -> 11649936, 
      "DataMemory" -> 6057728, "FunctionMemory" -> 128448, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2019, 4, 23, 12, 22, 28.1483738`9.20202822245297}, 
        "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.765020382463892*^9, 3.7650204346353006`*^9}, 
   3.765025348195247*^9},
 CellLabel->"Out[57]=",ExpressionUUID->"6861b0c4-6af8-48e4-9ac8-42258d82245f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"cmthermo1", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"cThermo1", ",", "validation"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"cmthermo1", "[", "\"\<Accuracy\>\"", "]"}], "\[IndentingNewLine]", 
 RowBox[{"cmthermo1", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.765025356320037*^9, 3.7650253609135947`*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"19e3014c-8ed0-4140-81e5-603c58ef5c85"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierMeasurementsObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"DecisionTree\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["3658", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"DecisionTree\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["3658", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["4", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  RowBox[{
                   "0.9844177145981410915`7.175157006981746", "\[PlusMinus]", 
                    "0.0020480606207165719`2."}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierMeasurementsObject[
   Association["Model" -> ClassifierFunction[
      Association[
      "ExampleNumber" -> 32922, "ClassNumber" -> 4, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Numerical"], "f2" -> 
              Association["Type" -> "Numerical"]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["Transpose", 
                  Association["FeatureNumber" -> 2]], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Numerical", "Numerical"}, 
                   "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> 
                   Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
            Association[
             "(f1f2)" -> 
              Association["Type" -> "NumericalVector", "Weight" -> 2]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f2" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "(f1f2)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2]], 
                "Version" -> {11.3, 0}, "ID" -> 5999172908886121309]], 
              MachineLearning`MLProcessor["ImputeMissing", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                Association[
                 "(f1f2)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2]], 
                "Imputer" -> (DimensionReducerFunction[
                  Association[
                  "ExampleNumber" -> 32922, "Imputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {535.5528218212745, 440.05184982686353`}, 
                    "Method" -> "Naive", "VectorLength" -> 2, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {535.5528218212745, 440.05184982686353`}, 
                    "StandardDeviation" -> {417.3827940577992, 
                    309.75112432578936`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 2, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                   MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                    True, "Invertibility" -> "Perfect", "Missing" -> 
                    "Allowed"]], "Processor" -> 
                   MachineLearning`MLProcessor["Identity"], "Padder" -> 
                   MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                   MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                   "Model" -> 
                   Association[
                    "Matrix" -> {{-0.7071067811865474, -0.7071067811865476}, {
                    0.7071067811865476, -0.7071067811865474}}, "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {535.5528218212745, 440.05184982686353`}, 
                    "StandardDeviation" -> {417.3827940577992, 
                    309.75112432578936`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 2, "Method" -> "Linear"], 
                   "PerformanceGoal" -> Automatic, "Invertibility" -> 
                   "Approximate", "Log" -> 
                   Association[
                    "TrainingTime" -> 0.01616014054378608, 
                    "MaxTrainingMemory" -> 1106640, "DataMemory" -> 526904, 
                    "FunctionMemory" -> 21760, "LanguageVersion" -> {11.3, 0},
                     "Date" -> 
                    DateObject[{
                    2019, 4, 23, 12, 22, 24.7734864`9.14656205332644}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                  PerformanceGoal -> "Quality"]& ), "Method" -> 
                "DimensionReduction", "VectorLength" -> 2, "Output" -> 
                Association[
                 "(f1f2)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2]], 
                "Type" -> "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
                3183744061192450103]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "(f1f2)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2]], 
                "Mean" -> {535.5528218212745, 440.05184982686353`}, 
                "StandardDeviation" -> {417.3827940577992, 
                 309.75112432578936`}, "Output" -> 
                Association[
                 "(f1f2)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2]], 
                "Version" -> {11.3, 0}, "ID" -> 6290908127098961799]]}, 
            "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            True, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 1716634207928958562]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association["r1" -> 1, "r2" -> 2, "r3" -> 3, "r5" -> 4]}, 
                "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
                7986107592405538806, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 7038916035376012904]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 4], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]},
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
         "Marginal" -> 
         Association[
          "r1" -> 0.3640891696531616, "r2" -> 0.3728664277470692, "r3" -> 
           0.13196258276134362`, "r5" -> 0.13108181983842557`]], "Prior" -> 
       Automatic, "Utility" -> 
       SparseArray[
        Automatic, {4, 5}, 0., {
         1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       "Quality", "BatchProcessing" -> Automatic, "Model" -> 
       Association["Tree" -> MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> 
            RawArray["Integer16",{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
              1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
              2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
              2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
              2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}], 
            "NumericalThresholds" -> CompressedData["
1:eJwdx11Ik3EYxuFNa46hlmHqkCLXBGfZYGFG7H3/mSW2CtqSTQuTaclYmuXS
WoZNp0VqijpB1OZMkXRuaEVp7H0eUsM+/CAkthmVmpp1YGU17SDI7eD6cd9R
WfmKHD8Wi6XjrkehvppYUKDWn+J4z3l17l5JLnt9GtfxIm/jzfoKZKfl4HNh
Bh4CGS7rabQnx2O5UIzpfiIUzwjwRy8fp1vCsE+/2eeWioeXkwMwWcjG/Rs8
4BU89x0G732G2uIPcCDhLSysjECdfQCk2l7YktIFX6It0DDbABq8C6HFpTDV
XwQleVoQic7Cu3k5GCxHwBkeB3G1oT5uGRe4QWtMZvknJlBnZ7K/Nfrohq8z
Ox4eZSYsEYxn+6SjfS3d8btuj9Sr7cKgVDAaRBW6aGr0az61j9NN3Qmfpi6a
NtImiYD0JEWTqoxH2HK8HwdjbfiSb0UntxsXV7vQs9iJoS8suPOxGRPrm/Fk
aRPmZ5qwdXcNWiOr0b1UgUtOI+6SFaOGo8POIS3OlmT5SPlKPL0qx5UTFIp5
8figTIj+2yLwoHsT3mgMQHumB2JcC/AxcBxUFQ4IetYBw8uVcG3iCswnJMEr
Phu0nDamXa50+M8rqNi2MaovL4Z+U6WlxSE19JMmM80695QO1rnoyLK/dJE2
hKRVbyX/fkYRo15Cxg8fIwU9KpI6doY4Ci+R+yUGopyqJAl/aojF3EGy56wk
9ZeNcFMGiKN1iNhsI8Qw85qo/SZJmMpNOJr35D92cBKl
             "], 
            "NominalSplits" -> {}, "Children" -> CompressedData["
1:eJwVj2l4CAQAhl8Sm/t83DK3EAvLWUbSXLG5S9rYEdqyjbXssrlyRI5ylHJf
uQqRbuXKVblF5T6KSuWK1/bj+97ne95fX1BUQnhMfiApILfCI1NCExMjUyMC
c0dYfHJ0bHRicEhcns/JTR6PedR8/OmTFOC2t7xpKA/zNBv92J/80ad4lo78
ayf+8YZ/e8XOFOV/i9GFEnTjgPs953Nc8Lyl6UF3ehJGWz5yg+vtTQX2OMe+
VGKd/RjAO75tHwayy52+yGoH8aszjaQGUdRkCLWIZrmxrHSFdfjWZS41hleZ
4mQXu8hXiKcRCaSb5ggSacI3vkRLcsz2S78whddozmk/9zNfJ41UWpFFm9y/
x23NXz6O5ueOD1GQIx62Hdc9ZCHaE0AH/vOaf1iYIvzuVZ+hOIGU4wcPetlL
XrQUXSlDScLZ517Pesb73rMsd/3e8kRQkXnOtRdVGGOWldntWqvSn+dZ44f+
5iO8QBCznWV1dliNR8k0wxm+5XSnOZhVfmddahPHm061Hi9Tn+0usQFDacgw
HmOSbzjRCS70A4eTRGPGO86xBvOLX/uVyTRjJCE05X0X+J6jaMETnHKbnzqa
dLa6xU/cbAY/m8kYTnrCd51vNpt8AGAHEMI=
             "], 
            "LeafValues" -> CompressedData["
1:eJxdU81KA0EMzsxOf7attqtSsaIiiNaCFRUKPfYg4sVDxZsIFWsVpIVWEO99
AMGDbyEKevQVfBzPbjNJdmZZ5kvyZSbJZLKb16PurQaAST6Gbu+pMx73ns+j
2LgYTu4Hw/7N6fCxP+iPD1p3s33TeJl4Kfx+Kwoi0hW8IFYRG3XLrZMvgAxp
e4igNcojOf1NcgdxjiwdZ1PylaFEnoZwVYpvrSzt52xnmvdZJi9xmyhD2Rki
Pij251Aa0OR/N1abCvODe+tSyQedMFQR17SI+Lo2ww3Jz1HyXr0aap7NN9PE
RB7rakHq3KeyGZrCfHmR2sKXEI+ponmprBXal7B20Vg2R3aGOsQvrGEXZYH8
q6mbGqltG/FE+f4s+pPXTrTA6dPMWqE6rF2j84EwW1Qf36Pi5S9I3DeSl+C+
9B/wvGSc7ijYlzwcdykVz9Z5lbpXKC9kiD8kaZxT7h8Skuwo2xeOX3YwmbN0
x3juihKX4y17fUw62AY/D2v+ZKYnMpnABa8+259/ZVkgMw==
             "], "RootIndex" -> 
            22, "NominalDimension" -> 0]], "Processor" -> 
         MachineLearning`MLProcessor["Values", 
           Association[
           "Info" -> Association[
             "(f1f2)" -> 
              Association["Type" -> "NumericalVector", "Weight" -> 2]], 
            "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], "Method" -> 
         "DecisionTree", "Options" -> 
         Association[
          "DistributionSmoothing" -> 
           Association["Value" -> 1, "Options" -> Association[]], 
           "FeatureFraction" -> 
           Association["Value" -> 1, "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            PlusMinus[0.0647273203096871, 0.006267296380827394], "Accuracy" -> 
            PlusMinus[0.9804249737289006, 0.0012045659080104343`], 
            "EvaluationTime" -> 4.303026756688093*^-6, "TestSize" -> 14600, 
            "TrainingSize" -> 6000, "TrainingTime" -> 0.05965631737609024, 
            "TrainingMemory" -> 945704., "ModelMemory" -> 6640., 
            "ExperimentCount" -> 2, "ModelUtility" -> 99.21815881571757, 
            "MeanCrossEntropyHistory" -> {
              PlusMinus[0.05659139402559535, 0.005708366061732601], 
              PlusMinus[0.06766218573246845, 0.0034284862239151457`]}, 
            "AccuracyHistory" -> {
              PlusMinus[0.9806192136110247, 0.002555794862272268], 
              PlusMinus[0.9803702650306777, 0.001356391252631034]}, 
            "Configuration" -> {
             "DecisionTree", "DistributionSmoothing" -> 1, "FeatureFraction" -> 
              1}, "FinalTrainingSize" -> 32922], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
             "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Vector[TypeSystem`AnyType, 2], 
             TypeSystem`Vector[TypeSystem`AnyType, 2], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], 
           Association["ID" -> 211888084068612]], "Configurations" -> 
         Dataset[
           Association[
           Association[
             "Value" -> "DecisionTree", "Options" -> 
              Association[
               "DistributionSmoothing" -> Association["Value" -> 1], 
                "FeatureFraction" -> Association["Value" -> 1]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.47934561610554377`, 0.030976351559166494`], 
                 "Accuracy" -> 
                 PlusMinus[0.878965928429053, 0.013668803843708355`], 
                 "EvaluationTime" -> 4.634874594117635*^-6, "TestSize" -> 
                 27100, "TrainingSize" -> 50, "TrainingTime" -> 
                 0.006373735965507242, "TrainingMemory" -> 69290.4, 
                 "ModelMemory" -> 5616., "ExperimentCount" -> 9, 
                 "ModelUtility" -> 1.832206710591026, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.428943468288953, 0.012603390806817681`], 
                   PlusMinus[0.6108370037411591, 0.02179456170422529], 
                   PlusMinus[0.4565637986263596, 0.023341309156432063`], 
                   PlusMinus[0.5846462269114641, 0.015093921843463231`], 
                   PlusMinus[0.4978898272134837, 0.013384226750501254`], 
                   PlusMinus[0.40849706640589706`, 0.010286327491140551`], 
                   PlusMinus[0.6591775634633044, 0.015272332409999093`], 
                   PlusMinus[0.4147598705326332, 0.010987462113803768`], 
                   PlusMinus[0.47574115121980115`, 0.008503705356285276]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.8980464522742182, 0.005460516642562529], 
                   PlusMinus[0.8368181305470841, 0.009577298831315324], 
                   PlusMinus[0.8626545804045727, 0.013126151265372829`], 
                   PlusMinus[0.8537120667680712, 0.006364901674172598], 
                   PlusMinus[0.8732115849867125, 0.005999847432767676], 
                   PlusMinus[0.925662736426255, 0.004747292524443118], 
                   PlusMinus[0.7921059270169554, 0.007301160257333727], 
                   PlusMinus[0.9114802398903762, 0.005129250134320915], 
                   PlusMinus[0.8601875602535883, 0.004375230610558871]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.21880608903226967`, 0.007067374409269583], 
                 "Accuracy" -> 
                 PlusMinus[0.9516133287417685, 0.0037082221805819888`], 
                 "EvaluationTime" -> 3.552554106305044*^-6, "TestSize" -> 
                 23200, "TrainingSize" -> 250, "TrainingTime" -> 
                 0.007660193067314169, "TrainingMemory" -> 96389.09090909091, 
                 "ModelMemory" -> 5697.454545454546, "ExperimentCount" -> 10, 
                 "ModelUtility" -> 8.906647905179229, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.20651785958550692`, 0.015374179468049746`], 
                   PlusMinus[0.2228628885721832, 0.010491149464787927`], 
                   PlusMinus[0.2540970418199409, 0.06059808944439933], 
                   PlusMinus[0.19625191705076497`, 0.009673133902791418], 
                   PlusMinus[0.24866832665524619`, 0.015688267213676], 
                   PlusMinus[0.22568592804591361`, 0.011215499672570264`], 
                   PlusMinus[0.2399823953617594, 0.011518048608949451`], 
                   PlusMinus[0.21904734548282154`, 0.01730888903042131], 
                   PlusMinus[0.229514274494754, 0.010191048434173818`], 
                   PlusMinus[0.20562268551520363`, 0.008264939926826672]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9551468082358636, 0.005452800606459308], 
                   PlusMinus[0.9467010053243502, 0.004079795970068813], 
                   PlusMinus[0.9235745076474945, 0.027737924124658], 
                   PlusMinus[0.9565508474662484, 0.0037096511691492064`], 
                   PlusMinus[0.9408660546808066, 0.006178611472511836], 
                   PlusMinus[0.951963761793196, 0.003884820949978858], 
                   PlusMinus[0.9501843300421827, 0.003942330288857573], 
                   PlusMinus[0.9602079501601422, 0.005144132782757277], 
                   PlusMinus[0.9423515730030289, 0.004218296913822085], 
                   PlusMinus[0.9570532643937235, 0.003688276241762125]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.12164813721272336`, 0.01601299943826318], 
                 "Accuracy" -> 
                 PlusMinus[0.9700680590081493, 0.00346227719503869], 
                 "EvaluationTime" -> 6.266189374828917*^-6, "TestSize" -> 
                 19500, "TrainingSize" -> 1000, "TrainingTime" -> 
                 0.01452550934150321, "TrainingMemory" -> 186604.8, 
                 "ModelMemory" -> 6051.199999999999, "ExperimentCount" -> 9, 
                 "ModelUtility" -> 27.710467089771207`, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.25123300594165743`, 0.0956384147008695], 
                   PlusMinus[0.1185238567008926, 0.010909397682118219`], 
                   PlusMinus[0.10908937346862076`, 0.01107110716969354], 
                   PlusMinus[0.11206627859085772`, 0.0055689407916908506`], 
                   PlusMinus[0.12299013410608796`, 0.008142156454613829], 
                   PlusMinus[0.098152622035382, 0.031879799752752465`], 
                   PlusMinus[0.1386822957221864, 0.006841728887477503], 
                   PlusMinus[0.1716203080074826, 0.03923021993603346], 
                   PlusMinus[0.14652176049117782`, 0.02879107491573149]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9433764878455144, 0.024522640311738453`], 
                   PlusMinus[0.9689386042904333, 0.004614105429724479], 
                   PlusMinus[0.9707214441156302, 0.00449466691770289], 
                   PlusMinus[0.9744361834857095, 0.002011468946164286], 
                   PlusMinus[0.9635214060266102, 0.0034176936765564756`], 
                   PlusMinus[0.9532774779445243, 0.022681090008461333`], 
                   PlusMinus[0.968368652852971, 0.0022281409028859895`], 
                   PlusMinus[0.9674884088475817, 0.011061188334979889`], 
                   PlusMinus[0.962106987435596, 0.011713607834830764`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.0647273203096871, 0.006267296380827394], 
                 "Accuracy" -> 
                 PlusMinus[0.9804249737289006, 0.0012045659080104343`], 
                 "EvaluationTime" -> 4.303026756688093*^-6, "TestSize" -> 
                 14600, "TrainingSize" -> 6000, "TrainingTime" -> 
                 0.05965631737609024, "TrainingMemory" -> 945704., 
                 "ModelMemory" -> 6640., "ExperimentCount" -> 2, 
                 "ModelUtility" -> 99.21815881571757, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.05659139402559535, 0.005708366061732601], 
                   PlusMinus[0.06766218573246845, 0.0034284862239151457`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9806192136110247, 0.002555794862272268], 
                   PlusMinus[0.9803702650306777, 0.001356391252631034]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.0647315005526132, 0.004399428368114907], 
                 "Accuracy" -> 
                 PlusMinus[0.9839936689606816, 0.0012152406310135127`], 
                 "EvaluationTime" -> 3.3709044892229724`*^-6, "TestSize" -> 
                 13168, "TrainingSize" -> 26338, "TrainingTime" -> 
                 0.29761625430016675`, "TrainingMemory" -> 
                 4.0950506666666665`*^6, "ModelMemory" -> 7664., 
                 "ExperimentCount" -> 2, "ModelUtility" -> 
                 100.33849612889098`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.06294904390578451, 0.005515326149940574], 
                   PlusMinus[0.06667803361423244, 0.005763583694784531]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9844432062516849, 0.0015671137653352311`], 
                   PlusMinus[0.9835178837329138, 0.001612215678629762]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 3.3709044892229724`*^-6, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.0647315005526132, 0.004399428368114907], 
                "ModelMemory" -> 7664., "TrainingMemory" -> 
                4.0950506666666665`*^6, "TrainingTime" -> 0.3783884039004336],
               "Index" -> 1]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               TypeSystem`Struct[{"Value"}, {
                 TypeSystem`Atom[Integer]}], 2]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "TrainingSize", "TrainingTime", "TrainingMemory", 
                 "ModelMemory", "ExperimentCount", "ModelUtility", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 
                 TypeSystem`Vector[
                 TypeSystem`AnyType, TypeSystem`AnyLength]}], 5], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 1], 
           Association["ID" -> 211883789101316]], "MaxTrainingSize" -> 32922, 
         "LastReportingTime" -> 3.7650109475546433`17.328341232500303*^9, 
         "PreprocessorEvaluationTime" -> 3.5314758808149`3.*^-6, 
         "PreprocessorMemory" -> 39928, "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 50, "TimeBudgets" -> 0.24780800000000014`, 
             "ElapsedTimes" -> 0.6406126999999999, "ExperimentCounts" -> 9], 
            Association[
            "TrainingSizes" -> 250, "TimeBudgets" -> 0.3097600000000001, 
             "ElapsedTimes" -> 0.2968546, "ExperimentCounts" -> 10], 
            Association[
            "TrainingSizes" -> 1000, "TimeBudgets" -> 0.3872000000000002, 
             "ElapsedTimes" -> 0.406236, "ExperimentCounts" -> 9], 
            Association[
            "TrainingSizes" -> 6000, "TimeBudgets" -> 0.4840000000000001, 
             "ElapsedTimes" -> 0.4999831, "ExperimentCounts" -> 2], 
            Association[
            "TrainingSizes" -> 26338, "TimeBudgets" -> 0.6050000000000001, 
             "ElapsedTimes" -> 0.9374678999999999, "ExperimentCounts" -> 2]}, 
           
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 5], 
           Association[
           "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
              Dataset`DatasetHandle[211892379035908]], "ID" -> 
            211896674003204]]], "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {620}, "ID" -> 
              4523229796654273697], "f2" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {196}, "ID" -> 
              2781649588339208262]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> 
            False]], "TrainingTime" -> 3.453030190285498, "MaxTrainingMemory" -> 
         11649936, "DataMemory" -> 6057728, "FunctionMemory" -> 128448, 
         "LanguageVersion" -> {11.3, 0}, "Date" -> 
         DateObject[{2019, 4, 23, 12, 22, 28.1483738`9.20202822245297}, 
           "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association["Input" -> CompressedData["
1:eJxN3XvUleWZHvD9ffvjA0zERExBh+gIGUyKWNB6qJglWA9LdIAUtYolOoAV
rJgFZJDUwyAZMCNm0FRN1TTA8rDEFEgVR3E8jOIoU8V6GNBCUsEGXUGjpoFk
0BH7/Hiud23/2Guz3+89PM99X/d1Xffzvntz5LTv/Lurulut1vgBrZb3E8vr
0K5Wa2d5TSwbTutptb5Wto0pn39Z3v+43WpdXl67y+c3yuuE8nq+fL6z7Nub
/X5VPr9Q3j8qr+Fl+93l/dnyOrVs/7jss6psa/et511W/r25bN9e/n5AeS0t
r2Wu0V3Pc175PKddr/N22f/4sv2a8nl+eT+5vA8t26eXfz9aXsvL69Py+mp5
HVheQ8vrT8o+x5Xjbi6vpeXzW+V1dXl9WI4bVP72szK/b5a/3VS2faG8v1Ze
W8v2A1r1Oi+W7aeUff+q/PvSsm1keW0ony8s22/L+HaWf68v279d3v+2bDu3
VeNxb3n9Zfn8Fecs/55bXlt663mWlOPWldeIsu0n5fNB5fVw+fepmYf375Rt
Z5R9dpd/Dy7vB7drHOXh6PK+qavO64Xy9419ajyfL/++oby+XPY9srz2ln1e
L9v3lNfa8u/DynzPKv/+url21es+U/a7u7zP66rHm99zZb/y1vpp8nBH+ffL
5TWsvK4qf+gpr9vL3x5I/haV7c+Wf88s28d213mJ/2dl+2dlW7/y74fKfgvL
+0nmmjjc2qcTV9dZk7zM71u3w+PvW/W84v1E4iK+8ipPDyUucGI8p7crrt7K
+zFlnyPL+6zgS35PL59/1KrzXlL+fVfZ/l55/REsls9HlX8PThxHlNeNfep5
jOf48nlcq+JsQNlvSLvOV3weNLby+ZxWzaPriNOvyuva4PKl8ppTXu+UY+8s
8/xW2ffF8n5Bef9FeX1SXru6al5Hddd4b81495V/39Jd4z2hXOfV8vl75d/X
lvfHy/s93RUHA8vnfyjv77VqHfv8g/LvS8qrp3ye16p4/2riPTH1t+RzcTi7
vH6XeBr/yLJ9RzkGMMzjiFatO3k6pW5uPSWn5R/Hpa6Wl39fVt6vy7zg2Ps/
BWd3Ji7d5Rp9yud/AWtddZ7G9y/bFa/yaN5XlteerpqfLcnT6PK+LXGZm/HD
2eHl/Z1WrUf1fkV535x6dh11e3Z5XRScrg1POV59jSuv/uX1YN4vKa/Fas34
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
uBvXp6OjxrUpPEd38Zh1TM/1ws/AzE/ePw7vi4/+yWf3v93nomf8/vm5/j3x
gfDs73imK+ttx0Yfro0+qDd9ms8Phb/hZ3r6vDdSZ/KIZ8RdPIx/WHBNJ/Ee
Xng79789J9Sb/MHhLZmfPMEVvJmnvghPvJP4qGf1Zz+8C1f8IH+1LD4an9M5
dbMjzxPtSF7UifWkr6bfWJ766Z/PfBJ8nJP+jC7sTp2clfozXv0HvtwVfK3P
c2bw8m72uzM+obmPBkfOPyM6eVzqaWH8FB3A1/yevpueGK/7vPSWv6PLfLbr
bkyc6BR80rt1wQ99MZ4ngzN1jP/gAi8bj/tSfPeVqVf3nQ7J9w4GBH/GaR16
X/jZ+tJBOe572V9c5M+46PQN4UO8CPdTwkMbM+6Hw0fWC/gD62LqWxz1iXh/
b/jv9PDarsTDdfGDPndz/Cp8XhS+Ne53g0M8cFZPJ//W2zzXY7zWBY2LXuD/
odEh+Hk1dcFnwrV65cvXBn/yaj1kQurIetyM4NP61f2Jk/OZ1xXhM+vz6gDP
4ofVqSc89W7wpd7gGK/TZ3qON/DjDeELeRyY4w9MXOmh9dh1Ga+6uyz4NU86
T//hkv96LPpGJ/CC4/iKP0n/SNfwyOV9a/zoJv90d+Iu/taPTwnuN2X++Gdn
+AAfWX8wLzg2DrwgHovC59YR8Dd/CN/uC+Fh94NOCn/CGb3ji+EJb3waXlaH
jluS/MOddR/j56P4yLnhfesw/PQlwcnrqQd4VJfqyHj4S35F//xo387zOvDc
L/VwYvIpzvy4+534X/26nnU//ZG65ZOWhw+t4+AvdQ+f1ovl5dHwnXrTN9Mf
fcyazEsdr4xe6YfwgHmIx/77BXkubVN4WBz1C/clPyeHZ1ZH/4zPfHemrnel
H5sQPMuvfJkvvjLfo8J79HhJ+gD5L3/e7+P212Ge95iZ+e8ML9Nr41Zv/MXC
XMd9WjpCz/TB+gF1/3ziCJ/4XL3hc8+9wgV/qD+Aa/pzTfQXr9Gfe3K/d1nD
U9ED64qeZ/g0x+MPuBD341OP+hTrL6PDU/RF/eIJ/lufQbfUz5Dws/nqozaE
f/kJ9XFl5ql+XBcOrCOpV/3rNVk/HZ31JPl1HX1mV+rk4/Ch/vEL4Qn10pV8
80Pi8V7quMk3XMEPXpBX63l8vvU8/YO6W5u648fU7XPxARdl3s90d74XgH/4
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
fz0+3bqV/lI90cXByeNFycui1BN9Mx/rJCtbdX3l56kn/dex0Q/xME7x2v89
yFblkeO7O7+roG/Eg3RLnuGa33E/gF8SL/5P36Sfxx+uy8fc1N25L6n+rEOf
HF9wT/oo9z9WtKqOmg8doMN8w4N5vs5xzbqAdTj4EBd90BGJEx7m2/TDy8J7
+E88FocfnOcrySP/7Dojwx/wQLfUz47Mlx/np53Xet4nWWehi/BNT7emX3Sf
7Pl8D5k+6Q/4GHWq73w629Xv3vD++OB4fZ7Xct550R370w9x4Nc95z47999c
96qMH9/CxVdSB3jomvDUH9qVR6dlfupyY3R5ZOLleq7LH1rfoucX5Tz9+tb5
0iu+/MbElz7py/kpfMvvOd++9FHqgl7CIVyK44fhFTj8aerWefTZcHNueMl1
piZ+6uis8C48nxg8nNfb+d2O86Jr9OiJjHdW9lNnn4RXm+9B86vWN/D3Mekb
1waX/NLw9OmXtioO3G+/M7oNJ/RTXqybHdjd+R6HdYwrExc8aF2bns5IvNWp
v387cfx94oA3rJOZ76HJ+9TggL7y//1SJ/TyqdQbXPFp+MLxzfqcvvmU4HdD
cPVK6n518ux4db27WX/OfVB8SefpFT1RL4Py7nrWB5vnDfgp/flDwf/SxFV/
ybfxe/wJvvu7+EXz1d8PC0/Mjn7CHT4aH96FUzj5X+2af/7CeW8Pn89OXOjG
sOgxntkYPpqZ+xHw4e90+drECX/9deoF33huT/3sfz4t59mTupsU3Tg6PDoh
vCd/fMzfZH6XJ1+jExc+Wp/rPPyfPpZ/0bdY13ks9SfPK/L+YvwUXTwzPP6H
+NMbejvf26S31iHpOx2Sb36l8UUXJL/3hw/4hhn5fbYFrc73W+FOP3NW8Nvw
v3qhz5cEl/Lxozz3LR9S4Hr40PXgmx/ZHh29OXwCry/3dH63C6+OCV4Hh/8m
pQ+UP30VvXWf1bjUK947PHlpvseoz6G3Dc7pAR0fG905LXXQSl7lm9+Sb7rj
/uST4Snj+Enq/43wrPV9x/MPfDweo5d8Cz/IL9IVx70XHKhvzyXoU/mxR8Ir
B2Xd5Gs9Hd+5/3mH3LfalnjAlTqjE/hGfbwSnRSPE9P/wBW84H91h7/V04rw
uvG8n3y5jnGLiz5Sf0cH1XUrPkTfymddm++z0hPr7SdEl9YknnRaP8Ifq8uJ
id9fB/982t7w6/jkTb/xYPIDL+bLtzTfh+Gv1ZV+3LrFZ8kzfNt+Y+pWHMYF
t8/FRx5e07u/n6CLk+MHHs+8h+Q4uKM/q1K/eMt61T2p41P7dvon56FX1k1/
EJ1/KLzBh8MfHrYOpd7fTnyb7yXYvj7Pj6hj8davui5cTEg/SJcXteq6Mj7s
TV0ZB7zRSfXUfG/tV+FtvvfI6O28XO+o8EJPeEVfJ28jwifPBPd01Pfr+Ar9
M/6im3BDh8zb+OYHV7/o01nn4Y/px/vhOXmgg+pge+67Ob9+0Xzo4MDE/YQ8
R8j/qWfnwwPXhR8fC/8bf+MHxcF5+JDfBUdD+nZw1vy+pesdELzTf/owJfWg
rsyPnokv3qBHu4IvPsN6lHrUD+APfZd4waV3dYGX8MDO/H1T5rGjVdcVHMfH
42F+YkP4AC6c33jo0cU9nd+twnP8xLTU78Jcp7n/Yjz6YetS9+V6e8J7cNr8
/iaeohuuQxfvim7gAcfpm/RL5ksHmueBm74bvsxD3ekvjfOL8d1Ppf8WH/Pc
l3ya1+LkSZ3Tfefna/hkvK1/wGP0jg/Ev7cFL1+OH9WnWt9ZEt6+p2/n9/f4
vG/lfhG+sW6t7/8o9UcXV+Z7FPzSbTk/3PGR1k1nJ+982PfhO32/8/M9GxNP
PA+Hk7Pfzujns8E1PaRzeBUhiKc835V4fJp5GYf+7Uf5/QQ8bR1sQ+rsi+FV
9a0+fa/a+U8OT6lLeZ2X51n/vt35vZzlmRccnNy3s76MP3xf1fng3bqr9cwH
owPPhxfVq3XzZh1J/G5KvuRVXbzQ23l+gX/h8/gn+s/P0qN3ky8+2/HWi9R9
89wdf0gH9ad89xnhTXU9MzzAL1uXfiH339T5fTnO+tfg1BN9MH580/jumZkf
Xfib4Mh17b8m+jU+8zw6/IlX6J284lW+p7mfiC/5MT5+dHArj+JyS1eHVx8J
79F7/P12cM6/6hesO+ABPmV5b+d7yq/E75+U87j/NShxg2M6dG98Kr5unjem
h/B+XeoNLvhHfmlMb+d+tH4FL4gHPsOrWxPPicEnvPKF9jPev4ifPi98ti18
gj8fjf8Urx3RMePflzjp+xZH/8xbXkam/td+7rlh/mVX+jP7vR+8fpK4qE/3
AfQ7rs9Xwte54e/me6vOh6/whPo2fvpnfz5scvRUXvkHej6uVf2Jzy8kjvKx
NXWL193H9DtcXwt+mt935KvgC+7W5/lRPHZo+Mf8b8vvg/EfIxNnfh1e8a79
u1JH8quP/nb07vj4kWuDm8vCNyOjc/iZDuDjodGpFa3a73m+ynmPzPceHWcd
1nrODzK//c9PZH1geuY/P/FSx833UxanPz0ix6lb+bCu9dXUzV1dnd8JlG/+
YGWr6vXHweXEzAv/0eWfhif4MLytf/ggPHVt4kCv4ZGveil8Zj6H5Hk148Iz
1j/dN6Nn7k/g7R3B8/3hffPCU/pV83g6PCe++tCv5Tx8NZ61PnRg8sIH8BH8
resuDs/ge/ozPnUhD/T86fC6fuLs1N31qWvz5SfxnLockbq/NnxmPf6c4Inu
6Nvk7e0cT8dnBMfwS8/nRT/oOvzqc/b78q56//Pk5NU6V/P9eXWij8Af+j96
NzQ+/YL0I+b5tZzPOsDa6Dy94kv+Nv2dusbT1nfpH7zxL7dGB6yn7F8Pyrqx
OoQfvsz88Bj/a5yXp06t6/Mt1r/0L/ri1cHvgODF8da1rBNtzXF4c0nmQXce
ii9SJ/yPdQM61PwuhXi9l/qEX7ourjdEP/jfIdGTOYnfET2ddbXmd8sGpv76
Jx+NTxSg38Svj02c23076/nwKZ/4ZEPw+/XUzw2pE7xnffT24JUevBZe3Z1x
qns+jT7vyfH84qXhLfXNX8GL+uTTxbH5PetvZB50bWHwTdfUrXE2v+ukHlz/
4/CJ8c5Jf0rn9Nnie3b8hHGuSzyfD2+ZnzqBO74Pz/Ah70QXxEm+H4huyYf1
YnxDvwb2dn6/sSt5wNOPBgf4kc4b34vp0/Qt38v6AtzTde/83Nzg9ZzgZHOu
i3/lHc/QN+se8ITPXNg4xWtm9OTO8KNx0F/4148syHN+f4iefha9vKKnc1+Q
D3oy9b+oVec/ObxgHeQnwQP/cHZwyAfsSh5HJ2/6GXz+UXhGvLdFZ46KDsyO
XtjOh/CNfN6Y3GfmL8V3SPh/anwk38B/r47/Vq+rM0/4xQN4clN4Gx71B1OC
Sz5Lnl6Nj+FvPafgvqK6cJzz4Wfjuz3rjequX3TI8fyXOlPfxn1g6hmO4PnV
PK8mn++lrvH04elTJ4cH8Da+Fy9691rGQxf4DzpineefEkd1PSL9kDyZv7oz
L3jhT8UdHvGz9Qx8Twfg3Dq+OF4enBwfXrswPDUxPhfe5ZX/Xhhd2f+96Pgk
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
       "], 
      "Output" -> {
       "r1", "r3", "r5", "r1", "r2", "r2", "r1", "r2", "r1", "r3", "r2", "r3",
         "r1", "r5", "r2", "r2", "r3", "r2", "r1", "r1", "r3", "r2", "r1", 
        "r2", "r2", "r2", "r5", "r1", "r2", "r3", "r5", "r2", "r1", "r1", 
        "r2", "r5", "r1", "r2", "r1", "r1", "r5", "r2", "r5", "r2", "r5", 
        "r3", "r2", "r1", "r2", "r2", "r1", "r1", "r2", "r1", "r1", "r5", 
        "r2", "r2", "r2", "r1", "r5", "r1", "r1", "r1", "r2", "r5", "r2", 
        "r1", "r1", "r1", "r2", "r1", "r3", "r2", "r1", "r3", "r2", "r5", 
        "r5", "r1", "r3", "r5", "r1", "r3", "r2", "r2", "r1", "r3", "r2", 
        "r2", "r2", "r2", "r3", "r2", "r1", "r3", "r2", "r1", "r2", "r5", 
        "r1", "r1", "r1", "r2", "r1", "r1", "r2", "r2", "r3", "r2", "r5", 
        "r5", "r1", "r3", "r2", "r2", "r3", "r1", "r2", "r2", "r2", "r1", 
        "r1", "r1", "r1", "r1", "r1", "r1", "r3", "r2", "r2", "r2", "r1", 
        "r2", "r2", "r1", "r1", "r5", "r2", "r1", "r1", "r2", "r2", "r2", 
        "r2", "r2", "r5", "r2", "r2", "r1", "r1", "r3", "r3", "r2", "r1", 
        "r2", "r2", "r2", "r2", "r1", "r3", "r1", "r1", "r1", "r2", "r5", 
        "r1", "r3", "r2", "r2", "r1", "r2", "r1", "r5", "r2", "r1", "r1", 
        "r2", "r1", "r1", "r2", "r2", "r1", "r2", "r5", "r2", "r3", "r2", 
        "r3", "r1", "r1", "r2", "r3", "r1", "r1", "r2", "r5", "r2", "r2", 
        "r1", "r5", "r1", "r3", "r2", "r2", "r2", "r3", "r2", "r1", "r2", 
        "r1", "r3", "r2", "r5", "r1", "r1", "r2", "r3", "r1", "r2", "r5", 
        "r3", "r2", "r2", "r1", "r1", "r2", "r2", "r5", "r1", "r5", "r1", 
        "r1", "r1", "r1", "r2", "r1", "r2", "r1", "r2", "r2", "r2", "r1", 
        "r2", "r2", "r1", "r2", "r2", "r1", "r1", "r3", "r2", "r1", "r3", 
        "r1", "r1", "r3", "r3", "r1", "r5", "r3", "r1", "r2", "r2", "r5", 
        "r2", "r3", "r2", "r1", "r1", "r2", "r5", "r2", "r2", "r3", "r2", 
        "r1", "r1", "r5", "r2", "r1", "r3", "r3", "r1", "r1", "r1", "r2", 
        "r3", "r1", "r2", "r2", "r1", "r1", "r1", "r1", "r1", "r5", "r2", 
        "r2", "r5", "r1", "r2", "r2", "r1", "r1", "r3", "r1", "r1", "r2", 
        "r1", "r1", "r2", "r2", "r3", "r3", "r2", "r1", "r5", "r2", "r3", 
        "r3", "r2", "r3", "r1", "r2", "r3", "r1", "r1", "r3", "r1", "r3", 
        "r1", "r1", "r1", "r1", "r1", "r2", "r3", "r5", "r2", "r1", "r2", 
        "r2", "r1", "r2", "r1", "r1", "r5", "r1", "r1", "r5", "r1", "r5", 
        "r5", "r5", "r1", "r2", "r1", "r2", "r2", "r2", "r5", "r2", "r3", 
        "r1", "r1", "r2", "r2", "r2", "r2", "r2", "r2", "r2", "r2", "r1", 
        "r1", "r1", "r3", "r1", "r5", "r1", "r2", "r1", "r5", "r1", "r2", 
        "r1", "r1", "r2", "r1", "r1", "r2", "r2", "r2", "r1", "r2", "r1", 
        "r1", "r5", "r3", "r1", "r5", "r2", "r1", "r1", "r1", "r5", "r5", 
        "r2", "r2", "r2", "r2", "r2", "r3", "r2", "r5", "r1", "r2", "r2", 
        "r2", "r1", "r1", "r2", "r2", "r1", "r5", "r2", "r3", "r3", "r2", 
        "r5", "r1", "r1", "r1", "r2", "r3", "r3", "r2", "r2", "r1", "r5", 
        "r2", "r2", "r1", "r5", "r2", "r2", "r2", "r1", "r2", "r5", "r1", 
        "r2", "r1", "r1", "r5", "r2", "r5", "r3", "r2", "r3", "r2", "r1", 
        "r2", "r2", "r3", "r1", "r3", "r2", "r2", "r1", "r2", "r5", "r1", 
        "r3", "r1", "r1", "r2", "r5", "r2", "r1", "r2", "r3", "r2", "r1", 
        "r2", "r1", "r5", "r2", "r2", "r5", "r1", "r2", "r2", "r1", "r2", 
        "r1", "r3", "r3", "r5", "r1", "r1", "r1", "r3", "r2", "r5", "r2", 
        "r1", "r5", "r2", "r2", "r1", "r1", "r3", "r1", "r1", "r5", "r1", 
        "r2", "r2", "r3", "r2", "r3", "r5", "r1", "r1", "r3", "r1", "r2", 
        "r5", "r5", "r2", "r1", "r3", "r3", "r2", "r2", "r1", "r1", "r2", 
        "r3", "r5", "r2", "r1", "r2", "r5", "r5", "r1", "r2", "r2", "r5", 
        "r1", "r1", "r5", "r1", "r3", "r1", "r3", "r3", "r1", "r2", "r2", 
        "r5", "r1", "r1", "r5", "r3", "r1", "r2", "r1", "r2", "r5", "r3", 
        "r1", "r3", "r2", "r1", "r3", "r5", "r1", "r2", "r3", "r2", "r5", 
        "r3", "r5", "r3", "r1", "r1", "r2", "r2", "r3", "r5", "r2", "r1", 
        "r1", "r1", "r3", "r1", "r1", "r3", "r2", "r1", "r1", "r5", "r2", 
        "r1", "r2", "r3", "r2", "r5", "r2", "r2", "r1", "r1", "r1", "r2", 
        "r5", "r3", "r2", "r1", "r2", "r5", "r2", "r2", "r3", "r1", "r3", 
        "r1", "r2", "r2", "r1", "r2", "r5", "r2", "r1", "r1", "r1", "r2", 
        "r1", "r1", "r2", "r2", "r2", "r3", "r2", "r2", "r1", "r1", "r2", 
        "r1", "r1", "r2", "r2", "r1", "r3", "r5", "r1", "r1", "r5", "r1", 
        "r2", "r1", "r5", "r5", "r5", "r2", "r3", "r2", "r1", "r1", "r2", 
        "r2", "r3", "r1", "r1", "r2", "r2", "r3", "r2", "r1", "r5", "r2", 
        "r2", "r1", "r1", "r1", "r3", "r1", "r1", "r1", "r1", "r2", "r3", 
        "r2", "r1", "r5", "r5", "r2", "r5", "r1", "r2", "r2", "r1", "r2", 
        "r2", "r2", "r2", "r3", "r1", "r1", "r5", "r1", "r1", "r1", "r1", 
        "r1", "r1", "r1", "r1", "r1", "r1", "r1", "r5", "r3", "r1", "r3", 
        "r2", "r5", "r5", "r3", "r3", "r5", "r1", "r3", "r2", "r3", "r1", 
        "r1", "r1", "r2", "r1", "r1", "r1", "r3", "r3", "r5", "r1", "r5", 
        "r1", "r2", "r2", "r1", "r2", "r1", "r2", "r3", "r2", "r1", "r2", 
        "r1", "r1", "r5", "r5", "r2", "r1", "r3", "r5", "r2", "r3", "r1", 
        "r1", "r1", "r2", "r1", "r2", "r5", "r1", "r1", "r2", "r1", "r2", 
        "r2", "r5", "r5", "r1", "r1", "r1", "r3", "r1", "r2", "r1", "r1", 
        "r2", "r3", "r2", "r2", "r1", "r1", "r5", "r2", "r5", "r1", "r3", 
        "r1", "r2", "r2", "r5", "r2", "r2", "r1", "r5", "r1", "r2", "r2", 
        "r2", "r1", "r3", "r5", "r3", "r2", "r2", "r1", "r1", "r2", "r2", 
        "r2", "r1", "r1", "r3", "r3", "r2", "r3", "r2", "r1", "r1", "r1", 
        "r2", "r2", "r2", "r1", "r5", "r2", "r1", "r2", "r2", "r2", "r1", 
        "r1", "r1", "r2", "r1", "r1", "r2", "r1", "r5", "r2", "r2", "r1", 
        "r3", "r1", "r2", "r1", "r5", "r1", "r3", "r1", "r3", "r1", "r2", 
        "r1", "r1", "r3", "r2", "r2", "r3", "r3", "r5", "r3", "r2", "r2", 
        "r2", "r1", "r2", "r5", "r1", "r5", "r1", "r2", "r1", "r3", "r2", 
        "r2", "r3", "r5", "r2", "r3", "r1", "r5", "r1", "r1", "r3", "r1", 
        "r3", "r1", "r2", "r2", "r3", "r2", "r1", "r5", "r2", "r2", "r1", 
        "r3", "r5", "r1", "r5", "r2", "r5", "r3", "r1", "r5", "r2", "r1", 
        "r3", "r1", "r1", "r2", "r2", "r2", "r2", "r2", "r1", "r2", "r5", 
        "r2", "r5", "r2", "r1", "r1", "r1", "r2", "r1", "r1", "r1", "r2", 
        "r2", "r3", "r2", "r2", "r1", "r3", "r2", "r2", "r2", "r1", "r3", 
        "r2", "r1", "r1", "r3", "r2", "r1", "r2", "r2", "r2", "r2", "r1", 
        "r3", "r1", "r1", "r2", "r2", "r2", "r1", "r2", "r2", "r1", "r2", 
        "r3", "r1", "r3", "r3", "r2", "r2", "r5", "r2", "r1", "r2", "r1", 
        "r3", "r2", "r5", "r1", "r1", "r2", "r3", "r1", "r2", "r3", "r5", 
        "r1", "r2", "r3", "r2", "r1", "r1", "r5", "r1", "r3", "r3", "r2", 
        "r1", "r2", "r3", "r1", "r1", "r3", "r1", "r2", "r2", "r2", "r2", 
        "r3", "r1", "r3", "r1", "r1", "r2", "r2", "r1", "r3", "r5", "r1", 
        "r5", "r1", "r1", "r1", "r2", "r2", "r1", "r1", "r1", "r3", "r1", 
        "r1", "r2", "r1", "r2", "r2", "r3", "r1", "r2", "r1", "r2", "r2", 
        "r1", "r1", "r2", "r2", "r1", "r2", "r1", "r1", "r1", "r2", "r1", 
        "r1", "r2", "r1", "r2", "r3", "r2", "r2", "r2", "r1", "r1", "r5", 
        "r1", "r2", "r3", "r3", "r1", "r1", "r3", "r2", "r2", "r2", "r1", 
        "r3", "r1", "r2", "r1", "r2", "r1", "r2", "r2", "r1", "r5", "r5", 
        "r2", "r5", "r1", "r2", "r1", "r5", "r1", "r2", "r5", "r2", "r2", 
        "r3", "r5", "r1", "r1", "r5", "r2", "r3", "r2", "r2", "r3", "r2", 
        "r5", "r1", "r3", "r3", "r5", "r1", "r2", "r3", "r2", "r2", "r5", 
        "r1", "r3", "r2", "r1", "r1", "r5", "r1", "r1", "r5", "r2", "r2", 
        "r3", "r1", "r2", "r2", "r5", "r1", "r3", "r5", "r2", "r5", "r2", 
        "r2", "r2", "r2", "r2", "r3", "r2", "r3", "r3", "r2", "r2", "r2", 
        "r1", "r2", "r1", "r5", "r5", "r2", "r5", "r2", "r1", "r2", "r2", 
        "r1", "r2", "r1", "r2", "r1", "r2", "r1", "r2", "r2", "r5", "r2", 
        "r3", "r2", "r1", "r3", "r1", "r3", "r5", "r1", "r1", "r3", "r5", 
        "r2", "r1", "r3", "r5", "r1", "r2", "r1", "r2", "r5", "r2", "r1", 
        "r3", "r1", "r1", "r5", "r2", "r5", "r1", "r2", "r5", "r3", "r2", 
        "r5", "r2", "r1", "r5", "r2", "r1", "r1", "r1", "r1", "r2", "r2", 
        "r2", "r2", "r3", "r5", "r2", "r5", "r1", "r2", "r1", "r3", "r1", 
        "r1", "r1", "r2", "r2", "r2", "r5", "r3", "r1", "r1", "r1", "r5", 
        "r1", "r5", "r2", "r2", "r2", "r1", "r1", "r1", "r2", "r2", "r3", 
        "r3", "r2", "r1", "r2", "r2", "r1", "r2", "r1", "r1", "r1", "r2", 
        "r2", "r1", "r1", "r3", "r1", "r2", "r1", "r1", "r1", "r2", "r2", 
        "r1", "r2", "r3", "r1", "r1", "r5", "r3", "r1", "r3", "r1", "r1", 
        "r5", "r2", "r1", "r1", "r5", "r1", "r2", "r1", "r1", "r3", "r3", 
        "r1", "r2", "r1", "r2", "r2", "r2", "r1", "r1", "r2", "r2", "r3", 
        "r2", "r2", "r1", "r2", "r3", "r2", "r2", "r1", "r1", "r2", "r1", 
        "r2", "r2", "r1", "r2", "r1", "r1", "r1", "r3", "r1", "r5", "r1", 
        "r2", "r1", "r2", "r1", "r1", "r2", "r2", "r1", "r2", "r5", "r3", 
        "r5", "r2", "r5", "r2", "r2", "r3", "r2", "r1", "r1", "r1", "r2", 
        "r1", "r5", "r1", "r2", "r2", "r2", "r1", "r1", "r2", "r2", "r3", 
        "r1", "r2", "r1", "r1", "r1", "r3", "r1", "r1", "r1", "r1", "r1", 
        "r2", "r1", "r2", "r1", "r2", "r1", "r2", "r1", "r2", "r3", "r1", 
        "r1", "r1", "r2", "r1", "r3", "r1", "r3", "r2", "r1", "r2", "r2", 
        "r2", "r1", "r2", "r2", "r3", "r2", "r5", "r5", "r1", "r1", "r2", 
        "r5", "r1", "r1", "r2", "r2", "r2", "r5", "r2", "r3", "r3", "r5", 
        "r2", "r5", "r1", "r1", "r3", "r2", "r5", "r2", "r1", "r1", "r2", 
        "r3", "r2", "r1", "r1", "r1", "r2", "r1", "r1", "r2", "r2", "r2", 
        "r1", "r2", "r3", "r1", "r2", "r2", "r2", "r3", "r1", "r1", "r1", 
        "r5", "r2", "r1", "r2", "r3", "r2", "r2", "r1", "r2", "r2", "r1", 
        "r1", "r5", "r2", "r2", "r5", "r3", "r2", "r2", "r2", "r1", "r5", 
        "r1", "r1", "r1", "r1", "r2", "r1", "r1", "r1", "r5", "r1", "r2", 
        "r1", "r1", "r1", "r2", "r2", "r1", "r1", "r2", "r2", "r3", "r1", 
        "r1", "r2", "r3", "r2", "r2", "r2", "r1", "r2", "r1", "r5", "r1", 
        "r1", "r1", "r1", "r3", "r2", "r2", "r1", "r5", "r3", "r1", "r2", 
        "r2", "r2", "r2", "r1", "r1", "r1", "r1", "r2", "r3", "r2", "r1", 
        "r5", "r1", "r3", "r1", "r3", "r1", "r5", "r1", "r1", "r1", "r3", 
        "r1", "r1", "r5", "r5", "r2", "r2", "r2", "r2", "r1", "r1", "r1", 
        "r3", "r1", "r3", "r3", "r1", "r5", "r1", "r2", "r5", "r3", "r5", 
        "r1", "r5", "r3", "r5", "r1", "r2", "r2", "r5", "r2", "r1", "r1", 
        "r1", "r1", "r2", "r2", "r1", "r2", "r2", "r2", "r2", "r2", "r2", 
        "r2", "r3", "r5", "r2", "r3", "r3", "r1", "r1", "r3", "r1", "r5", 
        "r1", "r2", "r2", "r2", "r2", "r5", "r3", "r3", "r1", "r1", "r2", 
        "r3", "r1", "r2", "r1", "r1", "r3", "r2", "r2", "r2", "r1", "r2", 
        "r1", "r1", "r1", "r5", "r1", "r5", "r2", "r2", "r1", "r3", "r1", 
        "r1", "r2", "r1", "r2", "r2", "r1", "r1", "r2", "r1", "r1", "r1", 
        "r1", "r1", "r5", "r1", "r3", "r1", "r1", "r2", "r1", "r2", "r2", 
        "r1", "r1", "r3", "r2", "r1", "r2", "r1", "r1", "r5", "r2", "r5", 
        "r2", "r1", "r1", "r5", "r1", "r1", "r1", "r5", "r2", "r2", "r1", 
        "r3", "r1", "r1", "r2", "r2", "r3", "r2", "r2", "r2", "r3", "r1", 
        "r2", "r1", "r2", "r1", "r1", "r1", "r1", "r3", "r3", "r5", "r1", 
        "r2", "r1", "r1", "r5", "r2", "r2", "r2", "r3", "r3", "r2", "r1", 
        "r2", "r2", "r3", "r3", "r2", "r1", "r2", "r1", "r5", "r2", "r1", 
        "r5", "r3", "r2", "r3", "r2", "r5", "r2", "r1", "r2", "r1", "r2", 
        "r5", "r5", "r3", "r5", "r3", "r3", "r1", "r2", "r2", "r5", "r2", 
        "r2", "r2", "r1", "r2", "r5", "r2", "r2", "r5", "r1", "r5", "r2", 
        "r1", "r2", "r2", "r2", "r2", "r1", "r2", "r1", "r1", "r2", "r2", 
        "r3", "r3", "r5", "r2", "r2", "r3", "r3", "r2", "r5", "r5", "r1", 
        "r2", "r1", "r2", "r5", "r1", "r1", "r2", "r1", "r2", "r3", "r2", 
        "r3", "r1", "r1", "r1", "r5", "r1", "r2", "r2", "r2", "r1", "r3", 
        "r2", "r1", "r2", "r1", "r1", "r1", "r3", "r2", "r1", "r2", "r2", 
        "r2", "r1", "r3", "r1", "r3", "r5", "r5", "r2", "r5", "r2", "r1", 
        "r2", "r2", "r2", "r1", "r2", "r5", "r1", "r5", "r1", "r5", "r1", 
        "r1", "r5", "r2", "r2", "r2", "r2", "r1", "r2", "r1", "r2", "r1", 
        "r1", "r1", "r3", "r2", "r1", "r5", "r2", "r1", "r1", "r3", "r1", 
        "r3", "r2", "r1", "r1", "r1", "r2", "r2", "r2", "r3", "r2", "r1", 
        "r1", "r2", "r1", "r2", "r5", "r1", "r1", "r1", "r3", "r3", "r1", 
        "r1", "r1", "r2", "r2", "r2", "r1", "r2", "r2", "r2", "r2", "r2", 
        "r1", "r1", "r1", "r1", "r1", "r2", "r1", "r3", "r1", "r2", "r2", 
        "r3", "r1", "r1", "r2", "r2", "r1", "r3", "r2", "r5", "r3", "r2", 
        "r1", "r1", "r3", "r1", "r2", "r2", "r2", "r2", "r1", "r5", "r2", 
        "r5", "r3", "r1", "r2", "r1", "r5", "r5", "r2", "r2", "r3", "r1", 
        "r1", "r5", "r1", "r1", "r2", "r5", "r1", "r2", "r2", "r2", "r2", 
        "r1", "r2", "r2", "r2", "r5", "r1", "r5", "r3", "r5", "r3", "r2", 
        "r2", "r1", "r1", "r3", "r1", "r3", "r2", "r1", "r2", "r3", "r5", 
        "r1", "r3", "r5", "r2", "r2", "r2", "r2", "r1", "r5", "r3", "r5", 
        "r2", "r2", "r1", "r2", "r3", "r1", "r5", "r1", "r5", "r1", "r1", 
        "r2", "r1", "r1", "r2", "r3", "r2", "r5", "r2", "r5", "r1", "r2", 
        "r2", "r3", "r3", "r2", "r2", "r3", "r3", "r3", "r1", "r2", "r1", 
        "r5", "r2", "r3", "r1", "r3", "r1", "r1", "r1", "r5", "r1", "r1", 
        "r3", "r1", "r1", "r3", "r2", "r2", "r2", "r1", "r1", "r2", "r1", 
        "r1", "r2", "r2", "r2", "r1", "r5", "r1", "r1", "r2", "r2", "r3", 
        "r2", "r1", "r2", "r2", "r2", "r2", "r3", "r1", "r1", "r2", "r1", 
        "r5", "r2", "r5", "r3", "r3", "r2", "r2", "r1", "r1", "r3", "r1", 
        "r1", "r2", "r1", "r1", "r1", "r1", "r1", "r1", "r2", "r2", "r3", 
        "r2", "r1", "r3", "r1", "r2", "r5", "r1", "r1", "r1", "r2", "r3", 
        "r2", "r1", "r1", "r2", "r2", "r2", "r1", "r2", "r1", "r5", "r1", 
        "r2", "r3", "r2", "r3", "r2", "r2", "r2", "r2", "r3", "r1", "r2", 
        "r1", "r1", "r2", "r3", "r2", "r5", "r2", "r2", "r1", "r1", "r2", 
        "r2", "r2", "r1", "r1", "r2", "r2", "r2", "r3", "r5", "r3", "r2", 
        "r2", "r1", "r3", "r2", "r2", "r1", "r1", "r2", "r1", "r3", "r2", 
        "r1", "r2", "r1", "r2", "r3", "r2", "r2", "r2", "r2", "r2", "r1", 
        "r1", "r2", "r1", "r3", "r1", "r1", "r1", "r5", "r2", "r1", "r1", 
        "r2", "r2", "r2", "r1", "r1", "r1", "r1", "r3", "r2", "r3", "r1", 
        "r2", "r1", "r1", "r2", "r1", "r3", "r2", "r1", "r1", "r5", "r3", 
        "r5", "r3", "r1", "r3", "r2", "r1", "r2", "r1", "r1", "r5", "r2", 
        "r1", "r5", "r1", "r2", "r3", "r3", "r1", "r2", "r1", "r1", "r1", 
        "r5", "r5", "r2", "r2", "r2", "r1", "r2", "r2", "r5", "r2", "r1", 
        "r1", "r1", "r1", "r5", "r2", "r3", "r3", "r1", "r5", "r2", "r5", 
        "r2", "r3", "r5", "r5", "r3", "r2", "r5", "r2", "r1", "r1", "r2", 
        "r5", "r1", "r2", "r1", "r2", "r2", "r1", "r2", "r1", "r2", "r2", 
        "r3", "r3", "r2", "r2", "r1", "r1", "r2", "r1", "r5", "r2", "r1", 
        "r2", "r3", "r1", "r2", "r5", "r3", "r2", "r3", "r5", "r2", "r3", 
        "r5", "r2", "r2", "r2", "r5", "r2", "r3", "r1", "r5", "r2", "r1", 
        "r2", "r1", "r2", "r2", "r1", "r1", "r2", "r2", "r1", "r3", "r2", 
        "r3", "r1", "r3", "r1", "r1", "r1", "r1", "r1", "r3", "r5", "r5", 
        "r1", "r2", "r1", "r1", "r3", "r2", "r1", "r2", "r2", "r1", "r3", 
        "r5", "r1", "r2", "r5", "r2", "r3", "r2", "r3", "r1", "r2", "r5", 
        "r2", "r1", "r3", "r1", "r1", "r5", "r1", "r1", "r1", "r2", "r2", 
        "r5", "r2", "r5", "r1", "r3", "r3", "r1", "r1", "r2", "r5", "r2", 
        "r5", "r2", "r5", "r1", "r1", "r1", "r1", "r5", "r2", "r2", "r1", 
        "r1", "r1", "r1", "r2", "r2", "r2", "r1", "r1", "r1", "r1", "r2", 
        "r2", "r1", "r3", "r2", "r1", "r3", "r1", "r3", "r2", "r1", "r1", 
        "r2", "r3", "r1", "r1", "r2", "r5", "r1", "r2", "r2", "r5", "r1", 
        "r1", "r2", "r2", "r2", "r2", "r1", "r2", "r2", "r1", "r1", "r2", 
        "r1", "r5", "r2", "r3", "r1", "r5", "r2", "r1", "r2", "r2", "r3", 
        "r5", "r5", "r2", "r1", "r1", "r2", "r5", "r2", "r2", "r2", "r2", 
        "r2", "r5", "r2", "r1", "r3", "r1", "r2", "r1", "r2", "r5", "r3", 
        "r1", "r2", "r2", "r2", "r5", "r3", "r1", "r3", "r2", "r2", "r2", 
        "r1", "r3", "r2", "r2", "r2", "r5", "r5", "r1", "r1", "r5", "r5", 
        "r3", "r2", "r1", "r1", "r5", "r1", "r3", "r2", "r1", "r2", "r2", 
        "r1", "r2", "r1", "r2", "r2", "r2", "r3", "r2", "r1", "r2", "r1", 
        "r1", "r2", "r1", "r3", "r1", "r2", "r3", "r1", "r3", "r1", "r5", 
        "r2", "r2", "r2", "r5", "r5", "r1", "r1", "r1", "r1", "r1", "r3", 
        "r3", "r1", "r1", "r1", "r5", "r5", "r2", "r1", "r3", "r1", "r5", 
        "r1", "r5", "r2", "r3", "r3", "r2", "r2", "r1", "r5", "r1", "r2", 
        "r1", "r5", "r1", "r2", "r2", "r1", "r5", "r1", "r2", "r1", "r5", 
        "r2", "r1", "r1", "r1", "r1", "r1", "r2", "r2", "r2", "r1", "r1", 
        "r5", "r5", "r3", "r1", "r3", "r2", "r2", "r2", "r1", "r5", "r1", 
        "r1", "r2", "r1", "r1", "r2", "r1", "r5", "r5", "r3", "r2", "r3", 
        "r2", "r2", "r5", "r3", "r1", "r1", "r5", "r3", "r3", "r3", "r2", 
        "r3", "r1", "r1", "r1", "r1", "r2", "r2", "r2", "r2", "r2", "r5", 
        "r1", "r1", "r2", "r2", "r1", "r1", "r3", "r2", "r1", "r3", "r2", 
        "r5", "r5", "r5", "r2", "r5", "r3", "r2", "r2", "r1", "r2", "r5", 
        "r1", "r3", "r1", "r1", "r1", "r5", "r1", "r2", "r2", "r5", "r1", 
        "r5", "r2", "r5", "r2", "r3", "r1", "r5", "r5", "r3", "r1", "r2", 
        "r1", "r2", "r2", "r3", "r1", "r1", "r3", "r1", "r3", "r1", "r5", 
        "r1", "r2", "r2", "r5", "r3", "r2", "r2", "r3", "r2", "r5", "r3", 
        "r1", "r5", "r2", "r1", "r2", "r2", "r1", "r1", "r5", "r1", "r1", 
        "r2", "r1", "r1", "r2", "r5", "r1", "r3", "r3", "r2", "r2", "r1", 
        "r5", "r1", "r2", "r3", "r2", "r2", "r1", "r1", "r1", "r1", "r2", 
        "r5", "r2", "r2", "r2", "r2", "r5", "r2", "r2", "r1", "r5", "r1", 
        "r2", "r1", "r3", "r1", "r2", "r2", "r2", "r5", "r3", "r2", "r1", 
        "r1", "r1", "r3", "r2", "r1", "r3", "r3", "r3", "r1", "r2", "r2", 
        "r3", "r3", "r1", "r1", "r1", "r3", "r1", "r1", "r1", "r5", "r1", 
        "r2", "r1", "r2", "r3", "r2", "r1", "r1", "r3", "r2", "r2", "r3", 
        "r1", "r1", "r2", "r1", "r3", "r1", "r1", "r2", "r2", "r5", "r3", 
        "r2", "r1", "r2", "r1", "r2", "r3", "r3", "r3", "r2", "r2", "r1", 
        "r3", "r5", "r1", "r5", "r1", "r2", "r2", "r5", "r1", "r2", "r1", 
        "r2", "r2", "r5", "r1", "r1", "r2", "r2", "r2", "r5", "r1", "r1", 
        "r2", "r3", "r2", "r1", "r5", "r1", "r1", "r2", "r1", "r5", "r3", 
        "r1", "r5", "r5", "r2", "r1", "r5", "r2", "r5", "r3", "r2", "r1", 
        "r2", "r2", "r2", "r2", "r3", "r5", "r2", "r2", "r1", "r1", "r3", 
        "r2", "r2", "r1", "r3", "r3", "r1", "r5", "r3", "r5", "r2", "r3", 
        "r1", "r3", "r2", "r2", "r2", "r5", "r1", "r5", "r2", "r1", "r1", 
        "r3", "r1", "r2", "r1", "r1", "r1", "r2", "r1", "r2", "r1", "r3", 
        "r3", "r1", "r5", "r2", "r2", "r1", "r2", "r3", "r5", "r2", "r1", 
        "r2", "r1", "r1", "r5", "r2", "r1", "r3", "r2", "r1", "r2", "r1", 
        "r5", "r1", "r3", "r1", "r1", "r5", "r2", "r1", "r2", "r3", "r1", 
        "r5", "r3", "r5", "r2", "r2", "r2", "r3", "r2", "r1", "r1", "r2", 
        "r2", "r2", "r2", "r3", "r1", "r1", "r1", "r1", "r2", "r2", "r2", 
        "r5", "r1", "r2", "r2", "r5", "r2", "r2", "r5", "r1", "r1", "r3", 
        "r2", "r2", "r1", "r1", "r3", "r2", "r2", "r2", "r3", "r1", "r1", 
        "r5", "r5", "r2", "r2", "r2", "r5", "r3", "r2", "r1", "r2", "r2", 
        "r2", "r2", "r1", "r3", "r3", "r1", "r3", "r1", "r1", "r3", "r1", 
        "r1", "r2", "r3", "r1", "r2", "r5", "r5", "r2", "r2", "r1", "r1", 
        "r2", "r1", "r1", "r2", "r1", "r1", "r2", "r2", "r3", "r2", "r2", 
        "r2", "r1", "r1", "r1", "r5", "r2", "r1", "r1", "r2", "r2", "r2", 
        "r1", "r5", "r1", "r2", "r1", "r1", "r1", "r1", "r2", "r1", "r1", 
        "r2", "r2", "r2", "r2", "r2", "r5", "r5", "r2", "r1", "r5", "r1", 
        "r5", "r1", "r1", "r2", "r1", "r2", "r5", "r1", "r2", "r1", "r2", 
        "r1", "r2", "r2", "r2", "r1", "r2", "r2", "r1", "r5", "r2", "r1", 
        "r2", "r2", "r2", "r1", "r2", "r1", "r2", "r2", "r2", "r5", "r2", 
        "r2", "r1", "r1", "r1", "r5", "r2", "r5", "r1", "r1", "r1", "r1", 
        "r3", "r3", "r3", "r2", "r3", "r2", "r1", "r1", "r1", "r1", "r3", 
        "r1", "r1", "r1", "r2", "r2", "r3", "r1", "r1", "r2", "r2", "r5", 
        "r3", "r2", "r2", "r1", "r2", "r1", "r3", "r2", "r5", "r1", "r2", 
        "r1", "r1", "r5", "r2", "r2", "r2", "r2", "r3", "r1", "r5", "r2", 
        "r2", "r2", "r1", "r2", "r3", "r2", "r1", "r1", "r1", "r3", "r2", 
        "r2", "r1", "r5", "r5", "r5", "r5", "r2", "r3", "r1", "r2", "r1", 
        "r3", "r2", "r2", "r1", "r2", "r3", "r2", "r2", "r1", "r3", "r2", 
        "r2", "r5", "r1", "r3", "r5", "r3", "r5", "r3", "r1", "r1", "r1", 
        "r1", "r1", "r1", "r5", "r1", "r5", "r1", "r2", "r5", "r2", "r2", 
        "r1", "r2", "r2", "r2", "r5", "r1", "r3", "r5", "r2", "r1", "r2", 
        "r1", "r1", "r1", "r2", "r1", "r1", "r2", "r1", "r2", "r2", "r1", 
        "r2", "r2", "r2", "r2", "r2", "r5", "r1", "r3", "r1", "r5", "r2", 
        "r3", "r1", "r2", "r2", "r2", "r1", "r1", "r2", "r2", "r1", "r1", 
        "r2", "r2", "r1", "r2", "r2", "r5", "r2", "r3", "r1", "r5", "r1", 
        "r1", "r2", "r2", "r1", "r2", "r1", "r2", "r1", "r5", "r2", "r1", 
        "r2", "r1", "r3", "r1", "r3", "r3", "r5", "r1", "r1", "r5", "r1", 
        "r1", "r1", "r3", "r2", "r2", "r1", "r2", "r1", "r3", "r1", "r1", 
        "r2", "r2", "r5", "r1", "r1", "r3", "r2", "r1", "r2", "r1", "r1", 
        "r1", "r2", "r2", "r3", "r1", "r3", "r2", "r1", "r1", "r1", "r2", 
        "r1", "r2", "r1", "r1", "r1", "r2", "r2", "r1", "r1", "r1", "r2", 
        "r2", "r1", "r2", "r5", "r2", "r1", "r1", "r2", "r2", "r1", "r1", 
        "r2", "r2", "r1", "r2", "r2", "r2", "r1", "r2", "r1", "r2", "r3", 
        "r1", "r3", "r2", "r5", "r3", "r1", "r2", "r1", "r1", "r2", "r5", 
        "r5", "r2", "r3", "r1", "r5", "r5", "r2", "r5", "r5", "r2", "r1", 
        "r1", "r2", "r1", "r5", "r2", "r5", "r1", "r2", "r3", "r2", "r2", 
        "r2", "r2", "r2", "r3", "r5", "r1", "r2", "r2", "r1", "r5", "r2", 
        "r2", "r3", "r1", "r5", "r2", "r1", "r2", "r1", "r3", "r2", "r2", 
        "r2", "r1", "r2", "r3", "r5", "r1", "r2", "r5", "r5", "r2", "r3", 
        "r2", "r2", "r1", "r3", "r5", "r1", "r1", "r1", "r1", "r2", "r2", 
        "r3", "r1", "r1", "r3", "r2", "r3", "r2", "r2", "r1", "r2", "r1", 
        "r3", "r1", "r3", "r5", "r3", "r1", "r1", "r1", "r1", "r2", "r3", 
        "r2", "r5", "r1", "r1", "r2", "r1", "r5", "r2", "r3", "r2", "r5", 
        "r2", "r2", "r1", "r2", "r2", "r1", "r1", "r1", "r1", "r1", "r3", 
        "r2", "r3", "r3", "r2", "r2", "r1", "r3", "r1", "r2", "r2", "r5", 
        "r5", "r1", "r1", "r3", "r1", "r2", "r1", "r2", "r2", "r1", "r1", 
        "r1", "r2", "r5", "r1", "r1", "r1", "r5", "r1", "r5", "r2", "r2", 
        "r2", "r1", "r2", "r1", "r5", "r2", "r1", "r2", "r2", "r2", "r1", 
        "r2", "r2", "r3", "r3", "r1", "r2", "r2", "r3", "r2", "r2", "r1", 
        "r1", "r3", "r2", "r3", "r2", "r1", "r5", "r2", "r3", "r2", "r2", 
        "r2", "r1", "r2", "r1", "r1", "r5", "r5", "r1", "r5", "r1", "r2", 
        "r2", "r5", "r2", "r2", "r5", "r2", "r5", "r2", "r2", "r3", "r1", 
        "r5", "r2", "r1", "r2", "r2", "r1", "r2", "r1", "r3", "r2", "r5", 
        "r2", "r2", "r1", "r1", "r5", "r2", "r1", "r1", "r2", "r1", "r2", 
        "r1", "r2", "r2", "r1", "r3", "r3", "r1", "r2", "r2", "r1", "r2", 
        "r3", "r2", "r2", "r1", "r1", "r3", "r2", "r2", "r1", "r2", "r1", 
        "r1", "r1", "r2", "r3", "r1", "r2", "r1", "r1", "r1", "r2", "r1", 
        "r5", "r1", "r2", "r5", "r5", "r2", "r1", "r1", "r1", "r1", "r1", 
        "r1", "r2", "r2", "r2", "r2", "r2", "r3", "r1", "r2", "r1", "r2", 
        "r2", "r2", "r1", "r1", "r3", "r3", "r3", "r2", "r2", "r2", "r1", 
        "r1", "r2", "r3", "r1", "r1", "r1", "r2", "r3", "r2", "r2", "r2", 
        "r5", "r2", "r2", "r2", "r1", "r2", "r5", "r2", "r1", "r5", "r3", 
        "r1", "r5", "r1", "r2", "r2", "r2", "r1", "r1", "r1", "r2", "r5", 
        "r1", "r2", "r2", "r5", "r1", "r2", "r2", "r2", "r1", "r2", "r2", 
        "r2", "r2", "r3", "r2", "r2", "r2", "r1", "r1", "r2", "r1", "r1", 
        "r3", "r1", "r3", "r5", "r1"}], 
    "Predictions" -> {
     "r1", "r3", "r5", "r1", "r5", "r2", "r1", "r2", "r1", "r3", "r2", "r3", 
      "r1", "r5", "r2", "r2", "r3", "r2", "r1", "r1", "r3", "r2", "r1", "r2", 
      "r2", "r2", "r5", "r1", "r2", "r3", "r5", "r2", "r1", "r1", "r2", "r5", 
      "r1", "r2", "r1", "r1", "r5", "r2", "r5", "r2", "r5", "r3", "r2", "r1", 
      "r2", "r2", "r1", "r1", "r2", "r1", "r1", "r5", "r2", "r2", "r2", "r1", 
      "r5", "r1", "r1", "r1", "r2", "r5", "r2", "r1", "r1", "r1", "r2", "r1", 
      "r3", "r2", "r1", "r3", "r2", "r5", "r5", "r1", "r3", "r5", "r1", "r3", 
      "r2", "r2", "r1", "r3", "r2", "r2", "r2", "r2", "r3", "r2", "r1", "r3", 
      "r2", "r1", "r2", "r5", "r1", "r1", "r1", "r2", "r1", "r1", "r2", "r2", 
      "r3", "r2", "r5", "r5", "r1", "r3", "r2", "r2", "r3", "r1", "r2", "r2", 
      "r2", "r1", "r1", "r1", "r1", "r1", "r1", "r1", "r3", "r2", "r2", "r2", 
      "r1", "r2", "r2", "r1", "r1", "r5", "r2", "r1", "r1", "r2", "r2", "r2", 
      "r2", "r2", "r5", "r2", "r2", "r1", "r1", "r3", "r3", "r2", "r1", "r2", 
      "r2", "r2", "r2", "r1", "r3", "r1", "r1", "r1", "r2", "r5", "r1", "r3", 
      "r2", "r2", "r1", "r2", "r1", "r5", "r5", "r1", "r1", "r2", "r1", "r1", 
      "r2", "r2", "r1", "r2", "r5", "r2", "r3", "r2", "r3", "r1", "r1", "r2", 
      "r3", "r1", "r1", "r2", "r5", "r2", "r2", "r1", "r5", "r1", "r3", "r2", 
      "r2", "r2", "r3", "r2", "r1", "r2", "r1", "r3", "r2", "r5", "r1", "r1", 
      "r2", "r3", "r1", "r2", "r5", "r3", "r2", "r2", "r1", "r1", "r2", "r2", 
      "r5", "r1", "r5", "r1", "r1", "r1", "r1", "r2", "r1", "r2", "r1", "r2", 
      "r2", "r2", "r1", "r2", "r2", "r1", "r2", "r2", "r1", "r1", "r3", "r2", 
      "r1", "r3", "r1", "r1", "r3", "r3", "r1", "r5", "r3", "r1", "r2", "r2", 
      "r5", "r2", "r3", "r2", "r1", "r1", "r5", "r5", "r2", "r2", "r3", "r2", 
      "r1", "r1", "r5", "r2", "r1", "r3", "r3", "r1", "r1", "r1", "r2", "r3", 
      "r1", "r2", "r2", "r1", "r1", "r1", "r1", "r1", "r5", "r2", "r2", "r5", 
      "r1", "r2", "r2", "r1", "r1", "r3", "r1", "r1", "r2", "r1", "r1", "r2", 
      "r2", "r3", "r3", "r2", "r1", "r5", "r2", "r3", "r3", "r2", "r3", "r1", 
      "r2", "r3", "r1", "r1", "r3", "r1", "r3", "r1", "r1", "r1", "r1", "r1", 
      "r2", "r3", "r5", "r2", "r1", "r2", "r2", "r1", "r2", "r1", "r1", "r5", 
      "r1", "r3", "r5", "r1", "r5", "r5", "r5", "r1", "r2", "r1", "r2", "r2", 
      "r2", "r5", "r2", "r3", "r1", "r1", "r2", "r2", "r2", "r2", "r2", "r2", 
      "r2", "r2", "r1", "r1", "r1", "r3", "r1", "r5", "r1", "r2", "r1", "r5", 
      "r1", "r2", "r1", "r1", "r2", "r1", "r1", "r2", "r2", "r2", "r1", "r2", 
      "r1", "r1", "r5", "r3", "r1", "r5", "r2", "r1", "r1", "r1", "r5", "r5", 
      "r1", "r2", "r2", "r2", "r2", "r3", "r2", "r5", "r1", "r2", "r2", "r2", 
      "r1", "r1", "r2", "r2", "r1", "r5", "r2", "r2", "r3", "r2", "r5", "r1", 
      "r1", "r1", "r2", "r3", "r3", "r2", "r2", "r1", "r5", "r2", "r2", "r1", 
      "r5", "r2", "r2", "r2", "r1", "r2", "r5", "r1", "r2", "r1", "r1", "r5", 
      "r2", "r5", "r3", "r2", "r3", "r2", "r1", "r2", "r2", "r3", "r1", "r3", 
      "r2", "r2", "r1", "r2", "r5", "r1", "r3", "r1", "r1", "r2", "r5", "r2", 
      "r1", "r2", "r3", "r2", "r1", "r5", "r1", "r5", "r2", "r2", "r5", "r1", 
      "r2", "r2", "r1", "r2", "r1", "r3", "r3", "r5", "r1", "r1", "r1", "r3", 
      "r2", "r5", "r2", "r1", "r5", "r2", "r2", "r1", "r1", "r3", "r1", "r1", 
      "r5", "r1", "r2", "r2", "r3", "r2", "r3", "r5", "r1", "r1", "r3", "r1", 
      "r2", "r5", "r5", "r2", "r1", "r3", "r3", "r2", "r2", "r1", "r1", "r2", 
      "r3", "r5", "r2", "r1", "r2", "r5", "r5", "r1", "r2", "r2", "r5", "r1", 
      "r1", "r5", "r1", "r3", "r1", "r3", "r3", "r1", "r2", "r2", "r5", "r1", 
      "r1", "r5", "r2", "r1", "r2", "r1", "r2", "r5", "r3", "r1", "r3", "r2", 
      "r1", "r2", "r5", "r1", "r2", "r3", "r2", "r5", "r3", "r5", "r3", "r1", 
      "r1", "r2", "r2", "r3", "r5", "r2", "r1", "r1", "r1", "r3", "r1", "r1", 
      "r3", "r2", "r1", "r1", "r5", "r2", "r1", "r2", "r3", "r2", "r5", "r2", 
      "r2", "r1", "r1", "r1", "r2", "r5", "r3", "r2", "r1", "r2", "r5", "r2", 
      "r2", "r3", "r1", "r3", "r1", "r2", "r2", "r1", "r2", "r5", "r2", "r1", 
      "r1", "r1", "r2", "r1", "r1", "r2", "r2", "r2", "r3", "r2", "r2", "r1", 
      "r1", "r2", "r1", "r1", "r2", "r2", "r1", "r3", "r5", "r1", "r1", "r5", 
      "r1", "r2", "r1", "r5", "r5", "r5", "r2", "r3", "r2", "r1", "r1", "r2", 
      "r2", "r3", "r1", "r1", "r2", "r2", "r3", "r2", "r1", "r5", "r2", "r2", 
      "r1", "r1", "r1", "r3", "r1", "r1", "r1", "r1", "r2", "r3", "r2", "r1", 
      "r5", "r5", "r2", "r5", "r1", "r2", "r2", "r1", "r2", "r2", "r5", "r2", 
      "r3", "r1", "r1", "r5", "r1", "r1", "r1", "r1", "r1", "r1", "r1", "r1", 
      "r1", "r1", "r1", "r5", "r3", "r1", "r3", "r2", "r5", "r5", "r3", "r3", 
      "r5", "r1", "r2", "r2", "r3", "r1", "r1", "r1", "r2", "r1", "r1", "r1", 
      "r3", "r3", "r5", "r1", "r5", "r1", "r2", "r2", "r1", "r2", "r1", "r2", 
      "r3", "r2", "r1", "r2", "r1", "r1", "r5", "r5", "r2", "r1", "r3", "r5", 
      "r2", "r3", "r1", "r1", "r1", "r2", "r1", "r2", "r5", "r1", "r1", "r2", 
      "r1", "r2", "r2", "r5", "r5", "r1", "r1", "r1", "r3", "r1", "r2", "r1", 
      "r1", "r2", "r3", "r2", "r2", "r1", "r1", "r5", "r2", "r5", "r1", "r3", 
      "r1", "r2", "r2", "r5", "r2", "r2", "r1", "r5", "r1", "r2", "r2", "r2", 
      "r1", "r3", "r5", "r3", "r2", "r2", "r1", "r1", "r2", "r2", "r2", "r1", 
      "r1", "r3", "r3", "r2", "r3", "r2", "r1", "r1", "r1", "r2", "r2", "r2", 
      "r1", "r5", "r2", "r1", "r2", "r2", "r2", "r1", "r1", "r1", "r2", "r1", 
      "r1", "r2", "r1", "r5", "r2", "r2", "r1", "r3", "r1", "r2", "r1", "r5", 
      "r1", "r3", "r1", "r3", "r1", "r2", "r1", "r1", "r3", "r2", "r2", "r3", 
      "r3", "r5", "r3", "r2", "r2", "r2", "r1", "r2", "r5", "r1", "r5", "r1", 
      "r2", "r1", "r3", "r2", "r2", "r3", "r5", "r2", "r3", "r1", "r5", "r1", 
      "r1", "r3", "r1", "r3", "r1", "r2", "r2", "r3", "r2", "r1", "r5", "r2", 
      "r2", "r1", "r3", "r5", "r1", "r5", "r2", "r5", "r3", "r1", "r5", "r2", 
      "r1", "r3", "r1", "r1", "r2", "r2", "r2", "r2", "r2", "r1", "r2", "r5", 
      "r2", "r5", "r2", "r1", "r1", "r1", "r2", "r1", "r1", "r1", "r2", "r2", 
      "r3", "r2", "r2", "r1", "r3", "r2", "r2", "r2", "r1", "r3", "r2", "r1", 
      "r1", "r3", "r2", "r1", "r2", "r2", "r2", "r2", "r1", "r3", "r1", "r1", 
      "r2", "r2", "r2", "r1", "r2", "r2", "r1", "r2", "r3", "r1", "r3", "r3", 
      "r2", "r2", "r5", "r2", "r1", "r2", "r1", "r3", "r2", "r5", "r1", "r1", 
      "r2", "r3", "r1", "r2", "r3", "r5", "r1", "r2", "r3", "r2", "r1", "r1", 
      "r5", "r1", "r3", "r3", "r2", "r1", "r2", "r3", "r1", "r1", "r3", "r1", 
      "r2", "r2", "r2", "r3", "r3", "r1", "r3", "r1", "r1", "r2", "r2", "r1", 
      "r3", "r5", "r1", "r5", "r1", "r1", "r1", "r2", "r2", "r1", "r1", "r1", 
      "r3", "r1", "r1", "r2", "r1", "r2", "r2", "r3", "r1", "r2", "r1", "r2", 
      "r5", "r1", "r1", "r2", "r2", "r1", "r2", "r1", "r1", "r1", "r2", "r1", 
      "r1", "r2", "r1", "r2", "r3", "r2", "r2", "r3", "r1", "r1", "r5", "r1", 
      "r5", "r3", "r3", "r1", "r1", "r3", "r2", "r2", "r2", "r1", "r3", "r1", 
      "r2", "r1", "r2", "r3", "r2", "r2", "r1", "r5", "r5", "r2", "r5", "r1", 
      "r2", "r1", "r5", "r1", "r2", "r5", "r2", "r2", "r3", "r5", "r1", "r1", 
      "r5", "r2", "r3", "r2", "r2", "r3", "r2", "r5", "r1", "r3", "r3", "r5", 
      "r1", "r2", "r3", "r2", "r2", "r5", "r1", "r2", "r2", "r1", "r1", "r5", 
      "r1", "r1", "r5", "r2", "r2", "r3", "r1", "r2", "r2", "r5", "r1", "r3", 
      "r5", "r2", "r5", "r2", "r2", "r2", "r2", "r2", "r3", "r2", "r3", "r3", 
      "r2", "r2", "r2", "r1", "r2", "r1", "r5", "r5", "r2", "r5", "r2", "r1", 
      "r2", "r2", "r1", "r2", "r1", "r2", "r1", "r2", "r1", "r2", "r2", "r5", 
      "r2", "r3", "r2", "r1", "r3", "r1", "r3", "r5", "r1", "r1", "r3", "r5", 
      "r2", "r1", "r3", "r5", "r1", "r2", "r1", "r2", "r5", "r2", "r1", "r3", 
      "r1", "r1", "r5", "r2", "r5", "r1", "r2", "r5", "r3", "r2", "r5", "r2", 
      "r1", "r5", "r2", "r1", "r1", "r1", "r1", "r2", "r2", "r2", "r2", "r3", 
      "r5", "r3", "r5", "r1", "r2", "r1", "r3", "r1", "r1", "r1", "r2", "r2", 
      "r2", "r5", "r3", "r1", "r1", "r1", "r5", "r1", "r5", "r2", "r2", "r2", 
      "r1", "r1", "r1", "r2", "r2", "r3", "r3", "r2", "r1", "r2", "r5", "r1", 
      "r2", "r1", "r1", "r1", "r2", "r2", "r1", "r1", "r3", "r1", "r2", "r1", 
      "r3", "r1", "r2", "r2", "r1", "r2", "r3", "r1", "r1", "r5", "r3", "r1", 
      "r3", "r1", "r1", "r5", "r2", "r1", "r3", "r5", "r1", "r2", "r1", "r1", 
      "r3", "r3", "r1", "r2", "r1", "r2", "r2", "r2", "r1", "r1", "r2", "r2", 
      "r3", "r2", "r2", "r1", "r2", "r3", "r2", "r2", "r1", "r1", "r2", "r1", 
      "r2", "r2", "r1", "r2", "r1", "r1", "r1", "r3", "r1", "r5", "r1", "r2", 
      "r1", "r2", "r1", "r1", "r2", "r2", "r1", "r2", "r5", "r3", "r5", "r2", 
      "r5", "r2", "r2", "r3", "r2", "r1", "r1", "r1", "r2", "r1", "r5", "r1", 
      "r2", "r2", "r2", "r1", "r1", "r2", "r2", "r3", "r1", "r2", "r1", "r1", 
      "r1", "r3", "r1", "r1", "r1", "r1", "r1", "r2", "r1", "r2", "r1", "r2", 
      "r1", "r2", "r1", "r2", "r3", "r1", "r1", "r1", "r2", "r1", "r3", "r1", 
      "r3", "r2", "r1", "r2", "r2", "r2", "r1", "r2", "r2", "r3", "r2", "r5", 
      "r5", "r1", "r1", "r2", "r5", "r1", "r1", "r2", "r2", "r2", "r5", "r2", 
      "r3", "r3", "r5", "r2", "r5", "r1", "r1", "r3", "r2", "r5", "r2", "r1", 
      "r1", "r2", "r3", "r2", "r1", "r1", "r1", "r2", "r1", "r1", "r2", "r2", 
      "r2", "r1", "r2", "r3", "r1", "r2", "r2", "r2", "r3", "r1", "r1", "r1", 
      "r5", "r2", "r1", "r2", "r3", "r2", "r2", "r1", "r2", "r2", "r1", "r1", 
      "r5", "r2", "r2", "r5", "r3", "r2", "r2", "r2", "r1", "r5", "r1", "r1", 
      "r1", "r1", "r2", "r1", "r1", "r1", "r5", "r1", "r2", "r1", "r1", "r1", 
      "r2", "r2", "r1", "r1", "r2", "r2", "r3", "r1", "r1", "r2", "r3", "r2", 
      "r2", "r2", "r1", "r2", "r3", "r5", "r1", "r1", "r1", "r3", "r3", "r2", 
      "r2", "r1", "r5", "r3", "r1", "r2", "r2", "r2", "r2", "r1", "r1", "r1", 
      "r1", "r2", "r3", "r2", "r1", "r5", "r1", "r3", "r1", "r3", "r1", "r5", 
      "r1", "r1", "r1", "r3", "r1", "r1", "r5", "r5", "r2", "r2", "r2", "r2", 
      "r1", "r1", "r1", "r2", "r1", "r3", "r3", "r1", "r5", "r1", "r2", "r5", 
      "r3", "r5", "r1", "r5", "r3", "r5", "r1", "r2", "r2", "r5", "r2", "r1", 
      "r1", "r1", "r1", "r2", "r2", "r1", "r2", "r2", "r2", "r2", "r2", "r2", 
      "r2", "r3", "r5", "r2", "r3", "r3", "r1", "r1", "r3", "r1", "r5", "r1", 
      "r2", "r2", "r2", "r2", "r5", "r3", "r3", "r1", "r3", "r2", "r3", "r1", 
      "r2", "r1", "r1", "r3", "r2", "r2", "r2", "r1", "r2", "r1", "r1", "r1", 
      "r5", "r1", "r5", "r2", "r2", "r1", "r3", "r1", "r1", "r5", "r1", "r2", 
      "r2", "r1", "r1", "r2", "r1", "r1", "r1", "r1", "r1", "r5", "r1", "r3", 
      "r1", "r1", "r2", "r1", "r2", "r2", "r1", "r1", "r3", "r2", "r1", "r2", 
      "r1", "r1", "r5", "r2", "r5", "r2", "r1", "r1", "r5", "r1", "r1", "r1", 
      "r5", "r2", "r2", "r1", "r3", "r1", "r1", "r2", "r2", "r3", "r2", "r2", 
      "r2", "r3", "r1", "r2", "r1", "r2", "r1", "r1", "r1", "r1", "r3", "r3", 
      "r5", "r1", "r2", "r1", "r1", "r5", "r2", "r2", "r2", "r3", "r3", "r2", 
      "r1", "r2", "r2", "r3", "r3", "r2", "r1", "r2", "r3", "r5", "r1", "r1", 
      "r5", "r2", "r2", "r3", "r2", "r5", "r2", "r1", "r2", "r1", "r2", "r5", 
      "r5", "r3", "r5", "r3", "r3", "r1", "r2", "r2", "r5", "r2", "r2", "r2", 
      "r1", "r2", "r5", "r2", "r2", "r5", "r1", "r5", "r2", "r1", "r2", "r2", 
      "r2", "r2", "r1", "r2", "r1", "r1", "r2", "r2", "r3", "r3", "r5", "r2", 
      "r2", "r3", "r3", "r2", "r5", "r5", "r1", "r2", "r1", "r2", "r5", "r1", 
      "r1", "r2", "r1", "r2", "r3", "r2", "r3", "r1", "r1", "r1", "r5", "r1", 
      "r2", "r2", "r2", "r1", "r3", "r2", "r1", "r2", "r1", "r1", "r1", "r3", 
      "r2", "r1", "r2", "r2", "r2", "r1", "r3", "r1", "r3", "r5", "r5", "r2", 
      "r5", "r5", "r1", "r2", "r2", "r2", "r1", "r2", "r5", "r1", "r5", "r1", 
      "r5", "r1", "r1", "r5", "r2", "r2", "r2", "r2", "r1", "r2", "r1", "r2", 
      "r1", "r1", "r3", "r3", "r2", "r1", "r5", "r2", "r1", "r1", "r3", "r1", 
      "r3", "r2", "r1", "r3", "r1", "r2", "r2", "r2", "r3", "r2", "r1", "r1", 
      "r2", "r1", "r2", "r5", "r1", "r1", "r1", "r3", "r3", "r1", "r1", "r1", 
      "r2", "r2", "r2", "r1", "r2", "r2", "r2", "r2", "r2", "r1", "r1", "r1", 
      "r1", "r1", "r2", "r1", "r3", "r1", "r2", "r2", "r3", "r1", "r1", "r2", 
      "r2", "r1", "r3", "r2", "r5", "r3", "r1", "r1", "r1", "r3", "r1", "r2", 
      "r2", "r2", "r2", "r1", "r5", "r2", "r5", "r3", "r1", "r2", "r1", "r5", 
      "r5", "r2", "r2", "r3", "r1", "r1", "r5", "r1", "r1", "r2", "r5", "r1", 
      "r2", "r2", "r5", "r2", "r1", "r2", "r2", "r2", "r5", "r1", "r5", "r3", 
      "r5", "r3", "r2", "r2", "r1", "r1", "r3", "r1", "r3", "r2", "r1", "r2", 
      "r3", "r5", "r1", "r3", "r5", "r2", "r2", "r2", "r2", "r1", "r5", "r3", 
      "r5", "r2", "r2", "r1", "r2", "r3", "r1", "r5", "r1", "r5", "r1", "r1", 
      "r2", "r1", "r1", "r2", "r3", "r2", "r5", "r2", "r5", "r1", "r2", "r2", 
      "r3", "r3", "r2", "r2", "r3", "r3", "r3", "r1", "r2", "r1", "r5", "r2", 
      "r3", "r1", "r3", "r1", "r1", "r1", "r5", "r1", "r1", "r3", "r1", "r1", 
      "r3", "r2", "r2", "r2", "r1", "r1", "r2", "r1", "r1", "r2", "r2", "r2", 
      "r1", "r5", "r1", "r1", "r2", "r2", "r3", "r2", "r1", "r2", "r2", "r2", 
      "r2", "r3", "r1", "r1", "r2", "r1", "r5", "r2", "r5", "r3", "r3", "r2", 
      "r2", "r1", "r1", "r3", "r1", "r1", "r2", "r1", "r1", "r1", "r1", "r1", 
      "r1", "r2", "r2", "r3", "r2", "r1", "r3", "r1", "r2", "r5", "r1", "r1", 
      "r1", "r2", "r3", "r2", "r1", "r1", "r2", "r2", "r2", "r1", "r2", "r1", 
      "r5", "r1", "r2", "r3", "r2", "r3", "r2", "r2", "r2", "r2", "r3", "r1", 
      "r2", "r1", "r1", "r2", "r3", "r2", "r5", "r2", "r2", "r1", "r1", "r2", 
      "r2", "r2", "r1", "r1", "r2", "r2", "r2", "r3", "r5", "r3", "r2", "r2", 
      "r1", "r3", "r2", "r2", "r1", "r1", "r2", "r1", "r3", "r2", "r1", "r2", 
      "r1", "r2", "r3", "r5", "r2", "r2", "r2", "r2", "r1", "r1", "r2", "r1", 
      "r3", "r1", "r1", "r1", "r5", "r2", "r1", "r1", "r2", "r2", "r2", "r1", 
      "r1", "r1", "r1", "r3", "r2", "r3", "r1", "r2", "r1", "r1", "r2", "r1", 
      "r3", "r2", "r1", "r1", "r5", "r3", "r5", "r3", "r1", "r3", "r2", "r1", 
      "r2", "r1", "r1", "r5", "r2", "r1", "r5", "r1", "r2", "r3", "r3", "r1", 
      "r2", "r1", "r1", "r1", "r5", "r5", "r2", "r2", "r2", "r1", "r2", "r2", 
      "r5", "r2", "r1", "r1", "r1", "r1", "r5", "r2", "r3", "r3", "r1", "r5", 
      "r2", "r5", "r2", "r3", "r5", "r5", "r3", "r2", "r5", "r2", "r1", "r1", 
      "r2", "r5", "r1", "r2", "r1", "r2", "r2", "r1", "r2", "r1", "r2", "r2", 
      "r3", "r3", "r2", "r2", "r1", "r1", "r2", "r1", "r5", "r2", "r1", "r2", 
      "r3", "r1", "r2", "r5", "r3", "r2", "r3", "r5", "r2", "r3", "r5", "r2", 
      "r2", "r2", "r5", "r2", "r3", "r1", "r5", "r2", "r1", "r2", "r1", "r2", 
      "r2", "r1", "r1", "r2", "r2", "r1", "r3", "r2", "r3", "r1", "r3", "r1", 
      "r1", "r1", "r1", "r1", "r3", "r5", "r5", "r1", "r2", "r1", "r1", "r3", 
      "r2", "r1", "r2", "r2", "r1", "r3", "r5", "r1", "r2", "r5", "r2", "r3", 
      "r2", "r3", "r1", "r2", "r5", "r2", "r1", "r3", "r1", "r1", "r5", "r1", 
      "r1", "r1", "r2", "r2", "r5", "r2", "r5", "r1", "r3", "r3", "r1", "r1", 
      "r2", "r5", "r2", "r5", "r2", "r5", "r1", "r1", "r1", "r1", "r5", "r2", 
      "r2", "r1", "r1", "r1", "r1", "r2", "r2", "r2", "r1", "r1", "r1", "r1", 
      "r2", "r2", "r1", "r3", "r2", "r1", "r3", "r1", "r3", "r2", "r1", "r1", 
      "r2", "r3", "r1", "r1", "r5", "r5", "r1", "r2", "r2", "r5", "r1", "r1", 
      "r2", "r2", "r2", "r2", "r1", "r5", "r2", "r1", "r1", "r2", "r1", "r5", 
      "r2", "r2", "r1", "r5", "r2", "r1", "r2", "r2", "r3", "r5", "r5", "r2", 
      "r1", "r1", "r2", "r5", "r2", "r5", "r2", "r2", "r2", "r5", "r2", "r1", 
      "r3", "r1", "r2", "r1", "r2", "r5", "r3", "r1", "r2", "r2", "r2", "r5", 
      "r3", "r1", "r3", "r2", "r2", "r2", "r1", "r3", "r2", "r2", "r2", "r5", 
      "r5", "r1", "r1", "r5", "r5", "r2", "r2", "r1", "r1", "r5", "r1", "r3", 
      "r2", "r1", "r2", "r2", "r1", "r2", "r1", "r2", "r2", "r2", "r3", "r2", 
      "r1", "r2", "r1", "r1", "r2", "r1", "r3", "r1", "r2", "r3", "r1", "r2", 
      "r1", "r5", "r2", "r2", "r2", "r5", "r5", "r1", "r1", "r1", "r1", "r3", 
      "r3", "r3", "r1", "r1", "r1", "r5", "r5", "r2", "r1", "r3", "r1", "r5", 
      "r1", "r5", "r2", "r3", "r3", "r2", "r2", "r1", "r5", "r1", "r2", "r1", 
      "r5", "r1", "r2", "r2", "r1", "r5", "r1", "r2", "r1", "r5", "r2", "r1", 
      "r1", "r1", "r1", "r1", "r2", "r2", "r2", "r1", "r1", "r5", "r5", "r3", 
      "r1", "r3", "r2", "r2", "r2", "r1", "r5", "r1", "r1", "r2", "r1", "r1", 
      "r2", "r1", "r5", "r5", "r3", "r2", "r3", "r2", "r2", "r5", "r3", "r1", 
      "r1", "r5", "r3", "r3", "r3", "r2", "r3", "r1", "r1", "r1", "r1", "r2", 
      "r2", "r2", "r2", "r2", "r5", "r1", "r1", "r2", "r2", "r1", "r1", "r2", 
      "r2", "r1", "r3", "r2", "r5", "r5", "r5", "r2", "r5", "r3", "r2", "r2", 
      "r1", "r2", "r5", "r1", "r2", "r1", "r1", "r1", "r5", "r1", "r2", "r2", 
      "r5", "r1", "r5", "r5", "r5", "r2", "r3", "r1", "r5", "r5", "r3", "r1", 
      "r2", "r1", "r2", "r2", "r3", "r1", "r1", "r3", "r1", "r3", "r1", "r5", 
      "r1", "r2", "r2", "r5", "r3", "r2", "r2", "r3", "r2", "r5", "r3", "r1", 
      "r5", "r2", "r1", "r2", "r2", "r1", "r1", "r5", "r1", "r1", "r2", "r1", 
      "r1", "r2", "r5", "r1", "r3", "r3", "r2", "r2", "r1", "r5", "r1", "r2", 
      "r3", "r2", "r2", "r1", "r1", "r1", "r1", "r2", "r5", "r2", "r2", "r2", 
      "r2", "r5", "r2", "r2", "r1", "r5", "r1", "r2", "r1", "r3", "r1", "r2", 
      "r2", "r2", "r5", "r3", "r2", "r1", "r1", "r1", "r3", "r2", "r1", "r3", 
      "r3", "r3", "r1", "r2", "r2", "r3", "r3", "r1", "r1", "r1", "r3", "r1", 
      "r1", "r1", "r5", "r1", "r2", "r1", "r2", "r3", "r2", "r1", "r1", "r3", 
      "r2", "r2", "r3", "r1", "r1", "r2", "r1", "r3", "r1", "r1", "r2", "r2", 
      "r5", "r3", "r2", "r1", "r2", "r1", "r2", "r3", "r3", "r3", "r2", "r2", 
      "r1", "r3", "r5", "r1", "r5", "r1", "r2", "r2", "r5", "r1", "r2", "r1", 
      "r2", "r2", "r5", "r1", "r1", "r2", "r2", "r2", "r5", "r1", "r1", "r2", 
      "r3", "r2", "r1", "r5", "r1", "r1", "r2", "r1", "r5", "r3", "r1", "r5", 
      "r5", "r2", "r1", "r5", "r2", "r5", "r3", "r2", "r1", "r2", "r2", "r2", 
      "r2", "r3", "r5", "r2", "r2", "r1", "r1", "r3", "r2", "r2", "r1", "r3", 
      "r3", "r1", "r5", "r3", "r5", "r2", "r3", "r1", "r3", "r2", "r2", "r2", 
      "r5", "r1", "r5", "r2", "r1", "r1", "r3", "r1", "r5", "r1", "r1", "r1", 
      "r2", "r1", "r2", "r1", "r3", "r3", "r1", "r5", "r2", "r2", "r1", "r2", 
      "r3", "r5", "r2", "r1", "r2", "r1", "r1", "r5", "r2", "r1", "r3", "r2", 
      "r1", "r2", "r1", "r5", "r1", "r3", "r1", "r1", "r5", "r2", "r1", "r2", 
      "r3", "r1", "r5", "r3", "r5", "r2", "r2", "r2", "r3", "r2", "r1", "r1", 
      "r1", "r2", "r2", "r2", "r3", "r1", "r1", "r1", "r1", "r2", "r2", "r2", 
      "r5", "r1", "r2", "r2", "r5", "r2", "r2", "r5", "r1", "r1", "r3", "r2", 
      "r2", "r1", "r1", "r3", "r2", "r2", "r2", "r3", "r1", "r1", "r5", "r5", 
      "r2", "r2", "r2", "r5", "r3", "r2", "r1", "r2", "r2", "r2", "r2", "r1", 
      "r3", "r3", "r1", "r3", "r1", "r1", "r3", "r1", "r1", "r2", "r3", "r1", 
      "r2", "r5", "r5", "r2", "r2", "r1", "r1", "r2", "r1", "r3", "r2", "r1", 
      "r1", "r2", "r2", "r3", "r2", "r2", "r2", "r1", "r1", "r1", "r5", "r2", 
      "r1", "r1", "r2", "r2", "r2", "r1", "r5", "r1", "r2", "r1", "r1", "r1", 
      "r1", "r2", "r1", "r1", "r2", "r2", "r2", "r2", "r2", "r5", "r5", "r2", 
      "r1", "r5", "r1", "r5", "r1", "r1", "r2", "r1", "r2", "r5", "r1", "r2", 
      "r1", "r2", "r1", "r2", "r2", "r2", "r1", "r2", "r2", "r1", "r5", "r2", 
      "r1", "r2", "r2", "r2", "r1", "r2", "r1", "r2", "r2", "r2", "r5", "r2", 
      "r2", "r1", "r1", "r1", "r5", "r2", "r5", "r1", "r1", "r1", "r1", "r3", 
      "r3", "r3", "r2", "r3", "r2", "r1", "r1", "r1", "r1", "r3", "r1", "r1", 
      "r1", "r2", "r2", "r3", "r1", "r1", "r2", "r2", "r5", "r3", "r2", "r2", 
      "r1", "r2", "r1", "r2", "r2", "r5", "r1", "r2", "r1", "r1", "r5", "r2", 
      "r2", "r2", "r2", "r3", "r1", "r5", "r2", "r2", "r2", "r1", "r2", "r3", 
      "r2", "r1", "r1", "r1", "r3", "r2", "r2", "r1", "r5", "r5", "r5", "r5", 
      "r2", "r3", "r1", "r2", "r1", "r3", "r2", "r2", "r1", "r2", "r3", "r2", 
      "r2", "r1", "r3", "r2", "r2", "r5", "r1", "r3", "r5", "r3", "r5", "r3", 
      "r1", "r1", "r1", "r1", "r1", "r1", "r5", "r1", "r5", "r1", "r2", "r5", 
      "r2", "r2", "r1", "r2", "r2", "r2", "r5", "r1", "r3", "r5", "r2", "r1", 
      "r2", "r1", "r1", "r1", "r2", "r1", "r1", "r2", "r1", "r2", "r2", "r1", 
      "r2", "r2", "r2", "r2", "r2", "r5", "r1", "r3", "r1", "r5", "r2", "r3", 
      "r1", "r2", "r2", "r2", "r1", "r1", "r2", "r2", "r1", "r1", "r2", "r2", 
      "r1", "r2", "r2", "r5", "r2", "r3", "r1", "r5", "r1", "r1", "r2", "r2", 
      "r1", "r2", "r1", "r2", "r1", "r5", "r2", "r1", "r2", "r1", "r3", "r1", 
      "r3", "r3", "r5", "r1", "r1", "r5", "r1", "r3", "r1", "r3", "r2", "r2", 
      "r1", "r2", "r1", "r3", "r1", "r1", "r2", "r2", "r5", "r1", "r1", "r3", 
      "r2", "r1", "r2", "r1", "r1", "r1", "r2", "r2", "r3", "r1", "r3", "r2", 
      "r1", "r1", "r1", "r2", "r1", "r2", "r1", "r1", "r1", "r2", "r2", "r1", 
      "r1", "r1", "r2", "r2", "r1", "r2", "r5", "r2", "r1", "r1", "r2", "r2", 
      "r1", "r1", "r2", "r2", "r1", "r2", "r2", "r2", "r1", "r2", "r1", "r5", 
      "r3", "r1", "r3", "r2", "r5", "r3", "r1", "r2", "r1", "r1", "r2", "r5", 
      "r5", "r2", "r3", "r1", "r5", "r5", "r2", "r5", "r5", "r2", "r1", "r1", 
      "r2", "r1", "r5", "r2", "r5", "r1", "r2", "r3", "r2", "r2", "r2", "r2", 
      "r2", "r3", "r5", "r1", "r2", "r2", "r1", "r5", "r2", "r2", "r3", "r1", 
      "r5", "r2", "r1", "r2", "r1", "r3", "r2", "r2", "r2", "r1", "r2", "r3", 
      "r5", "r1", "r2", "r5", "r5", "r2", "r3", "r2", "r2", "r1", "r3", "r5", 
      "r1", "r1", "r1", "r1", "r2", "r2", "r3", "r1", "r1", "r3", "r2", "r3", 
      "r2", "r2", "r1", "r2", "r1", "r3", "r1", "r2", "r5", "r3", "r1", "r1", 
      "r1", "r1", "r2", "r2", "r2", "r5", "r1", "r1", "r2", "r1", "r5", "r2", 
      "r3", "r2", "r5", "r2", "r2", "r1", "r2", "r2", "r1", "r1", "r2", "r1", 
      "r1", "r3", "r2", "r3", "r3", "r2", "r2", "r1", "r3", "r1", "r2", "r2", 
      "r5", "r5", "r1", "r1", "r3", "r1", "r2", "r1", "r2", "r2", "r1", "r1", 
      "r1", "r2", "r5", "r1", "r1", "r1", "r5", "r1", "r5", "r2", "r2", "r2", 
      "r1", "r2", "r1", "r5", "r2", "r1", "r2", "r2", "r2", "r1", "r2", "r2", 
      "r3", "r3", "r1", "r2", "r2", "r3", "r2", "r2", "r1", "r1", "r3", "r2", 
      "r3", "r2", "r1", "r5", "r2", "r3", "r2", "r2", "r2", "r1", "r2", "r1", 
      "r1", "r5", "r5", "r1", "r5", "r1", "r2", "r2", "r5", "r2", "r2", "r5", 
      "r2", "r5", "r2", "r2", "r3", "r1", "r5", "r2", "r1", "r2", "r2", "r1", 
      "r2", "r1", "r3", "r2", "r5", "r2", "r2", "r1", "r1", "r5", "r2", "r1", 
      "r1", "r2", "r1", "r2", "r1", "r2", "r2", "r1", "r3", "r3", "r1", "r2", 
      "r2", "r1", "r2", "r3", "r2", "r2", "r1", "r1", "r3", "r5", "r2", "r1", 
      "r2", "r1", "r1", "r1", "r2", "r3", "r1", "r2", "r1", "r1", "r1", "r2", 
      "r1", "r5", "r1", "r2", "r5", "r5", "r2", "r1", "r1", "r1", "r1", "r1", 
      "r1", "r2", "r2", "r2", "r2", "r2", "r3", "r1", "r2", "r1", "r2", "r2", 
      "r2", "r1", "r1", "r3", "r3", "r3", "r2", "r2", "r2", "r1", "r1", "r2", 
      "r3", "r3", "r1", "r1", "r5", "r3", "r2", "r2", "r2", "r5", "r2", "r2", 
      "r2", "r1", "r2", "r5", "r2", "r1", "r5", "r3", "r1", "r5", "r1", "r2", 
      "r2", "r2", "r1", "r1", "r1", "r2", "r5", "r1", "r2", "r2", "r5", "r1", 
      "r2", "r2", "r2", "r1", "r2", "r2", "r2", "r2", "r3", "r2", "r2", "r2", 
      "r1", "r1", "r2", "r1", "r1", "r3", "r1", "r3", "r5", "r1"}, 
    "LogProbabilities" -> CompressedData["
1:eJzdXXtwV8UZjQlUQwwESQJK5FXxBaICFjHSADHAKAai2GGsr9IBdRgsSBCB
AdSIPIogD62FKWVARJAgECKRkO4VBIoiD0VQBCSgEl6aDAqBArZTs7czPyZz
Mh7PfD/7187eO/fevbvffo/zPbZ5vz/d0z82JibmzroxMbX+07Z7ue2kx5q0
c62OpyekjGwRRLb1mvRe8Nv6TcP25LQtT3+xo4/z/QE9Rt9yw5pmF7TlZce/
e3dXN4fe/8K0gbeNanrxBe2wV76s3/t3G90dLeu2/qJ+atDjtilPp3w8Iez7
Fr1/bpcT0wftbR70G5JfPO9kR+f7vkXPH1xz7plWHS4L28IO17cqHTTX+f74
2F7Dizc2DgYfuXJeWeGjzvd9i+YPfR/NL/q/ST80XVDxYFpw68VXPJiXPdD1
LOqcdd2rl4fX0fjY+UP3s5dMyepfmBi2b/UZdHrr0ALn++z30fPoftMed3dM
XVw7aDxr1sZTUzc73/ctol92fPFd/3kke2CjsD3eqNeIPuNGOd9n6YNdP/R+
lj+ox8/On/r5H+mpYeDb3dsui22RmBdeR/wH/f+JF7L6ZrVtGCT2OXBz4srn
nO9HttXdZ+cf8Sfr9WX5Kzs+9v/V+1e9P9X8Ack/dn8h/s3OP0s/av2O1S/U
68t+H91n9cPJt50fkDm8YbC3U+sObuSzzvd9i/5/1IhWh3a2TA7bN64ecaJR
y5nO99X6lTV/Y/cvuo/Wh9XvrPkDGh+aXzT+yW3775n9SFLYZl+++fdXZi52
vs/qDz07jF11sE1csPahtLV//sMO5/u+VcuvdRVP/i19Q64Lbpo4YPCky4PI
Fj0/8dGkgdfvH+viz8+MT/9NatA9K/fxuLONwpYdH8sf1PwbrS96/+B7z161
ccEqdzLxnWfP3nJpENmy+tmUdkcv2p3TKOj50uiCyz55zvU+ljCv/uSUwF9X
6zfq+2j+1fo1O39IvrL0H593R9q+zHyX0GDt8MGH6wWRLUu/kH+K9QNr/R3R
F+Kv7Pqy9h1L3zXDB346/mSNv7D7Q01fLH46PGV2zNTXGwRZ0xcP2TBtjuu4
pXjuhv1J4XUWH2b/H32f1T/U+IJ6f7HyJXI/Ru5T9v+Qf4LlXyz+t21JycS8
nclhm/dsx/y6x19yvq+2H5F8QPobuz/Z/0Pri+Q/qx+g+8g/h+xDdn3V+IKa
/7H4Avt9Fr9Q2y/W+sP2ZW+N6rv1GddgXfMbGv69YRDZsvgi4k/I/8PSN8J3
1P5r9v1o/WObXX8m4c2zrqLjmfNd23ztfN+3rP6Bxj+suPftt1bWDU51nFP4
6rhlzvd9y64f0v9Z/EKNX6r9eyw+g9ZXrb8j/sDSpxrfRu/fP2V59vOLlrv5
m+Y/lZBbN4hs1fgnu//V+s30g0NHdT11cTCiyyt/Gfjhe873fftR0SfffVqZ
EHze7fYRGQOKnO/7Vo2fqf0navt3xVsvNGm0Jzl4fHyzzr0/ecn5vm+R/o34
nzo+oP2Lx091CeKD4deOyhzbt9Ata7xk1Ud31Qt8i+wvNP6er7pjvz5x2J3d
373dE3885F56Pq7oiwfrBL5V20dofNb0rd4f6vto//XtMTXpgEsO20Wrp95T
mD3N+b46PkRtP7DPI/nM8v9vBr33fbuTDcL2viFby2+98mXn+2r7We1fVq9f
dX5l36rxyQ+vKD8yM6lO2M74fPP8vf2c832Wvlj7N9qfV8dv1My+qt7+Vu9/
RL9qfAzpF+z8qv3nLH2y+LeaftH6Iv2PfT/Sn9X7k5VPyL5k9Y/xVXjMyaVz
0iambHMJcfkjj8y4KLzO2u9sfIZa/1LTv/r7aP763t926ZMtfnDbOg9+6OGy
0rDvWxR/hvRrtX+M9X/M3plw+vVbEoIv1xSXNstZG+bH+OvIfkb8icUnWfls
7X9W61/s/kL4M6KfaM//YP0XLH9n+Rfr/2PxDbT/kX7J0q8an0X/x8b/qu1T
dfwQ+32Wv7Dzg/RbtX5lnf+M1hfJb7V+guJvWXxevb+s9Q9rfNvaPkH0i/R3
Nj+blQ/o+2h/sPxNvT92Jk547HR2YtiOWV3yQf7olc732fgDdF8d/8XmX7Lz
i+SLNf6vtn9Z/QE9z+LH6Hm1/9Uaf6gZ/lIvyDvXNXlM62Vh37fW/ic0fmQ/
sPKZxa/rVOGV3f8bB/CZ833fqvf/pVVyyscbzDz6j9iiggJ3aQ3zq9D40P5i
7X81vsnmp6jlS7Trn2r8heVv6vwzln9Eu/2i5t9sfgsa3w8xOT88klsvuCw+
tvKzspUu78npGdvK4sPr7Pyr65dF1stqEVFHyzr+Rx0fbk2/6vez+BWLH6r5
M8t/Uf6I2n+D8p+t9Xd1fAhrv7L7X42PI3yH3b/q/CN2fIi+1f5/xN+s5YN1
fgrLX9X7R73/rfEx9H6E/6L1Qf45lj/uuPqaKyYl73O5b6ZnrJgXE0S2avnz
/37fOr8KrT/Sn5B/gN2fLH7E4i9ofn084bqKT8+03HrANTm8Z1hBUmUYZ4j+
H8WfqekP8RdWvrDyUb1+0S4f1M+r5bta/2L5B5v/qMZ31fo/zH8g50cdH229
f9TyTb2+LH1Z419sfXbr+FeEr7D0Ee3+aRTfo8af0PM+jv6eLnWal1Wudr7v
WxZ/YOMXWP3Y2j+E/Fts/gE7PuT/ZvUnFD/l81hmLa3zaNKVR90jnQrb5CR8
F+a3qPEhtr40W3+H9c+y9VvQ/dad2vRxXycGJUfW55ZUrnC+71uW/lj/hbX+
ZO2fVss/tfxB40f0ra7vxdIvm3+H4s/Q/6P6AGj90PMs/1TbL2r8hK2fwPpX
0f+z9UdZ/sbGH6rtR+v6PGj+kP+kOr9ITev/quWbuj6een+z9itbX0odH8TK
X7V9rT7fgMUH1f5btf3Hrp/af8KuL9p/6vqT6vwhNn+TPX9JLX+t8e1ot9+s
/z/a/Ydq/U69v9XyQU2/avuM/T8UX4/se5b+WPuS/b5av1DjQ+g+i58i++u1
qjrS16Z/9fbIskuC3Yvnt9iwY5Xz19n4KDW+heyb0XM+XpNaGhdMeXho3K64
Y863/vrQqji5dxbOvPi7ft863/rrrP3j/WSL2tca/PyN5W7T2ubf1Ek/HPrR
rOVjtNuvavvA2n+F7rP1Ca3jL3wcanVxquz+Uuf/WZ8fh+6j8zvZ9VX7J9X+
aSSf0PjQ+bus/wDJX6S/qfkron8kH9TnZ7L64cixZ94duPhXQfe/dn/79lbb
3fny9NjPm1wUXlfHH6r5MzpfEdVPV+ffsfF3avuMXX91/LLaf4/oVy0f1fG5
aH3V+Vdq+zJ7yZSs/oWJYftWn0Gntw4tcL6vpk8UP8Di1+z4cybf3KrWuFpB
RsWQosqSMrc39eiayTO+cf66Nb7A5h+h97P6S7THr7Lx1Wr5o46vZONf0fp+
fWOLdk9cVz/Y9HKdjXfuXuJyto97/a6Nl4bXayY/fnr8q9p+/6XrN2h9rPEl
9nnW/kfPs/i5Wn9j8WM2fssaP2TxZ/R99vzAlPsKi5cPjA3bXhmlV637eKfz
ffb/2fgkFv9S48vW9gO7Pmx9dbV9wZ5PE+3xPyz/Z/VjNL8IX0Tzi/BDtX3H
6tfW8V+s/szuX/X/q/1z7Pyqz7dl+TOqL8j699X6M3s+hPX6oO9bx/ep7ROE
z1vbb+rzcVj+ZJ0foeavyD+rPh+XxRdY/QHh22r/NPKvsfuP9f+y37fOT0fr
w9YXVtsnavvcGn9j76vzi6Idf4z29Ufzi/x7avyFnR/r+GJr/wN6PulYcmp5
at1gUOdeD8zOW+F837covxvpB8j+QPIP8Ve2fvv+Kcuzn1+03M2vwlMiW3b/
s/5dJJ+/rarb/mO9w4ow7tm31vibmn+x51dbx59a40fs/JQXbD83OiX+f23t
vS2LDr7rfJ+Nf1bTjxq/spZfCB9Sx+ez8l+NL6HxsfUT0fPI/+rrnHl/ol83
fx19n80PZ+1TZL+r9UM1/aL9qcYvWftUfb6j2r5B+D1b34XlD+h5df4Paz+o
429Y+abWz9T15Vj+pvZfsvuXXR+1fqCuH2O9f63Hr67/qI4PQfIFxWdYn5/M
yidWf0HvV/uvqjvXzresfxbNP6qvrMb/0PgQfSL9kaUvNb7O3kfx+zVd//O9
b4q79/geNzfn2W8XdPtXjesDqPMf1P5xdfwviy+p5S+r36n3n3r/oPxblv7Q
faR/qPUnlj+r4/vU31fjayx9q8//Uuu3NcV/I+uu1rT+KnufzU9j81tZ/Rmd
P8DSB3v+mPX+ZOPr0fgRPs7qJ0i/R/PDxreg97P4O1tfFO1ftX0Y7fiJOn7F
On6Vrf+gxhfQ/kD0q64PbE2favpg6VfNX9D6quMP1PgGm78J4/9A/Jc1fVv7
X9TnB6j9Ex4HrQ4nRfoDyn9k5Z/af4uet/bfs/ie2r63Pr9RbX/6OMof4yxP
um7rD78yLKM0jLO0zv9j7Vu0v9T+ddb/o66fhPB/9H9vFO9KfT+tdpCVG1uw
aEGlO/TefaVnu+1x/jqLf7Hxiez5DKx+ocYn1fgBuz/V9qOa/7D0yb5fLT/U
8QvW68fKZ3V9XHb/s/PL8g8W/7SO72HlE6pfzcZvI/nP+u/V+e+sfaemD+S/
ZekLnd/Jvn9hlZ5VmDXh+/77tjjf963aPlPbByj/zhp/Zs/HVcdXoOfV+Le1
/FfrV9b4H3q/+vxGtf3M5n+w88vGR7L6tzo+RO1fUcsH6/pCrP6lXr/q6vL5
1pq/svcRfs/W17GOj1LbN2r+r6Zv9r46v56NT2fXB+Gz1vStlh8s/hqfd0fa
vsx8l1AVDxfZsvTFylcWv2fxLTU+ya6fWv9U22+Iv7LnX1rbL2r9ommPuzum
Lq4dNJ41a+OpqZud7/sWfV9dP1y9P9X2K4tvsPwd8T9r+4c9n5qlH3V8BPt+
5J9V66/W9M/+H3u+h3X9QrV8UfMHRL+IPhC+rdaf1PkTUL8G9Kc+34u9j+wD
Nf9h5986vtqaP6j1Z1a/Ucs36/gK9H62PqY1fbH6TbTHX7L6C+tfZeOXrPEL
JP/Q/DRfWHL26cwTYXx75HldaHxsfAaLb1rzH2t8mY0fVPMHVv6z8WHW/hlr
/x3Cr1j+a80/1eujlq9IP2HxeXb/+Tqq93Sp07yscnVYV9W3bPwe0m9Q/iGa
H3X8K7s/2fN7rfVr9j57/rTaPlLbZ+r8OTb/Ba2PdX0D9DziH8g/Yx3/8HPJ
/y/XFJc2y1l7Af9G+iWL76rxG/b8Vmv+Z21fsPyL1S/U5yta83d1/iUrP9X1
D63lgxqfsbZfkHxjz69X81e0P9TxMWr+rc7vtD6fVr2/WHzTGp9F9bHR/mTp
Xx3/aG1/qvmrOv6KfT+K31D7vxH9qvkrG7/C8gc2PkStX7P7h61/guqDsvFd
rP6L9BvW/8ryT7V8s9bP2fr/SH9E99Xx6yh/CNEPa5+p8Rt1fUg0flY/srY/
2fPFWf8pq1+o44PZ8/nQ8yh+K9rlsxrfivb4O3R/eMrsmKmvNwiypi8esmHa
HNdxS/HcDfuTwuus/FbHJ7D1C63tL/Z5pB+o6UuN31r7D9j66ez5K+r4elY/
UeuH6HwD1j+ojt+2xn/U+q36fGjr/Dxr/yfyT7Pro6ZPdfw4Gn/O5Jtb1RpX
K8ioGFJUWVLm9qYeXTN5xjfOX7f2f7HxE2r7z5p/sfYLS/9NDu8ZVpBU6dZV
fHqm5dYDLiEuf+SRGRcFvrW2T3YmTnjsdHZi2I5ZXfJB/uiVzvfV9nv7F4+f
6hLEB8OvHZU5tm+hW9Z4yaqP7qoX+Bb9v/r8G/Y+6z+qKb5XnR6v/j82vsl6
/tXynf2+zxPpmVF61bqPd16QP5J0LDm1PLVuMKhzrwdm561wvu9ba3wB0Tdb
H05t36nr57H3rfPPrOPHWP6P8rtZ/sza32p8g8XnrPFHdJ+tD8muv7q+crTj
1yx9sPgwit9D/4fsA1Z+qfEN6/hJ9fwgfJWN37O2b9X3Uf1RtX6F1o/lf2p8
lvV/sfqlWv6i8bHyDe3Pb6vy5n/ESyrCc698y9IHqv+Pzq9G9MHWx1fjHyx9
eRzZ26N+nvx15H9h7Rc2fkd9X51/rMZHWP8l+r7aP8nuP7X/juVf6D5r37H6
sRo/YeWfdX6HWv9Wzx96nvXvIvpR10dU65dqfNJafrLzg/QHdn3R+WDq/YX+
z7o+mZr+1fY1a99a83d1/o21/GXjL9H4oh0fQ/tfjb+o77P0o7Z/rMdnTX9q
+a2u71Iz/VOX/6Guz8jWB/A42ZSHh8btijvmfOuvI/zLOr6G9d+o+Zv19635
A8K3rOOb1fXLrPNDrOlTHV+N+A+yj9D4Uf0Idn3Y/H41/VrnH6r5F4t/WvNP
dv+w+gnrn1DPP7s+av3Q+v/Y+k8b13canrv6ksC3BddNa3Bo3drwerTHL7Hv
Z/EvdvzoeWQfWOeHsOOPdv2P/b4aP1Wvn3X+oxo/YOffmr5rhr9W75+zjo+w
to+s/Rvs/yH7jOUP1vWNrP1L1udHqvVPNX6gXh+1/ELjZ+uzqfFz9P/o+2z9
DhTfyf4/4k/W+K0aP2f1H3X9SzX9q+1vhN+x42fHV51e5/tofGz8BKpvqZYf
LH2x+JcaP2DPh2Lv+zoGvr6Br3fgr7P6BfL/If6kpj9r/486/lCN36n5H7t/
UP4oO36kP6H3I/7E+s+s5ZfafmD9I2r+qrbv1PkX1viQ2r+FxsfmR6j5L6J/
a/8uG1+Gnkf1U6z9w+r69+z5KWr+GO34kfr/1Pi42n5X05daf2jdqU0f93Vi
UHJkfW5J5Yqw71sWP2HHz8bvsPeR/qj2j6P/V8fnsvHBrP6vtg/RfbT+7PnB
1v579vnxVTjbyaVz0iambAtxEX9djV+q+Ssrf1n5gO6r45fQ+NX1g9D/o/h+
a/mL8D1r/VF9H9EHe74kmh9Wf0DjZ+tTovEjfBc9r67/rvZfxefdkbYvM98l
VPmTI1uUX4jej/gHep7lv9F+3xofYenHWn9C+qNaP0LyR40vqPFNa/3QGr9S
549Y4ytsfJpav0fyUW3/9r2/7dInW9QL8s51TR7Tepnzfd+y9jtr/6r3r3X9
ajX9WPsf0Pit45vR+rP1N9XjU+Nz6Pnygu3nRqfE/6+tvbdl0cF3ne+r6Yt9
P4pfQM9HxntFxoGp4wPY+HLr/GcW/1THJ7Hroz5/Qi2fkP6P5D9r/1vPj3r/
qfeX2n5h9T80PjZ+Uy2fWftV/X30flT/Fb1/YfGu1PfTageFWRO+779vi/N9
36L/t86PQvl9LL7M5j+x/j/WP/lzxddXVx9cHZ+O5Jfa/8Gur5p/qesnovGj
8wHU+K+6viCKj2Hfr64/w44P1Y9l9zf6Pqq/z9Kvtfxi/Y/W+Iw1/arlD/o/
Vj9k7S/0f2x8mDp+Wb3/1fgBqx8i/Z21n9T4Easf/tLzk9H52Sz/YvPP1ecv
If732qb5TyXk1g2uTf/q7ZFllwS7F89vsWHHKuevs/Ojxk/Q+9X4EXu+vTX/
Q/Xn1PHzqD6FtX9QjY+r6xtb58eo8xvV68PyXxQfx+IPqH6smj7Y+bGOD0D3
kXxn9Wd1/S/0fcTfkXxA+BJLP2r7XO2fVMefqOnfOn5QLZ/R8wi/Zc9XVcfH
qvFzFt+yrm/I2mfq+E+W/zVfWHL26cwTrqKqzpnHaXzL+g/Y83nZ+tBq+45d
nzFVdeRmft6+fr/HP3K+71tr/RzRDzq/xTp+Qi0/WfnG5jch/zlb31etn6H7
iL+w9jHLn9X509Gen8PKV2v/Bru+av2avc/qT6z9zdq/avsBzY81Pqrmv0g+
7Eyc8Njp7MSwHbO65IP80Sud77Px22x8GFo/Nv5DbZ+p/RNq+42VT9b5M2x8
LDs/O66+5opJyftc7pvpGSvmxQSRrTX+jegf8Q/r+CdWfrH2iVp+W+N7av2W
ld9ofEh+s/T7b1rEBDU=
     "], 
    "CountMatrix" -> {{1324, 1, 14, 0, 0}, {4, 1320, 3, 20, 0}, {0, 15, 492, 
     0, 0}, {0, 0, 0, 465, 0}}, "IndicesMatrix" -> {{CompressedData["
1:eJwl2Gd0COYaB3ArKA2toLUrRdRWW20ximquFW0oNYIqLrGLVI3SGKVGD1Wb
SsUIRVGlKLHHNWrViBkrZmPeX04//M77/f8853ne9y3cqU+L3mnTpElTKiBN
mtQzA5l4hUCCyMkb5KcwwRQlhOKUowIVqUwValCL2tQhlAY0pDFNCaMl4XSg
E12JpBs9+Iy+DGQoXzCM4Ywgmi8ZwzjGM4GJzGAms5nHAhayiKX8TByrWM0a
1rKeLfzOH2xnN3s4zFFOcJLTXOAiV7jGdW6QxC3ucJ9HpPCE57wkNfT0ZCSQ
bOQiN3nITwEKUpgiFKUYIRSnNOUoTwUqUpkq1CSURjSmCc34gOZ8SBitacvH
RNCejnQhkl6kNsogBjOELxhONCMZxWjG8jUxTGQSU5jGdGYwn8UsYRmrWE08
G9jMNnbwJ7s4yFFOcIoznOUCl7nKTe6QzEMe8Zhnqc2dTtykJwMZCSQbr5GL
vOTjLYpQnHcoSWnKUZFKVKU6tahLKM34gJa0ojXhtCWCdnQgkm50pxdRDGAw
wxjOCL5kJOMYTwwTmMxUvmM6M/mRuSxkEcuIYwUrWU08a1jLBn5jK3+yiwT2
sJd97OcABznEYY5wlOOc4yKXSOQKV7nGTW6TzH0ek8ITXqTWIb06EEAmspCV
QHIQRE5y8yZ5KEgh3qYoJSlNeapQlRrUpD6hNOB9mhHGf2hBK1oTTgTt6cCn
dKYr3ehOFAMZzFC+YjRj+JrxTGIq05nFHOYyjyUsJ44VrGI18WzgN7ayjR0k
sJd9HOIoxznL31wikaskcYe73OMRKTzhGekM9QwEkJmsBJKN7OQgiJzk5g3y
UIBCBPM2xSjOO5SgFKUpSyUqU5Ua1KQeoTSkKWG0oBURtKMrPehDP6IYwEC+
IJpvmcr3zGYOc5nPT8QSxwri+YX1bOI3tvAHCexjPwc4yElOcYaznCORy1zh
Gre4zR0e8g9PeMozXqYuTfszHRnIyCu8SiCvkYMgcpOHfOSnEIUpSrGAf/dw
ed6lIlWoRnXeoya1qUt9QmlEC1rSija0pR3t+ZTOdKEr3ehODz6jJ73oQ1+i
GMggBjOUYUQzim+IYRKTmcVs5jGfxSxhKcuIZQWrWcd6NrCJrWxnB/s5yCEO
c4T/cYzjnOQUpznD35wnkcskcYe7JPOIFF7wkjQZzX8CyMQrZCWQbGTndXKQ
h7zkowBvEUwIJSlHed6lApWpTygNaUwYrWhDOO34hA50pBORdKcHPelNH/rS
jyj6M4BBDGEow4jmS0YxhrHEMIFJTOZbpjGDmcxlPgtZxGKWEMty4viFTWxl
N3s4wl/8zUWucp0bPCaFZzznJRlcIgPISGZeJTuvk4MgcpOX/LxNCCUoRRnK
UokqVKM6tahLPUJpxPt8SBgtaE0bwvmYCNrRkUi60Z0efMbn9KYfUQxkGMOJ
ZjTjiWEKU5nGdL5nDgtYRizLWckaNrKV7exkF7vZw16OcIZzXCSRy1zhGtdJ
4ibJ3OMBD0nhKc9Im1lPk5ks5CCIXOTmTfKQl3zkpwDBFCGE4rxDacrwLhWp
TB3qUZ8mNOVDwviI9nxCRzrTlV705r/0I4r+DGIwwxjOCKIZxRjGMo4YJjCF
acxgJrP4gXksYCGLiGUlq1hNPOvZzg52kcA+DnCM45zkNOe4TTL3ecRjnvAi
87+PorSkIz0ZyEwWspKN18lJPgpRmGCKUJRilKIs5ahCVapRnVrUpg51aUBD
GtGYpjQnjJa0Ipy2RNCBjnSlOz3oSR/6MYShjGYs45jAVGbyI3NZxGKWEksc
K/mF9WxgI5v5nW3sJoE97OUghzjMMU7wF+e5SCJXuE4St7hLMve4zwP+IYXn
qdlnkTsBZCIzWchJLvJTgIIUohghlKAkZahGDWpRmzrUoyHNCKMFbQjnIyJo
T3d60ps+9KUf/RnAYIYTzWjGMJavmcJ3TGcmPzKXeSxkKcuJYwWrWE08a1nH
RjaxlW1sZyd/so8DHOMkpzjHeRK5zA2SuEMy93jAY56SNqs8yUp2cvAmBSlM
MEUoRgjFKUEpylKBqlTnPWpRl/o0oBGNaUpzwmnLJ3SgI58SSS96048ohjCU
UYwjholM4lumMI1ZzGYO85jPTywjljhWEM9a1rGeDfzKJjazk10ksId9HOQw
RznBKc5ygUvcIImb3CWZe9znCU95xnNekuZVmRNARgLJThC5yE0BgilGCMUp
RQUqUY1a1Od9mtCUZnxAc8JoQTjt6EgnOtOFSLrRg8+JYgBDGM4IRvIVY4hh
IpOYwndM53tm8QPzmM9CFrOMn4ljBfGsYR0b+JWNbGEbf7CdnexiNwnsYz8H
OMwxjvMXpzjLBS5xhSRucZsHPOUZL0gXqARkJydvkIeCBFOC0pShLOWoSCXe
oya1qU8oDWhIU5rRnDZ8xMe0oz1diKQnn9Ob/xJFfwYwmCEMZRgjGcVYvmEy
05nBbBawiMX8RCzr+JXNbGEHO9lNAnvZzyGOcpzTnOE8F7lEIle5zg2SuMUd
HvCQRzzmH1JSPw+zyZeMZCIb2QkiJwUJpighlKQUpSlHRapSl3qE0oBGNOH/
ZKWsVg==
       "], {3419}, {350, 1096, 1285, 1303, 1517, 1522, 1617, 1725, 
       1851, 1864, 2508, 2974, 3236, 3602}, {}, {}}, {{409, 1727, 1915, 
       2905}, CompressedData["
1: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
       "], {1024, 
       1076, 1238}, {5, 175, 271, 486, 707, 1057, 1081, 1271, 1642, 1826, 
       1947, 2152, 2393, 2406, 2430, 2632, 2853, 3300, 3550, 
       3605}, {}}, {{}, {428, 567, 578, 735, 1136, 1564, 1730, 2414, 2466, 
       2496, 2604, 2621, 3088, 3392, 3400}, CompressedData["
1:eJwV1WtMFmQYBuAPUUJIkTygIEbT1piJi4o5D5CSTEPzkDJ0UeBM1pSYThfh
ctKmEzUjmQeKvmYRUua0AKcTZDn9kQ4ThodEWo6Fk0U/QB0bBV3+uN7353vv
ebb7fW5d4coPQgKBwN+OYe4Iniaa8UwhicUsYQWryCaHXArYwjZKOEoFx6jh
PI38wlV+o407/MEAg4Q8ycAIIhlLLHEkkMxs5vAa80kng8VkspJNFFNGkJPU
Uc9VmmmljXY66aWP/icZDGIkkUQxgRjieZEkZjKPNDJYTCbLyWINeWxkC1vZ
RRmVfMNxTnOGy9zgFu3c5R4P6OYRQwwLtRfimEYyr5BKGvN5m3Ws5302UUAh
29lBCbvZw37KqSBIPee4wEWucINb3OZPunhAD308pJ8BQoYHAqGMZDyTeYnZ
zCGVdNbwLuvYQD4bKWYnpexjP9V8zwlOUUsDl2mjnU566SNkhP0RRTTxTCGR
JObyBsvJZQPb2M7H7OYQh6nkW05TTyO/0sl9+ugnNCwQCCeCMUzhWZ4nkVTm
s4CFvMky3iKbfIoo4RBfEOQ4NfxMLWc5xyWucZ0WeviHXvoIeUomRjGOOOKZ
SzoLWUo2ayhgMx9SzA72UEYV1ZzgJD9RRwMXaeYGN/mdO7Rzj0666WGIsPBA
YDRRjCOBqUxnFrNJYyGryGIteeSzmZ18QikHKOMgQb6mnjM00EQLrXRwj066
6GGA/xhixEj9xzNMJJYEZpDEEpaxgiy2sYt9fE45R6mhlvNcoJlr3OQuHfzL
IKOUbhRjiWEik4hjJilksozVZLOWPNaTz0cUU8JhKjlGFd9RzQ+c4BRnaaCJ
S1zhOi20cpMeHjNEWKS5MIZoxhHDJKYygyReJY0MlrKc1eRQyFaKKKGUvezn
M8qp4iGPeEw/gwz3KUUwmWkkkkwKc0jjdTJYRA5bKWIvX/IVQar5kToaaeIv
7tNNH8NHeY+xxJLAC0znZVKYRSoLWME75JLHexTwKQc4yBEqCFJPEy20cpsO
uhgifLT+JIJoJjCNeWSwiP8B3nv6qg==
       
       "], {}, {}}, {{}, {}, {}, CompressedData["
1:eJwV1WtMF2QUB+C/qRDeRuKl1RQRNBFQkqQ2TaflCAoZYpeZmrdaMCesJawk
s6wpTkKFAYaVVlJSmkmtsLDhBdGVzswIGWmWI2SitDAFuzx9eN7z8d35nbOd
iCXZc1b0CgQCpzy91UHcSThRRBNDHPdxPzOZTRpzWEY2OWygmEr2UMMRjvEj
LVyklT7+DCGU4UQTyzQymM9TLGYJS8kinzUUsYUyytlOFZ9QQy2HaOA4TZzj
d9r5k27+pu8tgcAABhPGSEYTyV2MJ4FEpvIAD5FCOgtYShbZvMhmSihnK29S
RQ37+ZoGfqCJs7TQzmV6uMn/gwkhlNsYxWjGEUsCKTzBIlawkjxeZi1FlFBK
ORV8SBXNXOASnfTrIwvu5RFSSSODx5jHApbxLCt4njxW8wprKaaEUt7nY/by
GTV8Qx2HOcpxztDIBVppY1DfQGAItzONZB4mlcdZTwGFFFPGVt6mhiM0cIJG
OviLoCB9EsYQIohiLOMYzwSmk0Qqi1lKLusooJDN7GIPB6ijnm/5jpOcoZmf
Oc8VurhGD8HB9o5wIogmhjjimc5cXuB11rGRQoopYwfvsZN9fM5X1HKYek5y
inO00k3/WwOBgYxlMkk8ykoKKaKcCnZSyW6q+ZL91HKAOupp4jy/0Uo7VwgK
0SthDGMEkUQTwyTuIZEpzGMhy8khlzzyeZUNbGIbb7GdHVRykHqO8j2n+Ymz
/MJFLtFBNz307icPBjCYYYzhbiaRwGSmMINZJJFMKrOZzyKeIZMc8lhNAW+w
hQqqOUYjTbTwK21cpYvr3OAm/xDcX34MZQThxJPIVB4kmTTSeZpMlrOKfNZQ
ShkfUc1BDlFPAydoppXLXCFkgFwYzkjimMBE4pnJLJJII525PMlCniOX9Wyk
lHd4l085TRtX6aSLa1znBv/Sa6AZEcpQIohiDLHMIIU0MsgkizxW8RKvsY1K
PmAXu9nLPr6gjno66OQP7nAkRxHJWCaSQDL/Aao09iE=
       "], {}}}, 
    "ExtendedClasses" -> {"r1", "r2", "r3", "r5"}, "Weights" -> 
    SparseArray[Automatic, {3658}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 4.754840309708033*^-6, "SingleEvaluationTime" -> 
    0.0015847587507213585`2., "Version" -> {11.3, 0}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.7650253502733045`*^9, 3.765025361897915*^9}},
 CellLabel->"Out[59]=",ExpressionUUID->"b89c1ab5-3b8d-42dc-8c4f-cc961f748600"],

Cell[BoxData["0.9844177145981411`"], "Output",
 CellChangeTimes->{{3.7650253502733045`*^9, 3.765025361897915*^9}},
 CellLabel->"Out[60]=",ExpressionUUID->"a2c56de1-718e-4f2d-a011-697b0a75994f"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2FNKC/3eo/bQ7o39Aw+l0mmsT+0vTDYSWjP1
JE71RfvFf3X0vrXX+33hOXf3K/sSrcDoZ1yP7G8aikSVfnhtH2RXX7Fk3WN7
FkW1BV/E9+E051J98KrMf2/tNfr5+KeavrFPexOlGZ3wzN7b0VJRxP+9/c4N
CdbHHe7Y+5ybb/ZybqD9yo/b2phM39kv3VzE+oT5rf0M04l5vyte2BtM42P1
DX1rH7XVwrN320v7Z04W22OP3Ifb87BKZJ37w1v2sBCLvuisyZLzzr7iweOn
+y6/td+vl960cOore0/D6muKR97ar5I3vRcV+dp+WXH7gjblJzjdDwDc7oYP

   "], {{0, 0}, {4, 4}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1324", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1324", "\" examples of \"", "\"r1\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.9969879518072289`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.9887976101568334`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.9928758905136856`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1324, " examples of ", "r1", " correctly classified"}], 
         Row[{"Precision = ", 0.9969879518072289}], 
         Row[{"Recall = ", 0.9887976101568334}], 
         Row[{"FScore = ", 0.9928758905136856}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["4", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "4", "\" examples of \"", "\"r2\"", "\" misclassified as \"", 
             "\"r1\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.0030120481927710845`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.002969561989606533`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{4, " examples of ", "r2", " misclassified as ", "r1"}], 
         Row[{"Column fraction = ", 0.0030120481927710845`}], 
         Row[{"Row fraction = ", 0.002969561989606533}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"r3\"", "\" misclassified as \"", 
             "\"r1\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "r3", " misclassified as ", "r1"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"r5\"", "\" misclassified as \"", 
             "\"r1\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "r5", " misclassified as ", "r1"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"r1\"", "\" misclassified as \"", 
             "\"r2\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.0007485029940119761`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.0007468259895444362`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "r1", " misclassified as ", "r2"}], 
         Row[{"Column fraction = ", 0.0007485029940119761}], 
         Row[{"Row fraction = ", 0.0007468259895444362}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1320", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1320", "\" examples of \"", "\"r2\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.9880239520958084`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.9799554565701559`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.9839731643682444`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1320, " examples of ", "r2", " correctly classified"}], 
         Row[{"Precision = ", 0.9880239520958084}], 
         Row[{"Recall = ", 0.9799554565701559}], 
         Row[{"FScore = ", 0.9839731643682444}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["15", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "15", "\" examples of \"", "\"r3\"", "\" misclassified as \"", 
             "\"r2\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.01122754491017964`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.029585798816568046`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{15, " examples of ", "r3", " misclassified as ", "r2"}], 
         Row[{"Column fraction = ", 0.01122754491017964}], 
         Row[{"Row fraction = ", 0.029585798816568046`}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"r5\"", "\" misclassified as \"", 
             "\"r2\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "r5", " misclassified as ", "r2"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["14", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "14", "\" examples of \"", "\"r1\"", "\" misclassified as \"", 
             "\"r3\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.0275049115913556`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.010455563853622106`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{14, " examples of ", "r1", " misclassified as ", "r3"}], 
         Row[{"Column fraction = ", 0.0275049115913556}], 
         Row[{"Row fraction = ", 0.010455563853622106`}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["3", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "3", "\" examples of \"", "\"r2\"", "\" misclassified as \"", 
             "\"r3\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.005893909626719057`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.0022271714922048997`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{3, " examples of ", "r2", " misclassified as ", "r3"}], 
         Row[{"Column fraction = ", 0.005893909626719057}], 
         Row[{"Row fraction = ", 0.0022271714922048997`}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["492", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "492", "\" examples of \"", "\"r3\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.9666011787819253`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.9704142011834319`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.968503937007874`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{492, " examples of ", "r3", " correctly classified"}], 
         Row[{"Precision = ", 0.9666011787819253}], 
         Row[{"Recall = ", 0.9704142011834319}], 
         Row[{"FScore = ", 0.968503937007874}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"r5\"", "\" misclassified as \"", 
             "\"r3\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "r5", " misclassified as ", "r3"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"r1\"", "\" misclassified as \"", 
             "\"r5\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "r1", " misclassified as ", "r5"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["20", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "20", "\" examples of \"", "\"r2\"", "\" misclassified as \"", 
             "\"r5\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.041237113402061855`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.014847809948032665`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{20, " examples of ", "r2", " misclassified as ", "r5"}], 
         Row[{"Column fraction = ", 0.041237113402061855`}], 
         Row[{"Row fraction = ", 0.014847809948032665`}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"r3\"", "\" misclassified as \"", 
             "\"r5\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "r3", " misclassified as ", "r5"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["465", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "465", "\" examples of \"", "\"r5\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.9587628865979382`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.9789473684210526`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{465, " examples of ", "r5", " correctly classified"}], 
         Row[{"Precision = ", 0.9587628865979382}], 
         Row[{"Recall = ", 1.}], 
         Row[{"FScore = ", 0.9789473684210526}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1339", "\" example\"", "\"s\"", "\" of class \"", "\"r1\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.9887976101568334`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1339, " example", "s", " of class ", "r1"}], 
        Row[{"Recall = ", 0.9887976101568334}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1347", "\" example\"", "\"s\"", "\" of class \"", "\"r2\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.9799554565701559`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1347, " example", "s", " of class ", "r2"}], 
        Row[{"Recall = ", 0.9799554565701559}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "507", "\" example\"", "\"s\"", "\" of class \"", "\"r3\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.9704142011834319`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{507, " example", "s", " of class ", "r3"}], 
        Row[{"Recall = ", 0.9704142011834319}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "465", "\" example\"", "\"s\"", "\" of class \"", "\"r5\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{465, " example", "s", " of class ", "r5"}], 
        Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1328", "\" example\"", "\"s\"", "\" classified as \"", "\"r1\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.9969879518072289`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1328, " example", "s", " classified as ", "r1"}], 
        Row[{"Precision = ", 0.9969879518072289}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1336", "\" example\"", "\"s\"", "\" classified as \"", "\"r2\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.9880239520958084`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1336, " example", "s", " classified as ", "r2"}], 
        Row[{"Precision = ", 0.9880239520958084}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "509", "\" example\"", "\"s\"", "\" classified as \"", "\"r3\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.9666011787819253`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{509, " example", "s", " classified as ", "r3"}], 
        Row[{"Precision = ", 0.9666011787819253}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "485", "\" example\"", "\"s\"", "\" classified as \"", "\"r5\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.9587628865979382`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{485, " example", "s", " classified as ", "r5"}], 
        Row[{"Precision = ", 0.9587628865979382}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{3.5, 
       FormBox[
        RotationBox["\"r1\"", BoxRotation -> 0.], TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["\"r2\"", BoxRotation -> 0.], TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"r3\"", BoxRotation -> 0.], TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["\"r5\"", BoxRotation -> 0.], TraditionalForm]}}, {{3.5, 
       FormBox["1339", TraditionalForm]}, {2.5, 
       FormBox["1347", TraditionalForm]}, {1.5, 
       FormBox["507", TraditionalForm]}, {0.5, 
       FormBox["465", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["1328", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["1336", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["509", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["485", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"r1\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"r2\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["\"r3\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {3.5, 
       FormBox[
        RotationBox["\"r5\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{{3.7650253502733045`*^9, 3.765025362085433*^9}},
 CellLabel->"Out[61]=",ExpressionUUID->"9e769d92-a201-4083-b522-730809d58a13"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1025, 965},
WindowMargins->{{-9, Automatic}, {Automatic, 0}},
TaggingRules->{"SlideShow" -> True},
Magnification:>1.3 Inherited,
FrontEndVersion->"11.3 for Microsoft Windows (64-bit) (March 6, 2018)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell[
    CellGroupData[{
      Cell["Style Environment Names", "Section"], 
      Cell[
       StyleData[All, "Working"]], 
      Cell[
       StyleData[All, "Presentation"], MenuSortingValue -> None], 
      Cell[
       StyleData[All, "Condensed"], MenuSortingValue -> None], 
      Cell[
       StyleData[All, "SlideShow"]]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell["Notebook Options Settings", "Section"], 
      Cell[
       StyleData["Notebook"], 
       CellBracketOptions -> {
        "Color" -> RGBColor[0.739193, 0.750317, 0.747173]}]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell["Styles for Title and Section Cells", "Section"], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Title"], ShowCellBracket -> Automatic, ShowGroupOpener -> 
          False, CellMargins -> {{100, 100}, {14, 50}}, 
          CellGroupingRules -> {"TitleGrouping", 0}, PageBreakBelow -> False, 
          CellFrameMargins -> {{20, 20}, {20, 20}}, DefaultNewInlineCellStyle -> 
          "None", InputAutoReplacements -> {"TeX" -> StyleBox[
              RowBox[{"T", 
                AdjustmentBox[
                "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                 BoxBaselineShift -> 0.5], "X"}]], "LaTeX" -> StyleBox[
              RowBox[{"L", 
                StyleBox[
                 AdjustmentBox[
                 "A", BoxMargins -> {{-0.36, -0.1}, {0, 0}}, 
                  BoxBaselineShift -> -0.2], FontSize -> Smaller], "T", 
                AdjustmentBox[
                "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                 BoxBaselineShift -> 0.5], "X"}]], "mma" -> "Mathematica", 
            "Mma" -> "Mathematica", "MMA" -> "Mathematica", "gridMathematica" -> 
            FormBox[
              RowBox[{"grid", 
                AdjustmentBox[
                 StyleBox["Mathematica", FontSlant -> "Italic"], 
                 BoxMargins -> {{-0.175, 0}, {0, 0}}]}], TextForm], 
            "webMathematica" -> FormBox[
              RowBox[{"web", 
                AdjustmentBox[
                 StyleBox["Mathematica", FontSlant -> "Italic"], 
                 BoxMargins -> {{-0.175, 0}, {0, 0}}]}], TextForm], 
            Inherited}, TextAlignment -> Center, LineSpacing -> {1, 0}, 
          LanguageCategory -> "NaturalLanguage", CounterIncrements -> "Title",
           CounterAssignments -> {{"Section", 0}, {"Equation", 0}, {
            "Figure", 0}, {"Subtitle", 0}, {"Subsubtitle", 0}}, FontFamily -> 
          "Arial", FontSize -> 45, FontWeight -> "Bold", FontSlant -> "Plain",
           FontTracking -> "Plain", 
          FontVariations -> {
           "Outline" -> False, "Shadow" -> False, "StrikeThrough" -> False, 
            "Underline" -> False}, FontColor -> 
          RGBColor[
           0.8156862745098039, 0.07058823529411765, 0.07058823529411765], 
          Background -> None, FontVariations -> {"Masked" -> False}], 
         Cell[
          StyleData["Title", "Presentation", StyleDefinitions -> None], 
          CellMargins -> {{55, 3}, {14, 125}}, LineSpacing -> {1, 5}, 
          FontSize -> 48], 
         Cell[
          StyleData[
          "Title", "SlideShow", StyleDefinitions -> 
           StyleData["Title", "Presentation"]], 
          CellMargins -> {{100, 100}, {52, 105}}, FontColor -> GrayLevel[1]], 
         
         Cell[
          StyleData["Title", "Printout", StyleDefinitions -> None], 
          CellMargins -> {{2, 0}, {0, 20}}, FontSize -> 24]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Subtitle"], ShowCellBracket -> Automatic, 
          CellMargins -> {{0, 0}, {0, 5}}, 
          CellGroupingRules -> {"TitleGrouping", 10}, PageBreakBelow -> False,
           DefaultNewInlineCellStyle -> "None", 
          InputAutoReplacements -> {"TeX" -> StyleBox[
              RowBox[{"T", 
                AdjustmentBox[
                "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                 BoxBaselineShift -> 0.5], "X"}]], "LaTeX" -> StyleBox[
              RowBox[{"L", 
                StyleBox[
                 AdjustmentBox[
                 "A", BoxMargins -> {{-0.36, -0.1}, {0, 0}}, 
                  BoxBaselineShift -> -0.2], FontSize -> Smaller], "T", 
                AdjustmentBox[
                "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                 BoxBaselineShift -> 0.5], "X"}]], "mma" -> "Mathematica", 
            "Mma" -> "Mathematica", "MMA" -> "Mathematica", "gridMathematica" -> 
            FormBox[
              RowBox[{"grid", 
                AdjustmentBox[
                 StyleBox["Mathematica", FontSlant -> "Italic"], 
                 BoxMargins -> {{-0.175, 0}, {0, 0}}]}], TextForm], 
            "webMathematica" -> FormBox[
              RowBox[{"web", 
                AdjustmentBox[
                 StyleBox["Mathematica", FontSlant -> "Italic"], 
                 BoxMargins -> {{-0.175, 0}, {0, 0}}]}], TextForm], 
            Inherited}, TextAlignment -> Center, LanguageCategory -> 
          "NaturalLanguage", CounterIncrements -> "Subtitle", 
          CounterAssignments -> {{"Section", 0}, {"Equation", 0}, {
            "Figure", 0}, {"Subsubtitle", 0}}, FontFamily -> "Arial", 
          FontSize -> 27, FontWeight -> "Plain", FontSlant -> "Plain", 
          FontColor -> RGBColor[0.4, 0.4, 0.4], Background -> None], 
         Cell[
          StyleData["Subtitle", "Presentation", StyleDefinitions -> None], 
          CellMargins -> {{58, 0}, {0, 5}}, FontSize -> 36], 
         Cell[
          StyleData[
          "Subtitle", "SlideShow", StyleDefinitions -> StyleData["Subtitle"]],
           CellMargins -> {{0, 0}, {0, 5}}, FontSize -> 27, FontColor -> 
          RGBColor[
           0.9019607843137255, 0.9019607843137255, 0.9019607843137255]], 
         Cell[
          StyleData["Subtitle", "Printout", StyleDefinitions -> None], 
          CellMargins -> {{2, 0}, {0, 5}}, FontSize -> 18, Background -> 
          GrayLevel[1]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Subsubtitle", StyleDefinitions -> StyleData["Subtitle"]],
           CellMargins -> {{0, 0}, {30, 5}}, FontSize -> 24, FontSlant -> 
          "Plain", FontColor -> RGBColor[0.4, 0.4, 0.4]], 
         Cell[
          StyleData["Subsubtitle", "Presentation"], FontSize -> 24], 
         Cell[
          StyleData[
          "Subsubtitle", "SlideShow", StyleDefinitions -> 
           StyleData["Subsubtitle"]], CellMargins -> {{0, 0}, {10, 5}}, 
          FontColor -> 
          RGBColor[
           0.9019607843137255, 0.9019607843137255, 0.9019607843137255]], 
         Cell[
          StyleData["Subsubtitle", "Printout"], FontSize -> 14]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Section"], CellFrame -> {{0, 0}, {0.2, 0}}, 
          ShowGroupOpener -> False, CellMargins -> {{60, 50}, {7, 25}}, 
          FontSize -> 36, FontWeight -> "Plain", FontColor -> 
          RGBColor[
           0.8156862745098039, 0.07058823529411765, 0.07058823529411765]], 
         Cell[
          StyleData["Section", "Presentation"], 
          CellFrame -> {{0, 0}, {0.2, 0}}, 
          CellMargins -> {{58, 50}, {7, 35}}], 
         Cell[
          StyleData[
          "Section", "SlideShow", StyleDefinitions -> 
           StyleData["Section", "Presentation"]], 
          CellMargins -> {{58, 50}, {10, 35}}], 
         Cell[
          StyleData["Section", "Printout"], ShowGroupOpener -> False, 
          CellMargins -> {{2, 0}, {4, 22}}, FontSize -> 20]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Subsection"], CellDingbat -> None, ShowGroupOpener -> 
          False, CellMargins -> {{60, Inherited}, {0, 15}}, 
          CellGroupingRules -> {"SectionGrouping", 40}, PageBreakBelow -> 
          False, DefaultNewInlineCellStyle -> "None", 
          InputAutoReplacements -> {"TeX" -> StyleBox[
              RowBox[{"T", 
                AdjustmentBox[
                "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                 BoxBaselineShift -> 0.5], "X"}]], "LaTeX" -> StyleBox[
              RowBox[{"L", 
                StyleBox[
                 AdjustmentBox[
                 "A", BoxMargins -> {{-0.36, -0.1}, {0, 0}}, 
                  BoxBaselineShift -> -0.2], FontSize -> Smaller], "T", 
                AdjustmentBox[
                "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                 BoxBaselineShift -> 0.5], "X"}]], "mma" -> "Mathematica", 
            "Mma" -> "Mathematica", "MMA" -> "Mathematica", "gridMathematica" -> 
            FormBox[
              RowBox[{"grid", 
                AdjustmentBox[
                 StyleBox["Mathematica", FontSlant -> "Italic"], 
                 BoxMargins -> {{-0.175, 0}, {0, 0}}]}], TextForm], 
            "webMathematica" -> FormBox[
              RowBox[{"web", 
                AdjustmentBox[
                 StyleBox["Mathematica", FontSlant -> "Italic"], 
                 BoxMargins -> {{-0.175, 0}, {0, 0}}]}], TextForm], 
            Inherited}, LanguageCategory -> "NaturalLanguage", 
          CounterIncrements -> "Subsection", 
          CounterAssignments -> {{"Subsubsection", 0}}, FontFamily -> 
          "Helvetica", FontSize -> 24, FontWeight -> "Plain", FontSlant -> 
          "Plain", FontColor -> RGBColor[0.4, 0.4, 0.4]], 
         Cell[
          StyleData["Subsection", "Presentation"], ShowGroupOpener -> True, 
          WholeCellGroupOpener -> True, CellMargins -> {{60, 50}, {0, 20}}, 
          LineSpacing -> {1, 0}, FontFamily -> "Helvetica"], 
         Cell[
          StyleData["Subsection", "SlideShow"], ShowGroupOpener -> True, 
          WholeCellGroupOpener -> True, CellMargins -> {{60, 50}, {8, 12}}, 
          LineSpacing -> {1, 0}, FontFamily -> "Helvetica"], 
         Cell[
          StyleData["Subsection", "Printout"], ShowGroupOpener -> False, 
          CellMargins -> {{2, 0}, {0, 17}}, FontSize -> 16]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Subsubsection"], CellDingbat -> None, ShowGroupOpener -> 
          False, CellMargins -> {{60, Inherited}, {0, 15}}, 
          CellGroupingRules -> {"SectionGrouping", 50}, PageBreakBelow -> 
          False, DefaultNewInlineCellStyle -> "None", 
          InputAutoReplacements -> {"TeX" -> StyleBox[
              RowBox[{"T", 
                AdjustmentBox[
                "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                 BoxBaselineShift -> 0.5], "X"}]], "LaTeX" -> StyleBox[
              RowBox[{"L", 
                StyleBox[
                 AdjustmentBox[
                 "A", BoxMargins -> {{-0.36, -0.1}, {0, 0}}, 
                  BoxBaselineShift -> -0.2], FontSize -> Smaller], "T", 
                AdjustmentBox[
                "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                 BoxBaselineShift -> 0.5], "X"}]], "mma" -> "Mathematica", 
            "Mma" -> "Mathematica", "MMA" -> "Mathematica", "gridMathematica" -> 
            FormBox[
              RowBox[{"grid", 
                AdjustmentBox[
                 StyleBox["Mathematica", FontSlant -> "Italic"], 
                 BoxMargins -> {{-0.175, 0}, {0, 0}}]}], TextForm], 
            "webMathematica" -> FormBox[
              RowBox[{"web", 
                AdjustmentBox[
                 StyleBox["Mathematica", FontSlant -> "Italic"], 
                 BoxMargins -> {{-0.175, 0}, {0, 0}}]}], TextForm], 
            Inherited}, LanguageCategory -> "NaturalLanguage", 
          CounterIncrements -> "Subsubsection", FontFamily -> "Helvetica", 
          FontSize -> 20, FontWeight -> "Plain", FontSlant -> "Plain", 
          FontColor -> RGBColor[0.4, 0.4, 0.4]], 
         Cell[
          StyleData["Subsubsection", "Presentation"], ShowGroupOpener -> True,
           WholeCellGroupOpener -> True, CellMargins -> {{60, 50}, {0, 20}}, 
          LineSpacing -> {1, 0}], 
         Cell[
          StyleData[
          "Subsubsection", "SlideShow", StyleDefinitions -> 
           StyleData["Subsubsection", "Presentation"]]], 
         Cell[
          StyleData["Subsubsection", "Printout"], ShowGroupOpener -> False, 
          CellMargins -> {{2, 0}, {0, 22}}, FontSize -> 14]}, Closed]]}, 
     Closed]], 
   Cell[
    CellGroupData[{
      Cell["Styles for Body Text", "Section"], 
      Cell[
       CellGroupData[{
         Cell["Standard", "Subsection"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Text"], CellMargins -> {{60, 10}, {7, 7}}, 
             InputAutoReplacements -> {"TeX" -> StyleBox[
                 RowBox[{"T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "LaTeX" -> StyleBox[
                 RowBox[{"L", 
                   StyleBox[
                    AdjustmentBox[
                    "A", BoxMargins -> {{-0.36, -0.1}, {0, 0}}, 
                    BoxBaselineShift -> -0.2], FontSize -> Smaller], "T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "mma" -> "Mathematica", 
               "Mma" -> "Mathematica", "MMA" -> "Mathematica", 
               "gridMathematica" -> FormBox[
                 RowBox[{"grid", 
                   AdjustmentBox[
                    StyleBox["Mathematica", FontSlant -> "Italic"], 
                    BoxMargins -> {{-0.175, 0}, {0, 0}}]}], TextForm], 
               "webMathematica" -> FormBox[
                 RowBox[{"web", 
                   AdjustmentBox[
                    StyleBox["Mathematica", FontSlant -> "Italic"], 
                    BoxMargins -> {{-0.175, 0}, {0, 0}}]}], TextForm], 
               Inherited}, LineSpacing -> {1, 3}, CounterIncrements -> "Text",
              FontFamily -> "Helvetica", FontSize -> 12], 
            Cell[
             StyleData["Text", "Presentation"], 
             CellMargins -> {{60, 50}, {10, 10}}, FontSize -> 17], 
            Cell[
             StyleData[
             "Text", "SlideShow", StyleDefinitions -> 
              StyleData["Text", "Presentation"]]], 
            Cell[
             StyleData["Text", "Printout"], CellMargins -> {{2, 2}, {6, 6}}, 
             TextJustification -> 0.5, Hyphenation -> True, FontSize -> 10]}, 
           Closed]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell["Display", "Subsection"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Item", StyleDefinitions -> StyleData["Text"]], 
             CellDingbat -> 
             Cell["\[FilledSmallCircle]", FontWeight -> "Bold"], 
             ShowGroupOpener -> False, CellMargins -> {{84, 10}, {7, 7}}, 
             ReturnCreatesNewCell -> True, 
             CellGroupingRules -> {"GroupTogetherNestedGrouping", 15000}, 
             CounterIncrements -> "Item"], 
            Cell[
             StyleData["Item", "Presentation"], 
             CellMargins -> {{124, 10}, {7, 7}}], 
            Cell[
             StyleData[
             "Item", "SlideShow", StyleDefinitions -> 
              StyleData["Item", "Presentation"]]], 
            Cell[
             StyleData["Item", "Printout"], 
             CellMargins -> {{39, 2}, {0, 6}}]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Subitem", StyleDefinitions -> StyleData["Item"]], 
             CellMargins -> {{108, 10}, {7, 7}}, ReturnCreatesNewCell -> True,
              CellGroupingRules -> {"GroupTogetherNestedGrouping", 15150}, 
             CounterIncrements -> "Subitem"], 
            Cell[
             StyleData["Subitem", "Presentation"], 
             CellMargins -> {{146, 10}, {7, 7}}], 
            Cell[
             StyleData[
             "Subitem", "SlideShow", StyleDefinitions -> 
              StyleData["Subitem", "Presentation"]]], 
            Cell[
             StyleData["Subitem", "Printout"], 
             CellMargins -> {{67, 2}, {0, 6}}]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["ItemNumbered", StyleDefinitions -> StyleData["Text"]],
              CellDingbat -> Cell[
               TextData[{
                 CounterBox["ItemNumbered"], "."}]], ShowGroupOpener -> False,
              CellMargins -> {{84, 10}, {7, 7}}, ReturnCreatesNewCell -> True,
              CellGroupingRules -> {"GroupTogetherNestedGrouping", 15000}, 
             CounterIncrements -> "ItemNumbered"], 
            Cell[
             StyleData["ItemNumbered", "Presentation"], 
             CellMargins -> {{124, 10}, {7, 7}}], 
            Cell[
             StyleData[
             "ItemNumbered", "SlideShow", StyleDefinitions -> 
              StyleData["ItemNumbered", "Presentation"]]], 
            Cell[
             StyleData["ItemNumbered", "Printout"], 
             CellMargins -> {{39, 2}, {0, 6}}]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "SubitemNumbered", StyleDefinitions -> 
              StyleData["ItemNumbered"]], CellDingbat -> Cell[
               TextData[{
                 CounterBox["SubitemNumbered", CounterFunction :> (Part[
                    CharacterRange["a", "z"], #]& )], "."}]], 
             CellMargins -> {{108, 10}, {7, 7}}, ReturnCreatesNewCell -> True,
              CellGroupingRules -> {"GroupTogetherNestedGrouping", 15150}, 
             CounterIncrements -> "SubitemNumbered"], 
            Cell[
             StyleData["SubitemNumbered", "Presentation"], 
             CellMargins -> {{146, 10}, {7, 7}}], 
            Cell[
             StyleData[
             "SubitemNumbered", "SlideShow", StyleDefinitions -> 
              StyleData["SubitemNumbered", "Presentation"]]], 
            Cell[
             StyleData["SubitemNumbered", "Printout"], 
             CellMargins -> {{67, 2}, {0, 6}}]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "ItemParagraph", StyleDefinitions -> StyleData["Item"]], 
             CellDingbat -> None, CellMargins -> {{84, 10}, {7, 7}}, 
             ReturnCreatesNewCell -> True, 
             CellGroupingRules -> {"GroupTogetherNestedGrouping", 15100}, 
             CounterIncrements -> "ItemParagraph"], 
            Cell[
             StyleData["ItemParagraph", "Presentation"], 
             CellMargins -> {{124, 10}, {7, 7}}], 
            Cell[
             StyleData[
             "ItemParagraph", "SlideShow", StyleDefinitions -> 
              StyleData["ItemParagraph", "Presentation"]]], 
            Cell[
             StyleData["ItemParagraph", "Printout"], 
             CellMargins -> {{39, 2}, {0, 6}}]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData[
             "SubitemParagraph", StyleDefinitions -> StyleData["Subitem"]], 
             CellDingbat -> None, ReturnCreatesNewCell -> True, 
             CellGroupingRules -> {"GroupTogetherNestedGrouping", 15200}, 
             CounterIncrements -> "SubitemParagraph"], 
            Cell[
             StyleData["SubitemParagraph", "Presentation"]], 
            Cell[
             StyleData[
             "SubitemParagraph", "SlideShow", StyleDefinitions -> 
              StyleData["SubitemParagraph", "Presentation"]]], 
            Cell[
             StyleData["SubitemParagraph", "Printout"]]}, Closed]]}, Open]]}, 
     Closed]], 
   Cell[
    CellGroupData[{
      Cell["Styles for Formulas and Programming", "Section"], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["DisplayFormula"]], 
         Cell[
          StyleData["DisplayFormula", "Presentation"], 
          CellMargins -> {{60, Inherited}, {Inherited 1.5, Inherited 1.5}}, 
          FontSize -> 17], 
         Cell[
          StyleData[
          "DisplayFormula", "SlideShow", StyleDefinitions -> 
           StyleData["DisplayFormula", "Presentation"]]], 
         Cell[
          StyleData["DisplayFormula", "Printout"], 
          CellMargins -> {{39, Inherited}, {Inherited, Inherited}}, FontSize -> 
          10]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData[
          "DisplayFormulaNumbered", StyleDefinitions -> 
           StyleData["DisplayFormula"]], CellFrameLabels -> {{None, 
             Cell[
              TextData[{"(", 
                CounterBox["DisplayFormulaNumbered"], ")"}]]}, {None, None}}, 
          CounterIncrements -> "DisplayFormulaNumbered"], 
         Cell[
          StyleData["DisplayFormulaNumbered", "Presentation"], 
          CellMargins -> {{60, Inherited}, {Inherited 1.5, Inherited 1.5}}, 
          FontSize -> 17], 
         Cell[
          StyleData[
          "DisplayFormulaNumbered", "SlideShow", StyleDefinitions -> 
           StyleData["DisplayFormulaNumbered", "Presentation"]]], 
         Cell[
          StyleData["DisplayFormulaNumbered", "Printout"], 
          CellMargins -> {{39, Inherited}, {Inherited, Inherited}}]}, 
        Closed]]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell["Styles for Inline Formatting", "Section"], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["InlineFormula"]], 
         Cell[
          StyleData["InlineFormula", "Presentation"], FontSize -> 17], 
         Cell[
          StyleData[
          "InlineFormula", "SlideShow", StyleDefinitions -> 
           StyleData["InlineFormula", "Presentation"]]], 
         Cell[
          StyleData["InlineFormula", "Printout"]]}, Closed]]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell["Styles for Input and Output Cells", "Section"], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Input"], ShowCellBracket -> True, ShowGroupOpener -> 
          False, CellMargins -> {{103, 10}, {5, 7}}, 
          CellBracketOptions -> {
           "Color" -> RGBColor[0.734936, 0.713848, 0.694041]}, Evaluatable -> 
          True, CellGroupingRules -> "InputGrouping", CellHorizontalScrolling -> 
          True, PageBreakWithin -> False, GroupPageBreakWithin -> False, 
          DefaultFormatType -> DefaultInputFormatType, 
          "TwoByteSyntaxCharacterAutoReplacement" -> True, 
          HyphenationOptions -> {"HyphenationCharacter" -> "\[Continuation]"},
           AutoItalicWords -> {}, LanguageCategory -> "Mathematica", 
          FormatType -> InputForm, ShowStringCharacters -> True, NumberMarks -> 
          True, LinebreakAdjustments -> {0.85, 2, 10, 0, 1}, 
          CounterIncrements -> "Input", FontWeight -> "Bold"], 
         Cell[
          StyleData["Input", "Presentation"], 
          CellMargins -> {{110, 50}, {8, 10}}, LineSpacing -> {1, 0}, 
          FontSize -> 17], 
         Cell[
          StyleData[
          "Input", "SlideShow", StyleDefinitions -> 
           StyleData["Input", "Presentation"]]], 
         Cell[
          StyleData["Input", "Printout"], CellMargins -> {{39, 0}, {4, 6}}, 
          LinebreakAdjustments -> {0.85, 2, 10, 1, 1}, FontSize -> 9]}, 
        Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["InputOnly"], ShowCellBracket -> True, ShowGroupOpener -> 
          False, CellMargins -> {{103, 10}, {7, 7}}, 
          CellBracketOptions -> {
           "Color" -> RGBColor[0.734936, 0.713848, 0.694041]}, Evaluatable -> 
          True, CellGroupingRules -> "InputGrouping", CellHorizontalScrolling -> 
          True, DefaultFormatType -> DefaultInputFormatType, 
          "TwoByteSyntaxCharacterAutoReplacement" -> True, 
          HyphenationOptions -> {"HyphenationCharacter" -> "\[Continuation]"},
           AutoItalicWords -> {}, LanguageCategory -> "Mathematica", 
          FormatType -> InputForm, ShowStringCharacters -> True, NumberMarks -> 
          True, LinebreakAdjustments -> {0.85, 2, 10, 0, 1}, 
          CounterIncrements -> "Input", MenuSortingValue -> 1550, FontWeight -> 
          "Bold"], 
         Cell[
          StyleData["InputOnly", "Presentation"], 
          CellMargins -> {{110, Inherited}, {8, 10}}, LineSpacing -> {1, 0}, 
          FontSize -> 17], 
         Cell[
          StyleData[
          "InputOnly", "SlideShow", StyleDefinitions -> 
           StyleData["InputOnly", "Presentation"]]], 
         Cell[
          StyleData["InputOnly", "Printout"], 
          CellMargins -> {{39, 0}, {4, 6}}, 
          LinebreakAdjustments -> {0.85, 2, 10, 1, 1}, FontSize -> 9]}, 
        Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Output"], ShowCellBracket -> True, 
          CellMargins -> {{103, 10}, {7, 5}}, 
          CellBracketOptions -> {
           "Color" -> RGBColor[0.734936, 0.713848, 0.694041]}, 
          CellEditDuplicate -> True, CellGroupingRules -> "OutputGrouping", 
          CellHorizontalScrolling -> True, PageBreakWithin -> False, 
          GroupPageBreakWithin -> False, GeneratedCell -> True, 
          CellAutoOverwrite -> True, DefaultFormatType -> 
          DefaultOutputFormatType, "TwoByteSyntaxCharacterAutoReplacement" -> 
          True, HyphenationOptions -> {
           "HyphenationCharacter" -> "\[Continuation]"}, 
          AutoItalicWords -> {}, LanguageCategory -> None, FormatType -> 
          InputForm, CounterIncrements -> "Output"], 
         Cell[
          StyleData["Output", "Presentation"], 
          CellMargins -> {{110, 50}, {10, 8}}, LineSpacing -> {1, 0}, 
          FontSize -> 17], 
         Cell[
          StyleData[
          "Output", "SlideShow", StyleDefinitions -> 
           StyleData["Output", "Presentation"]]], 
         Cell[
          StyleData["Output", "Printout"], CellMargins -> {{39, 0}, {6, 4}}, 
          FontSize -> 9]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Code"], CellMargins -> {{103, 10}, {5, 10}}], 
         Cell[
          StyleData["Code", "Presentation"], 
          CellMargins -> {{110, 50}, {8, 10}}, LineSpacing -> {1, 0}, 
          FontSize -> 17], 
         Cell[
          StyleData[
          "Code", "SlideShow", StyleDefinitions -> 
           StyleData["Code", "Presentation"]]], 
         Cell[
          StyleData["Code", "Printout"], CellMargins -> {{39, 0}, {4, 6}}, 
          LinebreakAdjustments -> {0.85, 2, 10, 1, 1}, FontSize -> 9]}, 
        Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Print"], 
          CellMargins -> {{103, Inherited}, {Inherited, Inherited}}, FontSize -> 
          14], 
         Cell[
          StyleData["Print", "Presentation"], 
          CellMargins -> {{70, Inherited}, {Inherited 1.5, Inherited 1.5}}, 
          FontSize -> 17, Magnification -> Inherited 1.5], 
         Cell[
          StyleData[
          "Print", "SlideShow", StyleDefinitions -> 
           StyleData["Print", "Presentation"]]], 
         Cell[
          StyleData["Print", "Printout"], 
          CellMargins -> {{39, Inherited}, {Inherited, Inherited}}]}, 
        Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData[
          "WolframAlphaShortInput", StyleDefinitions -> StyleData["Input"]], 
          CellMargins -> {{98, 10}, {5, 7}}, EvaluationMode -> 
          "WolframAlphaShort", 
          CellEventActions -> {"ReturnKeyDown" :> FrontEndTokenExecute[
              EvaluationNotebook[], "HandleShiftReturn"]}, 
          CellFrameLabels -> {{
             Cell[
              BoxData[
               DynamicBox[
                FEPrivate`FrontEndResource["WABitmaps", "Equal"]]], 
              CellBaseline -> Baseline], None}, {None, None}}, FormatType -> 
          TextForm, FontFamily -> "Helvetica"], 
         Cell[
          StyleData["WolframAlphaShortInput", "Presentation"], 
          CellMargins -> {{107, 50}, {8, 10}}], 
         Cell[
          StyleData[
          "WolframAlphaShortInput", "SlideShow", StyleDefinitions -> 
           StyleData["WolframAlphaShortInput", "Presentation"]]], 
         Cell[
          StyleData["WolframAlphaShortInput", "Printout"], 
          CellFrameLabelMargins -> 3]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData[
          "WolframAlphaLong", StyleDefinitions -> StyleData["Input"]], 
          CellMargins -> {{100, 10}, {5, 7}}, 
          StyleKeyMapping -> {
           "=" -> "Input", "Backspace" -> "WolframAlphaShort"}, 
          EvaluationMode -> "WolframAlphaLong", 
          CellEventActions -> {"ReturnKeyDown" :> FrontEndTokenExecute[
              EvaluationNotebook[], "HandleShiftReturn"]}, 
          CellFrameLabels -> {{
             Cell[
              BoxData[
               DynamicBox[
                FEPrivate`FrontEndResource["WABitmaps", "SpikeyEqual"]]]], 
             None}, {None, None}}, DefaultFormatType -> TextForm, FormatType -> 
          TextForm, FontFamily -> "Helvetica"], 
         Cell[
          StyleData["WolframAlphaLong", "Presentation"], 
          CellMargins -> {{107, 50}, {8, 10}}], 
         Cell[
          StyleData[
          "WolframAlphaLong", "SlideShow", StyleDefinitions -> 
           StyleData["WolframAlphaLong", "Presentation"]], 
          CellMargins -> {{107, 50}, {8, 10}}], 
         Cell[
          StyleData["WolframAlphaLong", "Printout"], CellFrameLabelMargins -> 
          3]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Program"], CellMargins -> {{60, 4}, {6, 8}}], 
         Cell[
          StyleData["Program", "Presentation"], 
          CellMargins -> {{60, 50}, {8, 10}}, LineSpacing -> {1, 0}, FontSize -> 
          17], 
         Cell[
          StyleData[
          "Program", "SlideShow", StyleDefinitions -> 
           StyleData["Program", "Presentation"]]], 
         Cell[
          StyleData["Program", "Printout"], CellMargins -> {{2, 0}, {0, 8}}, 
          FontSize -> 10]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["CellLabel"]], 
         Cell[
          StyleData["CellLabel", "Presentation"], FontSize -> 12], 
         Cell[
          StyleData[
          "CellLabel", "SlideShow", StyleDefinitions -> 
           StyleData["CellLabel", "Presentation"]]], 
         Cell[
          StyleData["CellLabel", "Printout"], FontSize -> 8, FontColor -> 
          GrayLevel[0.]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["ManipulateLabel"]], 
         Cell[
          StyleData["ManipulateLabel", "Presentation"], FontSize -> 15], 
         Cell[
          StyleData[
          "ManipulateLabel", "SlideShow", StyleDefinitions -> 
           StyleData["ManipulateLabel", "Presentation"]]], 
         Cell[
          StyleData["ManipulateLabel", "Printout"], FontSize -> 8]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["GraphicsLabel"]], 
         Cell[
          StyleData["GraphicsLabel", "Presentation"], FontSize -> 14], 
         Cell[
          StyleData[
          "GraphicsLabel", "SlideShow", StyleDefinitions -> 
           StyleData["GraphicsLabel", "Presentation"]]], 
         Cell[
          StyleData["GraphicsLabel", "Printout"], FontSize -> 8]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Graphics3DLabel"]], 
         Cell[
          StyleData["Graphics3DLabel", "Presentation"], FontSize -> 14], 
         Cell[
          StyleData[
          "Graphics3DLabel", "SlideShow", StyleDefinitions -> 
           StyleData["Graphics3DLabel", "Presentation"]]], 
         Cell[
          StyleData["Graphics3DLabel", "Printout"], FontSize -> 8]}, 
        Closed]]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell[
      "Styles for SlideShow", "Section", 
       CellChangeTimes -> {{3.514665148412793*^9, 3.5146651505550737`*^9}}], 
      Cell[
       StyleData["slideshowheader"], ShowCellBracket -> False, 
       CellMargins -> {{0, 0}, {0, -2}}, Evaluatable -> False, 
       CellHorizontalScrolling -> False, PageBreakBelow -> False, 
       CellFrameMargins -> 0, ImageMargins -> {{0, 0}, {0, 0}}, 
       ImageRegion -> {{0, 1}, {0, 1}}, Magnification -> 1, Background -> 
       GrayLevel[1], CellPadding -> 0, CellFramePadding -> 0], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["hidefromslideshowgraphic"], ShowCellBracket -> False, 
          CellMargins -> {{0, 0}, {0, 0}}, Evaluatable -> False, 
          CellHorizontalScrolling -> False, PageBreakBelow -> False, 
          CellFrameMargins -> 0, ImageMargins -> {{0, 0}, {0, 0}}, 
          ImageRegion -> {{0, 1}, {0, 1}}, Magnification -> 1, Background -> 
          None, CellPadding -> 0], 
         Cell[
          StyleData["hidefromslideshowgraphic", "SlideShow"], ShowCellBracket -> 
          False, CellElementSpacings -> {
           "CellMinHeight" -> 0, "ClosedCellHeight" -> 0, 
            "ClosedGroupTopMargin" -> 0}, CellOpen -> False, 
          CellHorizontalScrolling -> False], 
         Cell[
          StyleData["hidefromslideshowgraphic", "Printout"], Magnification -> 
          0.6]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["slideshowheader2"], ShowCellBracket -> False, 
          CellMargins -> {{0, 0}, {0, 0}}, Evaluatable -> False, 
          CellHorizontalScrolling -> False, PageBreakBelow -> False, 
          ImageMargins -> {{0, 0}, {0, 0}}, ImageRegion -> {{0, 1}, {0, 1}}, 
          Magnification -> 1, Background -> GrayLevel[1]], 
         Cell[
          StyleData["ConferenceGraphicCell", "SlideShow"], ShowCellBracket -> 
          False, CellElementSpacings -> {
           "CellMinHeight" -> 0, "ClosedCellHeight" -> 0, 
            "ClosedGroupTopMargin" -> 0}, CellOpen -> False, 
          CellHorizontalScrolling -> True], 
         Cell[
          StyleData["slideshowheader", "Printout"], FontSize -> 8, 
          Magnification -> 0.75]}, Closed]], 
      Cell[
       StyleData[
       "ConferenceGraphicCellSlideShowOnly", StyleDefinitions -> 
        StyleData["ConferenceCellGraphic"]], ShowCellBracket -> False, 
       CellMargins -> 0, 
       CellElementSpacings -> {
        "CellMinHeight" -> 0, "ClosedCellHeight" -> 0, "ClosedGroupTopMargin" -> 
         0}, CellOpen -> False], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["SlideShowNavigationBar"], Editable -> True, Selectable -> 
          False, CellFrame -> 0, ShowGroupOpener -> False, 
          CellMargins -> {{0, 0}, {3, 3}}, CellOpen -> True, CellFrameMargins -> 
          0, CellFrameColor -> None, Background -> None], 
         Cell[
          StyleData["SlideShowNavigationBar", "Printout"], PageBreakAbove -> 
          Automatic]}, Closed]]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell[
      "Styles for Slide Show Environment Documents", "Section", 
       CellChangeTimes -> {{3.559592561220532*^9, 3.559592575768806*^9}, 
         3.559652073182283*^9}], 
      Cell[
       StyleData["FirstSlide"], 
       PrivateCellOptions -> {
        "PagewiseNotebookBaseStyle" -> {
          FrontEnd`BackgroundAppearance -> FrontEnd`CurrentValue[
             FrontEnd`EvaluationNotebook[], {
             FrontEnd`UnknownOptions, presentertemplt`firstslideimage}]}}]}, 
     Closed]]}, Visible -> False, FrontEndVersion -> 
  "11.3 for Microsoft Windows (64-bit) (March 6, 2018)", StyleDefinitions -> 
  "PrivateStylesheetFormatting.nb"],
presentertemplt`firstslideimage -> Image[CompressedData["
1:eJzt3UmudOtVreFDUqBIF5BL0AKqFKkaIcq2MBYVI9lIiF7QEMDkeZ7n0CNz
flmW5eO9IlYykzHmfAuTey+6hR0r9ol4/jHm9+2f+uqvfflXfvSzzz771k98
/j++/JXf+LlvfvMrv/kLP/n5/+MXv/GtX/36N772yz//jV//2te/9s2f/eqP
ff6//K0f+eyzX/r8//+Pf/5//853vvPZp/+DYRiGYRiGeTbfc9Vvf+lnmID5
nS/99OH87pv59pv5vRfz+yfmDz7/+d7NH76ZPzoxf3xy/uTC/OmF+bOL8+c3
5y+C5i+D56+Y1ol+P6N+z+78jl/9b+nTXPlv9ex//2c/U858Pn2ad59zZz4r
z3zmHn1ev/us//aJ74uj75nu70Dmu4OtYsfVVe8+a7pcdeVzuspVeIrpcJaT
sTJ8FW0sfMVkDraKG0VXVWVVZ13lmlWpearbDEfz1wLT/QwqrLXZWPgKXzkM
toqZqa46Y6vOrGqLqbpNoOKmSQZTcZaSsaIzrAhfnTHWE1+dMRa+8hts9Xxw
lb6rOro/V091m6d7HJ3lkGN1ZVgOvnqaX73a8+3+ftw62OrZ4KpZpurOqTCU
5mxyloqxqjtCdV/dza7wVc9gq/sz1VWqWZWyqdQ91W2TqaPsrGpjTciwInx1
xlh3+0F85TPY6t7gKlylbKpuc2wcVWdNMNYmX7F7NWOw1fW5e4fVBldhqh5P
dbvibwSn+5lMc1aWsVw7QnzFvBpsdW0cXeW6WzXFVBMs1e2kCf7aaKzpGRa+
Yo4GW12bjC5wi6u6syp3U2GoOd7CWBq+ijhDiK+YjwZbnR9cpeMqZVNFugpH
6YyDs6qN5ZBh4St81THY6tzgqtwOUC2rmuapbpdMHVVrTTAWvsJXzoOt3k/1
mUBchamwlN9MMRa+mucrbFU/2Or1THPVmc8P5w7QzVRYau64O8vNWFU7WBF3
NOCr+YOtjgdX5blKJavqMNVET/3t57+fatP9TLKsNc1YjhkWvmLeDbY6nsq7
FnCVflalYCr8NMNeW4ylnGFNvZ+B3SuNwVYfD67q6wDVsqptnuo2T/e4OWuS
sab56p2x7toKX+kPtvrhwVXXbOWSVbnkVBhKbxyctc1YER3hmTtmuvtBfOU5
2OoHp/KuBVyl6aqppur2yaRRdha+0vMVu1f7Blt9f3BVj6s2mwpLzRmM5dsR
4it8FT3Y6vsT3QXevRsUVz13VVX/p5RRdduC0XRWlbEcMqzu/St8tWew1XdH
Zccq21Vn/n2m5CrlrErBVN2G+OL8nch0P4dsZ00yFr7i7ODEwVY6rnpnq25X
Ve9WTTHVFE91e2mKvbqdpeirs8bCV7W+6v5udp7ttnLZsZriqu4O0NVUGGqm
uxxzrCkZFr4iu8ocbFWzY9W5u+7kKsWsqqv7w1Ea4+QsRWPhq9q7Gdi90pjN
tprgKoX9KnVXOZkKS3kMxtLIsPAVvlKdrbba4KqK84AdHWB2VjXJU90G2TKq
zlIzFr7S8BW7V/mz0VYqO1bdZwInu8phpwpLzZwJxlLKsPAVu1eOg61w1VVX
TewAnU3VbYnvzd8LTfezyLTWFGPhK3w1ebbZSqELxFX7TDXBU91emmCvLcZS
7gjx1TNfdX+Huwy20tqxwlWarlIwFY6aZS43Y03KsJR9pb571f0d7jLbbaXU
BeKq665SNVWUq3BU/zg4q3IfC1/t8hXZ1b3ZZKvuzKrzroVuVylkVS6mwlHa
o2ysJ85S6AnxFb6aMltshatyzgO6dIAO/R+e8hxFZzlnWJt8Vb17FXnvVfd3
uvpstZXLjhWuwlRYymu2GcuhI9zoK7IrbKXkqju2wlXeruow1URP/YPYdD+P
Cc6alGF1+qrr7CC+wlYKrnLZW59iqk2ecjNUt4umW6zbWkrOmmSsrv2r6H4Q
X2GrK656Zasp+1WdrpqcU3WaCkfN9tZUY3XmWE/3sKb5KjK/4k7R3ba6ekeo
Smbl6qrOvErRVBGuwlJ6o2wsfFWXX23fv8JW2GqLq97ZCld5ZFV4ymswlnZH
iK9yzg6SXe20laOrMnesnrjqna0ie0BMtdtS//iF6f55FKzlYKzJvlI9P6iw
e4WvdtkquwvsOBOIq7RdpWKqbld85KOO6X4GE4yVlWEp+sr1/CDdoPZssJV6
ZtW1Y1XhKpcOsNJUzp7qdpOrvbqN5Zph4St85TqTbIWrcNUGU+Eob3O5Gcsh
w1L31YTdK7rBnbbq7AI7dqy6zgTiqpmm6naN4mCs/AwLX/XtXpFdYau7tpq6
Y7XJVdtNhaW0RtVZ+MrfV87dINnVTFtdyawcukDFuxZUd9azXdXR/2Epj1Ez
lmqGpbqDha/oBrHVdVspd4FZO1bdZwKn5VXVrsJTvrPRWJ0Zlnp+lbXbrpBd
HX230g3OstUVV72y1dXMSm3HCldhKgVP/ZPAdD+DaGsp94TuvlK9W1TZV1dt
tdVXzraK2l936AKVzwQq94DKe1Wunuq2k5u9MFafr84Yq8tXDrvtZFfYKjqz
UnLVk8zqiavO2KrSVZkdoJupcJSftzqNtdlX2flVx+7VXVu98lVUN0h25W2r
rszKyVVPdtcrXbUlq1I3Vbdv1EbdWe7Gwle7usFuM2Cr+7a6mlm5d4G4yiOr
UvVUt13cRtVZFcbqzLBUfLV594pucIettnSBWTtWuKrGVYqm6vbJlMFX+Kpq
9yrjXoaKc4Pbu0E3Wynur6t1gdtcld0BVmdVWMpvFJx1d/8v01iOvlLcbSe7
8psJttqWWXWdCXR3lbKp8NSccTSWi6/OGqszv5q8e0V2NdNWmZkVrqqxFa7K
cVW3Jz6afy6e7te7zVhdO+4O+ZXL7hV77djqyFad++vsWM1zVZWpJmRU1XZy
tleXsVwzrM2+mpZdbfWVi63IrGa7SmFn3cVVOMrXWy7G2uKrabvt0b7CVjtt
lb1nNcFV2V2gqquyO8DJpur2Tve4OEvNWPhKe/cqKrs6+m7FV362inLVR7aK
zqxwVY6rVLKqalNhqf6ZZiyVDAtfeWRXUb7CVnpDZhXfBTq5KiuvynaVqqm6
reI8qsbKzrCm++qprSb4iuxql63UMqsJrnq6Y0VelecqPOU1SsZy7Qin+Mpl
90otu5rqq0m2ogvc6SolU9111TRP/UvD4Cy9DEvRV3SD7LVvt1VHZkUX+MxV
72zVmVcpZlXunuowlLq78BW+UveVWnbVbQ1sRWaFq/Lzqoqsys1U3TZyNZeb
sbI6wmm+ctm9IrvCVk9cpbq/PsVVlV2gm6s6TYWjvKw11Vj4quZehkl77djK
w1aT9tff/XeXZStc5eMqPOVtrS5j4Su6QbKr3bZyyaw2dIFnbKXoKkyFpdSd
1WEsBV+dNRa+6u0GI2y1+cygu62uZFZ3bEUXiKvuugpPzR4lY6lkWBt9lbF7
RXblP2q2IrPyuW9hk6vu7LgouKrbHxtGxVhuvqrsB5/Yqmv3SiG7OvJVZnbV
bRBsFZNZbd5ff/d5kn0mcKqr8NQPzr8mT/fri3aWsrGc86st3WDVXjvZlY+t
lDKr6P11NVdlZlbKrlLdrXI2VbadXO3VaSwFX0VnWOrdYIavlLtBsquZturK
rBy6QHVXnbVVp6ucsiocpe2tLmM5+SqyH1TdvSK72uUrFVuRWWl0gbjKI6vC
UX7emmasqfmV0+4V2ZXuONpqSmal5qp3tqraXXdx1TRTddtGaZSdVWEs9R33
ibtX6nvtZFd+tnLPrCr317u6QFzV6yo8NdNa+KqvH6QbJLvCVmRW7l2gsqsq
OkAlU3U7xX3cjYWvPH1FduU13bYis8JVLq5yNlW3R6aOgrEcd7DoBsmusJWO
rZwyqyld4CtbVd+1sMFVkz31b5//PkRN92vJNJZ7R+jkq3effWrZVfReO9nV
HltNz6zoAnHVVFNF2snZX13GwldzfKWcXUXYakN21Wkrh78b6J5ZPXFVRWal
7Kq731UdrtpsKFVzORkLX/V0g47Z1dF3K9nVLFtdcdWRrVwzK/cucLurXEzV
bSF3a3UYy8lXZ3ctI3y1ea+d7GqHrcisPLtAXDXfVN3W6R5lYyllWIq+ohus
uU80O7vCVr22mp5ZqbnqjK0UXaW0W6Vqqm7PqI6qs/CVnq+qu8GqOxnIrnxs
5XDvAplVTma1Na9SNFW3W9wGX2n4ynn3SnmvXW3vClvl2iqzDySz8u0Cu/Oq
qqwKT2mOo7HwlXY3qLzXTnblaavJmVX1/nrGuUBcVZ9V4SmPUTFWZoaFr/qz
q6q9drIrX1uRWc3LrNRcddZWqrtV20z17y+m+2frcBa+ivPVpHODkdmV2pnB
ifcxONqKzMprf10xr8o01V1XTfHUKytlT/dr7zaWi6/O7lQqZ1dP9to3ZFfb
e8FKW5FZ9eyvb3FVVl6FqfQM5WAufKWRXb3z1dbsSm3vClv5ZFZXbaV8NlAx
s1LrAje6CkvpW6vDWPjKuxvcmF1N6wWrbPXRs+noAyMzKxVXkVn5ucrBVN3+
mWatSRnWNF+p2cpt74qddi1bTc2s2F/f46rqrApP+VtrSoal5qtp3aBqdqWy
095tp622itph796zmtoF4iodV3U7RnlUjbXRV67d4LTs6qqttmZXFbZS2WE/
stXEzApXablKzVTdZnEcd2Phq93ZFTvt2CrLVVdtRWbV0wXiqp2m+o8vTPfP
U+ksxQwr2lebd6+2Z1cb72PYZCvFHfZJmVXVjtXZfyfjqn5TfdFLWbPdWPiq
ZveK7Oq1rciu6mylssNOZvVsf31yF6jkKkdPVflJ2Vzdvrqz++fsK8fs6p2v
VLMrekFs1ZlZVe5ZOXaBuGqGqbqt5OAtJ2PhK49u0Cm7Yqe9x1avzlhO3GFX
yqyU99dxla6pui3k6Cx89dxXFd3g5Owq+z4GesE+W03rA9mz6suscFWtqbrN
M8VaXcbq9pXL7pXTnQwV2ZXrTnu3o6bbSi2zumMrNVe9sxWummOqbteojZqx
8FVON3jXV2RXZFcqtoq402rCDrtSZvXEVSpdIK7CUxirzleOu1fTs6up9zFg
K6/MSnWHXW3PKjuzqt6xmuAqTDXDWfhKa/eK7Kpup33LXVcbbeV470L1nQvT
usBuVymYqtslk8bNV1eNVe0rsiuPvSvuY+i11ZYddoXMynXPSrELnOqqbod8
b/4zeLpfj4KxJuVXZFf12VXXfQzYysNWajvslfcuOGZWuGquqaL95OIulwyr
01cV3WDmXrtDdtV1l2jETvu0XhBb9d+7oJZZPXFVhK2qu8BprtrmKCVvdRnL
pR9U8FVHN+iYXdELatlKxVVdfSCZFa56aitlV3X7yMVZ6r5Szq9cd6/Us6uo
nXZstdtWXecDo+9dULqD3akLdHSVoqm6DeTurGpjOWRXFbtXTra6m1117bRf
tVW1r7pNha127rA7Z1YOrqrOqvCUh7NUfXXFWHSDPdmV4k472VW/rZRclW0r
lXsXHDMr1S5QOa/CVF7OUvWVaze4xVaKO+3YqtZWGzIr5x12MistVymYqtsv
DqNgLHyl5avqM4NqO+30gtiKzMo/s1J3VVVWhan6xy3D6vKVSze4Mbtip93f
Vkqu6rLV9MzKaX9dZceq01XdNpkw+KrWV122yvLV1p12bEVm5brDnpFZZdsK
V9W4qtsjR/NfJ6f758x0lquvpnSDZFd6vSC2wlaV9y5My6y2dYHbTHXWTVHj
bKztvlK1VdbeVVV2RS/obavNrorOrJRc9cpWLq7aaKqpdnKxV7Wzsozl1g9O
8ZVTdpXpK2y121YKXeBdW6l2gbhK01TdNnJy1jZfTc+vlLpB9q48zguq2mrq
PeyVZwMnZ1YdPWCmq5Szqm4HOTurylcO/SDZ1czsStlWnb7KsBWZlX4f2JVZ
uXaBV7+7rthK0VTd3pnkLHxFduW2d4Wt+m1FH6h5NnBzZoWr8NRWY6l3gwrn
BquzK3rBnb0gttKwlVIfeDezmrq/jqv2joqvFPKrDdmV0n1X9ILe2VW3rba4
KqMPrL7Pisyq31V4CmPhK7IrbDXbVmRWZFa4ys9V3U5xHnyl0w0qZleVO+1d
vSB3MWArd1sp7bBPyaxwVe/8d9B0vw4HX5Fd+e+0K/aC1bZy3blSs1XH3QtR
rqq0VUYfqHw2UDmzynSVq6miDKVuri5fkV35ZVdTekFHW3X4qsJWKplVtq3U
+0DFzCpifx1X9Zqqy1Eq1iK/Irsiu6IXzLSVeh/oZKspfaBKZtXZBU51Vbeb
1Jw1Jb9y6wax1XxbHflqoq0Udq3cXaV0p1XHDvuGLnCaq7p9pO4sfKWXXXFe
cK6tlHeulGxFZqXXBz6x1eTMKqsLVDRVt4McnbXFV2RX/dkVttLMrrJtRR/o
vcP+ylaTMitctc9U2caq9BXZ1Yzs6tW/tzf5Cluxa6ViK7U+kMzK11Xdxuke
fOXpq7vZ1bt/W9ILamdXk2zFrtWOHfaszOqMrXAVpuoefBXbDU7MrugF+22l
unOlYisyqx5bTe4DcRWm2uYrsqv47EqlF+w8LzjFVpW+6rAVfSA77Aqu6j4X
2O2qbrd8mv85Md0/o4KxHHw11VZkVzq+2marDbtWrncvkFlpZlabXHXGT0/G
zVj46pmv6AWx1URbKe9aHdlqa2bVYavsHfaOzEqpC3QwVbaluq01yVeOtnLL
rtx6QWVbOe2zK9hKPbPaaCsyK70uUNlV3Z7qcJa6r1yzq2k77RvPCyrvXGEr
X1tt7QNdMivHLlDRVd1uUnBWh686u8EJ2ZX7XVcOtrrqq4n77NW2Uti1csus
qm01fYd9k6u2e6rCWBN8RXaFrVx6wS22UtljV8msVPpAtTutpmZW2V2giqu6
PTTdWE7dINnV/F5Q2VYuO1eqtnLtAx1spdgHkllpuqrbP27GqrRVtK+mZVfV
d11tPS+oYqsjXznYil2rnF2r6X1gxQ67cmbl6Kpu7zgba4OvVLKr6l7Q4byg
ei+4ZZ+90lYKu1ZHtpqUWU07H6iYWeGquePmK7Krub3gRFtd9RW28rgzlD5w
Xh9IZhXjqm7TKA2+mm+rbb2gq61c99mf2Io99lm2UuwDyaxwlbOxqnzlnF25
9YLbzwsq2Mphn13RVq67VndsdWfXSqkPJLOKs1WHq7rt4jAOvjr7O0l2RS9Y
aSuVnStlW7HH7pFZTbKVc2Z11VZbXfW/J6b7Z+zyVWd2Femr7p12bJVvK8c7
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
VtjKxVfdrxtbYStsha022urIV9gq3lavfPXuc/SdrxRtFb1z5WyrDl91v967
rsJW2ApbYasqWx35Clvp2OpJdvXUVpVnBbts5XpWsMNW3a/V1VZnz8piq7m2
unJvKLbqt9VHvtpsq1e+2mgrlX32abba6qvu11llqzO/X9jKz1ZX71/AVtgK
W2Erd1tF71xtslWFr7pf33RbnTlvi62w1ZN7Q6/a6qNeDFthK2y121ZXfDXB
Vlm+6n5N1a5StdXZ3ccNtqq6NxRbPbPVR77BVjm2OvJVha2OfIWtuOPqznf1
Bl91vxZlWynusWMrbIWtjn2lYKsjX2ErbKWwcxVtq0nZVYSxun92bNXTByrZ
qmqPPdpWV84IYitstdVWr3yFrdhn7zZGpLO6f8ZMV6nvWjnY6sxdMFdtpXBG
0MVWV/bYsRW2euerClvdza622IqzgjN8NWUUMquptsrIrCbaKupuKxVbnT0j
iK2wVfc+O7by22efnl1NmYm2mnxGEFvNt9XZM4LY6vo+O7Z67qsntnrlqzM9
ALbCVg6T3Qc671phq3hbZd/JfmSrp3dbYascWx35ytFWr3w1zVbK2ZXiWUF6
wX2j4Cpsha1cbfX03lB3Wx35StlWH/kq21ZHvsJW2Irsat6oZFZXbKW0a4Wt
+u5fmGKrp/eGYitsha3mnBUku5oxKraKzqxU9tgn2OrdmW81W2X9vRtsVWur
I19tshV3XLHPjq38RsVVGbZS2WPPun/hyFavPh+n3RtabauI+xc22erIV6q2
Uvy7N9hqlq3w1Y7ZbCuHXatXtlLuA93vZHezVbSr1G1V/XdvFG31ylcTbMXO
FbZynQpXue9addtKoQ/caKvMe0OxVd49DFm2UrybXSW7evUZ1Z1dVe5cdfeC
+EpnJmdW7LHPstWkv3czwVYf+UrBVpv+7o2KrZR7QXdbVWVX+MrLVcp9ILbS
s9W0e0Oz/t4NttK/4wpbadhKtRfMshXZlaersjKrK7aKyqyq9tjf7RNMtZXi
/QtTbFWxx95hqy33h3IPQ5ytXHeurnw3kl35DLby37VSsZXiGcEpd7Jjq113
XL3y1WRb0QvqZFf4St9VnbaKyqyUbaXgKmw19+/dKNmKexj072FQ7gUn2Koy
u8JXuEq9D8RWs+62yro3dIqtptwf6mQrJV+p2kq1FyS7mjFPHTvJVlWZFbby
vH+BO9k9bMU9DNiK7IrsClfts1XWnaETbfXqe4i7rerPCEbaqvr+0Op7GDgr
OOMO0Wm2wlezXKWeWU2+e0HFVoq7VlPOCGIrH1u98hW2mt0L4qvZ8/SZklnR
B2IrbJVlq+l3XE29h0GxF4yyVUd2lb13ha/8XdWdWWGr/sxK1VZuZwQdbPWR
rxxt5XIPw52zgk7ZlcvO1cbsCmP5uKojs3LpA7EVZwS777bqspXKHVecFdSy
ldLOlaOtonzVbRt3Vyl1gYp9ILbqt9WUM4LTbDX9HgbOCs7fuXLoBTt9tdFY
Xa6alFlN7APVbdWxa3XVVllnBFXvtoq2VfU+e7WtOCtIL1idXeErH1OpuWpi
Hzhl18p9j33K/QvYSttW0fvsd3au7tpqYi+ofF7QLbua7is3V7lnVvSB/X2g
6xlBp7utqmxVvc/uYCv37GpLL4ivZhor+tnceX+mZVbqfSC28jgjOOH+ham2
mnpW0MVW9ILzusFJxsJVnjvsan3gNFtV77FX379Q2QeetdVHvppiK84Kzty5
muiru9/hGb5yNFbGM6hy1YTMalMfGH1n6B1bqeyxbzwj2Gkr9XsYpp0VpBf0
t5WirxyMlfW63V0VmVnRB3pnVpwR1LHV1nsYnH01yVaRvSC+mmes7Neq6qqp
mVVWH4itOCPoYiuVs4JHvsJWHr2gc3a12Vfdzqp4bXefvVtm5bTDzq4VZwS3
2kpl5wpb6dhKKbs68z2TlV1V+6rSWNnOqnwduCovs3KzVfSuVfSdoa577FPO
CGIrdq7O+OqurTbvtFdkV06+emqu7p9V3VXKtnrqKvpAnczK9Yygsq0+8pXj
PnuErZTvEM3IrrpsVd0Ldu5dbfWVwzx5vnddRWaVn1lhK84IbrNV5v3sarai
F5ybXV21VUc3iLH8XRW9vz5ph/2urdT7QDVbVe9aqZ8RfGqr6rOCEfezYyuy
q4m+ijBWt2OUJsKrVa6KttWWzCrDVu86BUVbXXGViq3U99izbFV9VpB99t5e
kOxKw1ZkWLjKLbOiD/TKrDps5bhrVW2rSfvsR756d3YjaueKXpDsCl/pmara
VZMzK8U+EFv57Vo52OojX7HPrpldbesFO7Kr6b7aYqyoZ7XFVRMyK/rAOFup
7Fop7bEr24p9dq+7GMiu5vpqsrEUXHXXVpO7QPrAXlup9IGue+wRtlLfZ//I
V262mtALkl3dzyZUfDXFWNHP5Mn7k+2qrZkVfaBmH7hljz3TVuxcaWdXir2g
a3al7qsMYzk6K+MZdLiKzEqvD8RWPnvs2MrXVvSCObZS9lV2N6jqK3VjZb3m
ja5SslVGZkUfyB77NFuxz+5zFwPZFb5St1b263v6HlS4SrkLdNxhd+gD2bXS
yazu2OojX6nss7vcc6WSXWX0gpuzq4puMMJXVcaqclbVa5nmKtfMymmHnT5w
565VlK0m3SE6LbvK6AU777qKtJVrN+jmqwh3df+sEc8bV+W7Sm2HHVthq0pb
sXMVayu17Cq7F5ySXSn4SsFY6oOrzv23pGAr+kDutcJWz3y10VZK2dWUXhBf
YSxVU111FZkVfeDkzMppj/2urT7y1aSdK2Vfqdhqa3Y13VcYK/ZZPnlfyaz2
ZVbYasYeO7aaYyu1XlAlu3LpBp/6CmNpmQpXzc+ssBX3WlXYip2rOFuRXc3o
Bq/aStFXG4yV8cwqXaXeBSpnVhv7wKu2Us6ssBU7V929YMddV5Ozq22+mmas
rGf09L1zcpVLZkUf6JVZTdi1emKrj3xFLzizF3xlq83ZlbKvMo3l6qzM5xHh
qju/J+quIrOadz5QyVaqmVW0rRz/brOqrZR6wSe2isiu3vkqMrtS2b1y8JWD
sypef0dWdcVWV/+9sCWzwlY+tnLrA6tstX3nSuW84PbsyuncYKSvqoylYK3K
14mrntnq7L+rslz1ylbssOu4Clt59IIf/a6oZldKd12pZ1cO3eBdX7kaK9tc
na8l6v3IdNX0LpDMClup7lphK21bOWVXT2ylmF3hKybTVGquUuwCn9pKKbNy
PB+oYivHzOqpra74arutXHbaN2RX+ApjdZpquqsmZ1bb+8AjWx19Bx/Zanof
WGkrfKXTCzpnV/gq/nu+2y3Ko2Kqba5y3LPa0AdetZVCH4itdttqw077lm6w
wlcYy8tUuIrMakIf6GirDldF2OojX2Er/ezqbi+ocGYQX+X5aruzXE2V6apJ
XaDLDvuEPlDBVdNspX4Xw9HvTXd2pbTT3rV3FZVdKfjqyvfik+9fjKXnKXVX
uXaBbpkVfSC2UrPV1OwqoxdUy66m7l1t9dVUZ2U/rypX0QV6Zlb0gXP7QGz1
3FbstOOrSF85GMvVWRXP5ampHF1FZrU3s1KylVJmFWWr7b5y3rvCV3r7V1HG
qnKWir86X2u1p1z2q6ryqi5XTduzmpRZYSt/W6l0g9X3XW33lUOGpWCsKHt1
/7wZpsJVdIGumdVVV224LzTDVh/5SslWatmV0t6VcnaFr+Yby3Gi3g9XV7n0
gJszKzVbbcqssm2l5islW1WfGXySXb36bHLKrlT2r7p9hbE8TbXRVY6Zleue
FbbCVp22IruKPzeIrzCW8kQ+76qsqtNVLpmVUx/46t/oSpkVtsqx1Ue+UrLV
lOzqrq2csysHX7lmWDhL11S4Kmd/3clVkZkVfeAcW6n5asNOu2J25doNVuRX
KhkWxsoxlbKrVHfXyazoA7HVXFtNzK6UbTXFV9UdYZaxNjkr6/k9eU+numpq
F7h9h13FVt2mmm6rI18d3X+WbSuyK+9ucLOvJjor+1lVmyrTVW5dIJkVmZXC
RNtKyVeZtnLeae/cu6rsBrt9dfc7Ut1Yrtaqei64al8XWJ1ZcQ87tnKxleNO
+9TsCl8991WlsRStVf3au0x1x1abXfXEVnddpZBZZdsq875QbNVnq67synmn
fZOvznw/qPrK0ViV7up+XU/fm6eucsmr6AK9MqsoW23NrLJs5ZpdOe60u2ZX
irtXk32lYqxJ02kqXBWbWWV1gZWZFX0gtuq2FdmVhq8isisnX2Es/4l4/sod
4FlXqXWBZFb5O+xRmdWGPjDTVh/5yrkXVMiu3M4MqnWDU3wVZSyc5Weqja5S
7QK3ZVb0gbq2UsquOnfaya76ukF8hbGqPeXQAWa4yqELJLOiD8RWunddbd67
cuwGVXylaKztzop+lh1Z1SZXkVnN3WF3vC9U0VZkV7rZ1VNbbfJVV4aVYawt
1sp6bh2mcnGVwo7V9MyKHfa5tlLKrpx22juyq2xfRXSD+KrXWFOclfl8oky1
3VUVXeCE+6ycMits5W0rp532jOwqqxt89xmFr3Q6wgpjOXmr6jlEvnfZpsJV
9a5yzazYYde01Ue+mtoLup8ZVOgGo3bbnX3laqxuc3W8xsj36W5WtS2viugC
79oqy1VVmZXSPezYyi+7yt5p35pdTe4Gp/uq01hP/dX9M1aYClfFuUoxs7rr
qo2ZFbaqtZVLdlW5d6WYXeGrWF9lGEvVWQ6jZConV7l0gWRW7LA72Uopu4ra
aZ+cXbl0g26+UjQWzurxlKqppruKzKo+s8JWs2x15KurtnLOrt75Kus+UXzl
5yucVeMpXOW3Y0VmRR84xVaZ2dXR70v3XaLTsqsoX535XO72VXVHWGGsjc5S
9tQdU21y1bQusCqzirIVmVWfrbZlVypnBtV9FZVdOfrKxVhTrVX13J6+x9mu
uvrfxCZXkVk9s9XWzMrRVmrZlcreVcdeu2M3ONFX1cZytVbHM+owFXmVdxfo
llmxw95vqyhfdey0T9676s6upvlqm7HUzNX9+iPeR7UOMNpVKjtWXfvryplV
VB/40fc0tvKz1YbsyvXOq2pfZfWDFRlWlLFUnBVpsO6fV9lUG101sQtUPRvY
lVlhqxxbbc2u1Pba330+KfoqK7+64qu735GRvnIwlvt0mwpXzd9fd9uz2t4H
dtjqqq9csqs7O+1O3WCEr6JsFe0rxR2sDGPhLD1PPTUVrqp3ldL++oQ9K2zV
Y6sJ2ZXTXrtLNxjdDyr7KsNYOKvXU+qmmu4qp8zqjqvIrPqnw1ZXfdVxH0PV
3pVTduXqq8z8CmPNn4xnjqv6dqyyMiuH/XUyK2xVdR+Da3bl3A3iK01jYa08
S3WYyslVZz4PpnaBCncucFfoHFtF+Wp6dpXVDW70lcqOu4uxtlgr+/lFvM8V
WZV7XjWtC1S9c4HMaoetyK7ybIWvPDKsKmNNcVbVs4pylVJWtdVVSl1g1f56
V2aFrXJ8pbbTrp5due9e4atYY1U6y8FcHc+iI6eqyKpwFZkVd4X62io7uzr6
fVHIrrL22id0g52+quoIJxir0l7drynDU3dMhavuu8qtC+zOrLgrdKatpmRX
bt3gk+wKX/UbS81Zkyb6fbr7+7LVVZ07Vkr761WZ1ZGt2LPSs9VVX23OrvCV
p6+UjIWz9Dw1wVSOrnLLrKruXCCz2mmrDdmVYjf46vNpm6+qM6wsY+GsXk9V
mwpX+brKLbPavGelZKurvnLKrrbstU/wlXqGlWksnFXnqSemmu6qqh2rd7Z6
4iqVLpDMCltdtdX27ErVV2c+76b5aqKxtlqr4pmqmwpX9exYKd8T2rVnha16
fDUlu+rYa8dXOr5yMNZEa1U+tyfv7xNTKWRVbq6a0gUqZlab+kBnWylmV1P2
2lV2r/CVrrPcvNXxbFxMNclVnTtWDvvrLplVt0Wm2eqqr7qyqw3d4GRfYax5
9up+nVGeemoqXDXHVZX76+xZYavK7IpuEF/d9ZWCsdScNXmmmypjt8rFVZu7
QPasZttK8e8MTsmu8JVmfhVtLJyl6alprlLMqzp3rCZ2gWRWnrY68tX27Apf
afhqgrFw1gxPuXaAk1xFZkVm5WSrq766kl0d2apyr736zqvsexkm+Eq9I8x0
FtaqsZSTqTqzKlxFZjVhJtiqM7va0A2esVXl3QxXfDUxw8o0Fs7Ke65dplJx
VbStnrpKsQusvMvqzv76R7Yis/Ky1VVfZWdX27vBquxqg69cjLXBW9nPLfJ9
VjOVc17l5iqFLpDMaqetonwVnV1Vd4PdvpqSXzkaq8pZjt6qfC7R72lF/4er
6ALJrPbY6qqvyK7m7F5t8lWGsaqdpWKurtesYqoKV3V1gFGuemWrTFc5dIFk
Vthqw167Yjeo6iuljlDNWJ3Omj5Z75eiqXCVTxdIZtU/6raK9FV2dnXXV6/+
u8JXGr6qzLAyjYWzNC1111O4Cle57K9vyqy22WpbN4iv+n2lbCyc1e+pp6a6
46pMUzm6SnXH6pWtKrvAzMyq2xbbbRXpq847GdS6QXzlY6wKZ2GtGkt1mUol
q9rkKqXMqtNV2Ep3ov4WzhVb4av3tqr2VdaO+x1fVfeElcba4q3qZxnx/leY
ClfNchX769jqqq+uZlcf/a5M2GtX373q8lV2R9iVYXUYa4K3up5Xl6mUOkA1
V026x6qqC8RWe2xFdlWzexWRXZ3xlWtH2Gmsbmcp2av7dTubClf1u0p5f/2V
rXCVt62OfNWZXeGrmflVpa8ijaXorG0T9T4qm6rLVWdt9dRV27tAMitsFZld
uey1u+9edeZXm4yFs/w8VW0qlaxKKa/CVbhqo62OfJV9ZhBfaftqUoaFs/Qn
+r15YirF/g9X1biquwvkntD5tqIbjOsG8dVsY+EsHU89NRWuOu8qdqzIrLBV
vK9cu0F8leurqgxL1Vh4q95SEZ5S3atSddXTvOqJq9y7wKj9dWzlM3SD+KrL
V53GqnDWNmtVPM+I932LqXBVjquu3mVFF4itKrOrTb4687kU5avoM4QbjFXl
rGneqnxmnaba7qrsHjBrx0ols6IL3GmrI19FZVcZ3aDivaJuvlLMsBSMVe0s
ZXd1PodIT6mbStlV2XnV9B0rMitsFZFdOXSDmb56aqtpvqrOsKKN1e2spz7r
/jm6PVVtquysStFVXWcCp7qKzGqWra766qqt8NUcXzlkWBnGcnWWw6h4qtJU
GVlVdQ+Y6Sq1+xYiu0Ayq122OvJVRXbF7tV1X3XuuLtkWJnOwlo6loow1Zas
yiGvmrBjdcdWuGqXrdS7wS5fKeRXjhnWRGNhrXpHRXlKOavCVXtcRRc421ZH
voqy1aZuEF/p9YSVztpqrYrnGmWqu6668/vu4Cr1uxaydqzoAnVnkq3w1ex+
MMtXrsaqctZEc1U/t05PqWVV2/Iqlx0rMitsddVWCt0g+VWtr6oyLBVjdThL
2V7dzyHSUw6mUs6qcBWuwlZ5vlLPrqb7quMMYWWGpWQsFWdFO6z75632VIep
trmq866FrB0rukCN2WIrB1+9+zeM4m57tK9UjFXtq+3Ocp2M92uaqaa6qmt3
nczKYybaqsJXHfcy4CufDEvVWVhL01JPPVVtqoysyslVXXkVrvKZqbY68pVC
dqW6246vNHbdq4yFtfo9FWGqCVlVtatUzwRm7VjRBWKrbF+9uq9fpRt09lXn
jvvkDKvKWdu9VfV8o34fFE2V0QGq5FWZPWC1q8issJWKr5z6wWnGUnOWirUq
veVmse5nEmmop5ZS81R0TjU5q1LpAXEVtsr0lVI/OMlX3TnWBGMpWSvKZd0/
m7unsvepXFzVec9C135VZA94ZKvu73Xl2WorfOXrq4nGynKWo7XcJut922qq
yr2qba6KzKy6v9PVZ4utPs0VWzntX2X76sn9V9t8pWwsnKXvqU5TKbiqsgPs
dlX1HVZ0gdgqc1x3r9R9FX2OMKsjdDJWtrOwVr+jojzlbqoOV3Xes4Cr5s92
W1V3g9t95ZhhdfaElc7CXLXPOOr3QtVUuMrfVXSB9wdbee1ePfXVu8+MTb5y
y7A6jDXZWx3PMPL34Imrrv7bYpKrlHtA9R0rbHV+ttnq01y1lZuv3v23T341
w1jd1lJ3V/czUfOUs6lwlYarsNX5wVZ5u1eTfdWx466UYeEsptJTk0yl2AHi
KlwVPRtt9WkUukH1uxmq8ivnDOupr7KMhbP8LfXUU3dMNTGrcneVwo4Vtro+
W231afBVTX7lmGF1GCvTWVjLw1JTTYWrdFxFZlUzm231aRR2r9R99e6zycFX
lcZycBbe0rJUhKcqTdWdVeEqXKU+2Op6djXxbgZ8pemrKmNhrVpHRXpK1VTq
rnpnK2VXsWOlP9tt9Wk27La7+Qpj9Ttruru6nmPk78MdV9393c/MqiI7wOl5
FTtWHoOtvjv4qtZXWRnWFmMpWEvdXt3PQ8lTVaZyz6pwFa6KGmz1/XHoBjf6
SjXDumusDc6K9lj3z6ngqWmm2uiqjrsW6AJ7Blt9f1x2rxR85dARbjWWs7Wc
J/O9VDaVQweIq3BV9WCrH5xNvjpjrCpfqWRYT42l6iys5WWpu56aYqpKV535
d6ZjD3i3C+z+Dp4y2OqHR2X3Cl/1ZViTjYW1NC31xFNPTeXoqjOfOw551d27
Ftix0h5s9fHgq/O2Ouur6I7QwVhPvisrnYW36h0V4amNporqAB1cxe6672Cr
48FXOcZSyLCccqwuZ003V+fzfPq7MM1UE1317jMbV80ebHU8GbtX+CrHV1UZ
loKxup3l5K7uZxPtqQ5TqbgqqgOcnFexu64z2Or14Kv+jlAxw1IxlqK1onzW
/TNN8pSzqXAVrnIcbPV+Ks8OVvgq4o4GZV+5GSvaWROs5TqR72HE71WlqTL2
qiI7wHeuOvPvTtUe8K6rsFXeYKtzM81XVflVdEdYkWF1GivDWVjLw1IbTOWa
VTnnVWRWPYOtzk/lbvuk/Mo1w+o2VpazsJaOoxQ8pWYqXIWrJgy2ujbT8qsI
X3V1hJuMlekszFXrqEhLdZnKIauqcpVqD4iregdbXZvq3fatvsrKsCYYq8pZ
G7xV+Rwzfg+quz+XrOqMq9TvWeCuBe/BVtcHX+l1hA7GynJWtbWc/NX9XJQ8
VWmqjKwqqgN0cBV5lf9gq3vj6KuIHfezn1tdGdZ2Y6lYa+tkvqcdnso0lWtW
hauYM4Ot7o+jr6ryq00Z1hNjVTgLa3la6qmpVHMqXHW/B+SuBZ/BVs/G0VfO
HaG6sRychbd0HdXtqTumcsiqqlz17rP5SV5FZuU12Or54CvtDMvRWNXOwls9
hlLxlJKpcBV51YTBVjGDr+ZlWN1dYbezNpir+7lG/G50uCqr/6vuABVcxY7V
zPlkK4ZhGIZhGCZu/h9J9mO1
  "], "Byte", ColorSpace -> "RGB", Interleaving -> 
  True]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "SlideShowHeader"->{
  Cell[580, 22, 136, 2, 65, "SlideShowNavigationBar",ExpressionUUID->"5eff326f-51d4-4f6d-8327-0361233df0b4",
   CellTags->"SlideShowHeader"],
  Cell[6709, 149, 122, 2, 44, "SlideShowNavigationBar",ExpressionUUID->"3922b593-907c-45c1-b8b6-90c3373155fd",
   CellTags->"SlideShowHeader"],
  Cell[8892, 199, 122, 2, 44, "SlideShowNavigationBar",ExpressionUUID->"3d417ef7-2274-476e-a156-7231bf56c84e",
   CellTags->"SlideShowHeader"],
  Cell[14043, 353, 122, 2, 44, "SlideShowNavigationBar",ExpressionUUID->"0decc16d-f8cc-43ea-8366-05f88784fd4a",
   CellTags->"SlideShowHeader"],
  Cell[35668, 905, 122, 2, 44, "SlideShowNavigationBar",ExpressionUUID->"ed1a7de1-709b-4935-a8e3-4291edc2f33f",
   CellTags->"SlideShowHeader"],
  Cell[177790, 3682, 122, 2, 44, "SlideShowNavigationBar",ExpressionUUID->"fbe4093a-d6c3-4c7c-844c-9d5349e74110",
   CellTags->"SlideShowHeader"],
  Cell[310576, 5901, 122, 2, 44, "SlideShowNavigationBar",ExpressionUUID->"c9190fb0-715b-4cd8-914a-1f283f5a1921",
   CellTags->"SlideShowHeader"],
  Cell[316408, 6081, 122, 2, 44, "SlideShowNavigationBar",ExpressionUUID->"773d36f9-5f94-471d-b27f-326fb350276e",
   CellTags->"SlideShowHeader"],
  Cell[319365, 6177, 122, 2, 51, "SlideShowNavigationBar",ExpressionUUID->"bdb2a054-398f-45af-908c-9c09baf8f324",
   CellTags->"SlideShowHeader"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"SlideShowHeader", 912282, 17052}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 136, 2, 65, "SlideShowNavigationBar",ExpressionUUID->"5eff326f-51d4-4f6d-8327-0361233df0b4",
 CellTags->"SlideShowHeader"],
Cell[719, 26, 416, 6, 288, "Title",ExpressionUUID->"4a349bd0-044f-4b71-9e5d-6f85b428ef05"],
Cell[1138, 34, 645, 9, 90, "Subtitle",ExpressionUUID->"8bf38818-9136-4d63-b800-a95800ba3bba"],
Cell[1786, 45, 4886, 99, 552, "Text",ExpressionUUID->"e5654c3b-261a-4278-9d0c-d50835b563a4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6709, 149, 122, 2, 44, "SlideShowNavigationBar",ExpressionUUID->"3922b593-907c-45c1-b8b6-90c3373155fd",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[6856, 155, 317, 4, 107, "Section",ExpressionUUID->"f29c9c36-3588-423d-85b2-02bd9ce04aa0"],
Cell[7176, 161, 1667, 32, 258, "Text",ExpressionUUID->"813e3938-12dd-4af2-a679-9c2667c326cc"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[8892, 199, 122, 2, 44, "SlideShowNavigationBar",ExpressionUUID->"3d417ef7-2274-476e-a156-7231bf56c84e",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[9039, 205, 349, 6, 169, "Section",ExpressionUUID->"d519da9a-07b8-4600-b208-ff11b9f334ce"],
Cell[9391, 213, 638, 12, 37, "Text",ExpressionUUID->"d1b120a4-0039-4aee-b1d8-345c184f2ff5"],
Cell[10032, 227, 598, 15, 88, "Code",ExpressionUUID->"3448cd5e-b397-4de5-9565-80bd96df13cf"],
Cell[CellGroupData[{
Cell[10655, 246, 308, 7, 92, "Subsection",ExpressionUUID->"d9b037c9-200b-4bd8-b71c-46ddd47420dd"],
Cell[10966, 255, 334, 7, 59, "Text",ExpressionUUID->"730141f6-a811-44de-99ef-a1a2f1c98d68"],
Cell[CellGroupData[{
Cell[11325, 266, 1205, 35, 170, "InputOnly",ExpressionUUID->"ef6d3d59-e728-4112-a616-b48534a3eaa0"],
Cell[12533, 303, 195, 4, 36, "Output",ExpressionUUID->"843a4463-f78f-444b-b75e-190126bb9c78"],
Cell[12731, 309, 821, 24, 87, "Output",ExpressionUUID->"6b911ac9-00f2-45d4-b9fd-5c36ca87deb1"],
Cell[13555, 335, 415, 10, 36, "Output",ExpressionUUID->"497dde98-5772-4f82-b0c0-4f8ff9bf2ce2"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[14043, 353, 122, 2, 44, "SlideShowNavigationBar",ExpressionUUID->"0decc16d-f8cc-43ea-8366-05f88784fd4a",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[14190, 359, 308, 5, 169, "Section",ExpressionUUID->"f8ec5160-8d2b-453f-b4c6-c94edee702be"],
Cell[14501, 366, 1699, 45, 220, "Input",ExpressionUUID->"2aa2bf2c-0847-4ea9-a758-5f50236dcf52"],
Cell[CellGroupData[{
Cell[16225, 415, 288, 6, 82, "Subsubsection",ExpressionUUID->"34e2e610-f47c-4af7-b4a2-760cd012b7ca"],
Cell[16516, 423, 519, 11, 104, "Text",ExpressionUUID->"16c2c9fc-59b8-441d-b939-ce7c482aa07e"],
Cell[17038, 436, 2194, 52, 238, "Input",ExpressionUUID->"24a49a26-6084-42fa-a17b-7228b521c06a"],
Cell[19235, 490, 583, 15, 62, "Input",ExpressionUUID->"6d471bb2-b7e1-4763-8ea9-4f0ed23ebc6a"],
Cell[CellGroupData[{
Cell[19843, 509, 1246, 27, 112, "Input",ExpressionUUID->"fb578692-52a5-4fc6-bd7f-f372a11d79f9"],
Cell[21092, 538, 7664, 178, 383, "Output",ExpressionUUID->"b621c197-240b-46a7-a997-779239f07fec"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[28805, 722, 226, 5, 50, "Subsubsection",ExpressionUUID->"db3b0ad7-575d-4506-95a4-32b4116593fb"],
Cell[29034, 729, 1369, 36, 313, "Input",ExpressionUUID->"ad6ecc53-2d7d-41b2-b54b-2a6b8c0da39a"],
Cell[CellGroupData[{
Cell[30428, 769, 713, 17, 62, "Input",ExpressionUUID->"bac8c47b-484d-4bdf-a0f0-f99dbc864fd6"],
Cell[31144, 788, 4451, 109, 176, "Output",ExpressionUUID->"af734e15-7517-4ee6-aa9c-6cb5e5a79e73"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[35668, 905, 122, 2, 44, "SlideShowNavigationBar",ExpressionUUID->"ed1a7de1-709b-4935-a8e3-4291edc2f33f",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[35815, 911, 263, 5, 169, "Section",ExpressionUUID->"3d6bafa6-652e-40e8-a027-01dc2e92fe2e"],
Cell[36081, 918, 306, 7, 37, "Text",ExpressionUUID->"a4cde4f2-294d-422f-99c9-e0ed6c39968a"],
Cell[CellGroupData[{
Cell[36412, 929, 1427, 39, 137, "Input",ExpressionUUID->"36d428a6-164c-4839-a48d-58267bd3ee98"],
Cell[37842, 970, 247, 3, 36, "Output",ExpressionUUID->"beceb094-aacc-4e78-85f5-6e1ed8934994"]
}, Open  ]],
Cell[CellGroupData[{
Cell[38126, 978, 166, 3, 50, "Subsubsection",ExpressionUUID->"d3ab5173-0078-4b7c-a27f-4a0fd6c0d046"],
Cell[CellGroupData[{
Cell[38317, 985, 649, 12, 36, "Input",ExpressionUUID->"cf8f8d76-e279-47fb-9091-efd3e194051a"],
Cell[38969, 999, 58310, 1070, 123, "Output",ExpressionUUID->"f0519c6b-80c7-4d67-85a9-1b27ef7219df"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[97328, 2075, 176, 3, 50, "Subsubsection",ExpressionUUID->"e2d0a968-f949-4694-9130-727594cb1438"],
Cell[CellGroupData[{
Cell[97529, 2082, 510, 9, 36, "Input",ExpressionUUID->"19673c4e-fb31-4d79-b52b-caffd9e8a642"],
Cell[98042, 2093, 62132, 1127, 82, "Output",ExpressionUUID->"a566bc2a-24f2-4f0e-9e98-8b78468de718"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[160223, 3226, 184, 3, 50, "Subsubsection",ExpressionUUID->"d09689fa-f4ca-46b0-9095-c293ef91a885"],
Cell[CellGroupData[{
Cell[160432, 3233, 301, 4, 62, "Input",ExpressionUUID->"9173e202-ef4d-4cac-a243-17b0f3b8ddcb"],
Cell[160736, 3239, 340, 4, 36, "Output",ExpressionUUID->"178c19ca-40a6-4ed6-b9ef-b83f79feefd1"],
Cell[161079, 3245, 16638, 429, 409, "Output",ExpressionUUID->"f5b79300-5767-4820-a003-a79959814baa"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[177790, 3682, 122, 2, 44, "SlideShowNavigationBar",ExpressionUUID->"fbe4093a-d6c3-4c7c-844c-9d5349e74110",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[177937, 3688, 301, 5, 107, "Section",ExpressionUUID->"de625789-4f17-4bae-862d-ce8b5c1fca5b"],
Cell[178241, 3695, 217, 5, 37, "Text",ExpressionUUID->"2d6ffbb9-7c05-43e6-9095-62a4829f3be0"],
Cell[CellGroupData[{
Cell[178483, 3704, 274, 5, 37, "Item",ExpressionUUID->"78fb91ff-876b-4dab-8c81-4542c52d83b7"],
Cell[178760, 3711, 273, 5, 37, "Item",ExpressionUUID->"07766ea4-e810-49bb-b7d3-1500643a8f07"],
Cell[CellGroupData[{
Cell[179058, 3720, 340, 8, 59, "Subitem",ExpressionUUID->"2c82a933-4e00-49b0-b7e8-6b11e9d9a97f"],
Cell[179401, 3730, 336, 7, 59, "Subitem",ExpressionUUID->"02a4972b-a617-4fa1-90b1-a37bd0725a5e"],
Cell[179740, 3739, 338, 9, 37, "Subitem",ExpressionUUID->"aef9e5e5-0a32-42d8-a057-1b7d57728886"]
}, Open  ]]
}, Open  ]],
Cell[180105, 3752, 130422, 2143, 429, "Input",ExpressionUUID->"b2e1e8e5-5020-4e36-9bb5-6a1cc1c1ff38"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[310576, 5901, 122, 2, 44, "SlideShowNavigationBar",ExpressionUUID->"c9190fb0-715b-4cd8-914a-1f283f5a1921",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[310723, 5907, 186, 3, 107, "Section",ExpressionUUID->"63f98461-42ce-4498-96a0-7515e434b618"],
Cell[310912, 5912, 196, 3, 37, "Text",ExpressionUUID->"47b6b672-87a3-48b1-b251-f431fffa9c1c"],
Cell[CellGroupData[{
Cell[311133, 5919, 185, 3, 50, "Subsubsection",ExpressionUUID->"715d17c7-26d8-4c87-938e-100e11bbc1c6"],
Cell[311321, 5924, 945, 22, 116, "Input",ExpressionUUID->"8b3ab186-a3f8-4d19-a133-b3d9a4f3adc7"],
Cell[312269, 5948, 156, 3, 36, "Input",ExpressionUUID->"2c2d75f0-5677-40c9-8b62-cb8e3c5e39c8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[312462, 5956, 215, 4, 50, "Subsubsection",ExpressionUUID->"d3d4bf76-5c20-4f34-ada1-a8ea20ff9bdd"],
Cell[312680, 5962, 178, 3, 37, "Item",ExpressionUUID->"87dd6b86-de35-447d-ad77-a6678ae91732"],
Cell[CellGroupData[{
Cell[312883, 5969, 440, 12, 36, "Input",ExpressionUUID->"b9d622d2-cca9-4066-8e0b-ca9c0143063b"],
Cell[313326, 5983, 666, 15, 62, "Output",ExpressionUUID->"15317a23-1a90-489d-9153-7346537aa4c0"]
}, Open  ]],
Cell[314007, 6001, 167, 3, 37, "Item",ExpressionUUID->"74f29773-bbd4-4b36-9c0d-e9231052af73"],
Cell[314177, 6006, 672, 19, 87, "Input",ExpressionUUID->"2b671017-37a7-4ca4-9430-9b5f49c1501d"],
Cell[314852, 6027, 176, 3, 37, "Item",ExpressionUUID->"f66ddc23-6653-4215-be5c-c7ed3e3b342a"],
Cell[CellGroupData[{
Cell[315053, 6034, 551, 17, 36, "Input",ExpressionUUID->"0130dd0d-e330-4624-a4c1-2ee53743e39a"],
Cell[315607, 6053, 728, 20, 62, "Output",ExpressionUUID->"366dc0f3-75ac-4172-baa1-f6f91cc8feb9"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[316408, 6081, 122, 2, 44, "SlideShowNavigationBar",ExpressionUUID->"773d36f9-5f94-471d-b27f-326fb350276e",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[316555, 6087, 191, 3, 107, "Section",ExpressionUUID->"4a2c2cda-e718-4a30-b3a4-e9ea6c8c14ee"],
Cell[316749, 6092, 1209, 37, 112, "Input",ExpressionUUID->"e15978e8-ccb5-4d5c-80ef-1597589bc2e4"],
Cell[317961, 6131, 507, 14, 62, "Input",ExpressionUUID->"7fdceadb-5e81-4dcb-ada8-65dafc20b6c0"],
Cell[318471, 6147, 845, 24, 87, "Input",ExpressionUUID->"669fea73-54d6-4342-afe8-c97d4dea19f7"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[319365, 6177, 122, 2, 51, "SlideShowNavigationBar",ExpressionUUID->"bdb2a054-398f-45af-908c-9c09baf8f324",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[319512, 6183, 186, 3, 107, "Section",ExpressionUUID->"24aed54e-f869-4520-94b6-b8d3b16e9db7"],
Cell[CellGroupData[{
Cell[319723, 6190, 316, 8, 36, "Input",ExpressionUUID->"d73d02a2-a545-4245-9825-821c3df3bdff"],
Cell[320042, 6200, 81767, 1480, 81, "Output",ExpressionUUID->"ccaf0894-a085-4caa-9b1c-10a46dbc16af"]
}, Open  ]],
Cell[CellGroupData[{
Cell[401846, 7685, 160, 2, 36, "Input",ExpressionUUID->"9c6d93bf-cf38-43e2-a4ea-adafcfffae25"],
Cell[402009, 7689, 72081, 1421, 760, "Output",ExpressionUUID->"f9b5d6e3-0f3d-4484-8380-501557105cfa"]
}, Open  ]],
Cell[CellGroupData[{
Cell[474127, 9115, 462, 7, 87, "Input",ExpressionUUID->"6a27f46e-2521-40d3-94e5-cc66192cffc2"],
Cell[474592, 9124, 167010, 2716, 81, "Output",ExpressionUUID->"ba6a6431-7694-4ad8-b8b5-b38f640559b3"],
Cell[641605, 11842, 169, 2, 36, "Output",ExpressionUUID->"d555a242-289a-4962-b97b-c065a434d843"],
Cell[641777, 11846, 26787, 697, 412, "Output",ExpressionUUID->"54f15797-ca92-4c81-ab57-4ee86de0b3b4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[668601, 12548, 450, 9, 36, "Input",ExpressionUUID->"cb036430-d9b6-4122-88ae-f74c52265287"],
Cell[669054, 12559, 39234, 734, 81, "Output",ExpressionUUID->"6861b0c4-6af8-48e4-9ac8-42258d82245f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[708325, 13298, 462, 7, 87, "Input",ExpressionUUID->"19e3014c-8ed0-4140-81e5-603c58ef5c85"],
Cell[708790, 13307, 121023, 1902, 81, "Output",ExpressionUUID->"b89c1ab5-3b8d-42dc-8c4f-cc961f748600"],
Cell[829816, 15211, 193, 2, 36, "Output",ExpressionUUID->"a2c56de1-718e-4f2d-a011-697b0a75994f"],
Cell[830012, 15215, 26813, 697, 412, "Output",ExpressionUUID->"9e769d92-a201-4083-b522-730809d58a13"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

